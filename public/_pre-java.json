{
  "mode": "replace",
  "lessons": [
    {
      "id": 1,
      "title": "1. Hello, World!",
      "description": "The classic first step in programming. Your goal is to print the exact text \"Hello, World!\" to the console. Use `System.out.println()` to achieve this.",
      "initialCode": "public class Main {\n    public static void main(String[] args) {\n        // Your code here. Print \"Hello, World!\"\n        \n    }\n}",
      "fullSolution": "public class Main {\n    public static void main(String[] args) {\n        // Your code here. Print \"Hello, World!\"\n        System.out.println(\"Hello, World!\");\n    }\n}",
      "expectedOutput": "Hello, World!",
      "tutorial": "<p class=\"mb-4 text-gray-300\">In Java, the console is a text output window. To print text to it, we use a built-in command from the System library.</p><p class=\"mb-4 text-gray-300\">The command is <code>System.out.println()</code>. The <code>ln</code> part means \"line,\" so it prints the text and then moves to the next line.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">// This line will print \"Welcome to Java!\" to the console.\nSystem.out.println(\"Welcome to Java!\");\n\n// This will print a number. Numbers don't need quotes.\nSystem.out.println(123);</pre></div><p class=\"mt-4 text-gray-300\">For this lesson, you need to print the specific phrase \"Hello, World!\".</p>",
      "language": "java"
    },
    {
      "id": 2,
      "title": "2. Variables & Data Types",
      "description": "Variables are containers for storing data. Declare an integer variable named `myNumber`, assign it the value `42`, and then print the variable to the console.",
      "initialCode": "public class Main {\n    public static void main(String[] args) {\n        // Declare an integer variable named myNumber with value 42\n        \n\n        // Print the myNumber variable\n        \n    }\n}",
      "fullSolution": "public class Main {\n    public static void main(String[] args) {\n        // Declare an integer variable named myNumber with value 42\n        int myNumber = 42;\n\n        // Print the myNumber variable\n        System.out.println(myNumber);\n    }\n}",
      "expectedOutput": "42",
      "tutorial": "<p class=\"mb-4 text-gray-300\">In Java, a variable is like a labeled box where you can store information. You must first <strong>declare</strong> it by giving it a data type and a name.</p><ul class=\"list-disc list-inside mb-4 text-gray-300 space-y-1\"><li><code>int</code>: for whole numbers (e.g., 5, -10, 42).</li><li><code>String</code>: for text (e.g., \"Hello, World!\").</li><li><code>double</code>: for decimal numbers (e.g., 3.14).</li><li><code>boolean</code>: for true or false values.</li></ul><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">// 1. Declare a variable 'age' of type 'int'\nint age;\n\n// 2. Assign the value 25 to it\nage = 25;\n\n// You can also declare and assign in one line (which is common):\nint score = 100;\n\n// 3. Print the value stored in the variable (notice no quotes)\nSystem.out.println(score); // This will print 100</pre></div><p class=\"mt-4 text-gray-300\">In this lesson, create an <code>int</code> variable named <code>myNumber</code>, give it the value <code>42</code>, and print it.</p>",
      "language": "java"
    },
    {
      "title": "3. Arithmetic & Assignment",
      "language": "java",
      "description": "Update the balance by adding the deposit and subtracting the withdrawal using compound assignment, then print the result.",
      "initialCode": "public class Main {\n    public static void main(String[] args) {\n        int balance = 100;\n        int deposit = 35;\n        int withdrawal = 20;\n\n        // Use compound assignment to add the deposit and subtract the withdrawal\n        // Then print the balance\n\n    }\n}\n",
      "fullSolution": "public class Main {\n    public static void main(String[] args) {\n        int balance = 100;\n        int deposit = 35;\n        int withdrawal = 20;\n\n        balance += deposit;\n        balance -= withdrawal;\n        System.out.println(balance);\n    }\n}\n",
      "expectedOutput": "115",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Use arithmetic operators (<code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>) for calculations. Compound assignment like <code>+=</code> and <code>-=</code> updates a variable without rewriting its name.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">int total = 10;\ntotal += 5;  // same as total = total + 5\ntotal -= 2;\ntotal++;    // adds one (same as total += 1)\nSystem.out.println(total);</pre></div><p class=\"mt-4 text-gray-300\">This shorthand is essential for counters such as <code>i++</code> that you'll rely on in loops.</p>",
      "id": 3
    },
    {
      "title": "4. Increment & Decrement",
      "language": "java",
      "description": "Increase the counter to 3 using the ++ operator, then print it.",
      "initialCode": "public class Main {\n    public static void main(String[] args) {\n        int counter = 0;\n\n        // Use the ++ operator to bring counter up to 3\n\n        System.out.println(counter);\n    }\n}\n",
      "fullSolution": "public class Main {\n    public static void main(String[] args) {\n        int counter = 0;\n\n        counter++;\n        counter++;\n        counter++;\n\n        System.out.println(counter);\n    }\n}\n",
      "expectedOutput": "3",
      "tutorial": "<p class=\"mb-4 text-gray-300\">The increment (<code>++</code>) and decrement (<code>--</code>) operators add or subtract 1. They are shorthand for <code>counter = counter + 1</code> and <code>counter = counter - 1</code>.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">int lives = 3;\nlives--;   // now 2\nint score = 0;\nscore++;  // now 1</pre></div><p class=\"mt-4 text-gray-300\">You'll use <code>i++</code> constantly when writing loop counters.</p>",
      "id": 4
    },
    {
      "title": "5. Comparison Operators",
      "language": "java",
      "description": "Compare the score to the passingScore to create a boolean named isPassing, then print it.",
      "initialCode": "public class Main {\n    public static void main(String[] args) {\n        int score = 88;\n        int passingScore = 70;\n\n        // Create a boolean isPassing using a comparison and print it\n\n    }\n}\n",
      "fullSolution": "public class Main {\n    public static void main(String[] args) {\n        int score = 88;\n        int passingScore = 70;\n\n        boolean isPassing = score >= passingScore;\n        System.out.println(isPassing);\n    }\n}\n",
      "expectedOutput": "true",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Comparison operators (<code>&gt;</code>, <code>&gt;=</code>, <code>&lt;</code>, <code>&lt;=</code>, <code>==</code>, <code>!=</code>) evaluate to boolean results.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">int temperature = 72;\nboolean isWarm = temperature &gt;= 70;\nSystem.out.println(isWarm); // true</pre></div><p class=\"mt-4 text-gray-300\">These boolean expressions power <code>if</code> statements and loop conditions.</p>",
      "id": 5
    },
    {
      "id": 6,
      "title": "6. While Loops",
      "description": "A `while` loop executes a block of code as long as a specified condition is true. Create a loop that prints numbers from 1 to 5, each on a new line.",
      "initialCode": "public class Main {\n    public static void main(String[] args) {\n        int i = 1;\n\n        // Create a while loop that runs as long as i is less than or equal to 5\n        // Inside the loop, print the value of i and then increment it.\n\n    }\n}",
      "fullSolution": "public class Main {\n    public static void main(String[] args) {\n        int i = 1;\n\n        // Create a while loop that runs as long as i is less than or equal to 5\n        // Inside the loop, print the value of i and then increment it.\n        while (i <= 5) {\n            System.out.println(i);\n            i++;\n        }\n    }\n}",
      "expectedOutput": "1\n2\n3\n4\n5",
      "tutorial": "<p class=\"mb-4 text-gray-300\">A <code>while</code> loop is used to repeat a block of code as long as a condition is met. It's useful when you don't know exactly how many times you need to loop.</p><p class=\"mb-4 text-gray-300\"><strong>Crucially</strong>, you must ensure the condition eventually becomes false, otherwise you'll create an infinite loop!</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">int countdown = 3;\n\nwhile (countdown > 0) {\n    System.out.println(countdown);\n    countdown--; // This is essential to avoid an infinite loop!\n}\n\nSystem.out.println(\"Blast off!\");</pre></div><p class=\"mt-4 text-gray-300\">For this lesson, initialize a counter and use a <code>while</code> loop to print numbers 1 through 5. Don't forget to increment your counter inside the loop!</p>",
      "language": "java"
    },
    {
      "id": 7,
      "title": "7. For Loops",
      "description": "A `for` loop is ideal when you know exactly how many times you want to loop. Use a for loop to print the numbers from 0 to 4, each on a new line.",
      "initialCode": "public class Main {\n    public static void main(String[] args) {\n        // Create a for loop that initializes a counter at 0,\n        // continues as long as it's less than 5, and increments by 1.\n\n    }\n}",
      "fullSolution": "public class Main {\n    public static void main(String[] args) {\n        // Create a for loop that initializes a counter at 0,\n        // continues as long as it's less than 5, and increments by 1.\n        for (int i = 0; i < 5; i++) {\n            System.out.println(i);\n        }\n    }\n}",
      "expectedOutput": "0\n1\n2\n3\n4",
      "tutorial": "<p class=\"mb-4 text-gray-300\">A <strong>for loop</strong> provides a concise way to write a loop structure. It consists of three parts, separated by semicolons:</p><ol class=\"list-decimal list-inside mb-4 text-gray-300 space-y-2\"><li><strong>Initialization:</strong> Executed once at the beginning (e.g., <code>int i = 0</code>).</li><li><strong>Condition:</strong> Evaluated before each loop iteration. If it's false, the loop stops (e.g., <code>i < 5</code>).</li><li><strong>Increment/Decrement:</strong> Executed at the end of each iteration (e.g., <code>i++</code>).</li></ol><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">// This loop will print \"Iteration 0\" through \"Iteration 4\"\nfor (int i = 0; i < 5; i++) {\n    System.out.println(\"Iteration \" + i);\n}</pre></div><p class=\"mt-4 text-gray-300\">Your task is to create a for loop that prints the value of the counter <code>i</code> on each iteration, from 0 up to (but not including) 5.</p>",
      "language": "java"
    },
    {
      "id": 8,
      "title": "8. Introduction to Arrays",
      "description": "An array is a collection of similar types of data. Create an array of integers, store some numbers in it, and then print the second element from the array.",
      "initialCode": "public class Main {\n    public static void main(String[] args) {\n        // Declare and initialize an integer array named 'numbers'\n        // with the values 10, 20, 30, 40, 50.\n\n        // Print the element at index 1 of the array.\n\n    }\n}",
      "fullSolution": "public class Main {\n    public static void main(String[] args) {\n        // Declare and initialize an integer array named 'numbers'\n        // with the values 10, 20, 30, 40, 50.\n        int[] numbers = {10, 20, 30, 40, 50};\n\n        // Print the element at index 1 of the array.\n        System.out.println(numbers[1]);\n    }\n}",
      "expectedOutput": "20",
      "tutorial": "<p class=\"mb-4 text-gray-300\">An <strong>array</strong> is a container object that holds a fixed number of values of a single type. The length of an array is established when the array is created.</p><p class=\"mb-4 text-gray-300\">Array elements are accessed by their <strong>index</strong>, which starts at <strong>0</strong>. So, the first element is at index 0, the second at index 1, and so on.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">// Declare and initialize an array of Strings\nString[] fruits = {\"Apple\", \"Banana\", \"Cherry\"};\n\n// Access and print the first element (index 0)\nSystem.out.println(fruits[0]); // Prints \"Apple\"\n\n// Access and print the third element (index 2)\nSystem.out.println(fruits[2]); // Prints \"Cherry\"</pre></div><p class=\"mt-4 text-gray-300\">Your task is to create an integer array and print the element at index 1, which is the second value in the list.</p>",
      "language": "java"
    },
    {
      "id": 9,
      "title": "9. Intro to Classes & Objects",
      "description": "Java is an Object-Oriented language. A `class` is a blueprint for creating `objects`. Create a simple `Dog` class with a `bark()` method, then create an object of that class and call its method.",
      "initialCode": "// First, define the Dog class outside of the Main class\nclass Dog {\n    // Add a public void method named bark() that prints \"Woof!\"\n\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        // Create an instance (an object) of the Dog class\n\n        // Call the bark() method on your new dog object\n\n    }\n}",
      "fullSolution": "// First, define the Dog class outside of the Main class\nclass Dog {\n    // Add a public void method named bark() that prints \"Woof!\"\n    public void bark() {\n        System.out.println(\"Woof!\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        // Create an instance (an object) of the Dog class\n        Dog myDog = new Dog();\n\n        // Call the bark() method on your new dog object\n        myDog.bark();\n    }\n}",
      "expectedOutput": "Woof!",
      "tutorial": "<p class=\"mb-4 text-gray-300\">A <strong>class</strong> is a template for creating objects. It defines an object's properties (fields) and behaviors (methods).</p><p class=\"mb-4 text-gray-300\">An <strong>object</strong> is an instance of a class. You can create many objects from a single class blueprint.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">// The blueprint for a Car\nclass Car {\n    // A behavior (method) of the Car\n    public void startEngine() {\n        System.out.println(\"Engine started!\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        // Create an object (an instance) from the Car class\n        Car myCar = new Car();\n        \n        // Call a method on the object\n        myCar.startEngine(); // Prints \"Engine started!\"\n    }\n}</pre></div>",
      "language": "java"
    },
    {
      "id": 10,
      "title": "10. Advanced Conditionals (Else If)",
      "description": "Check multiple conditions using `if`, `else if`, and `else`. Based on the `score` variable, print 'Excellent' for scores > 90, 'Good' for scores > 75, and 'Needs Improvement' for all others.",
      "initialCode": "public class Main {\n    public static void main(String[] args) {\n        int score = 85;\n\n        // Your if-else if-else statement here\n\n    }\n}",
      "fullSolution": "public class Main {\n    public static void main(String[] args) {\n        int score = 85;\n\n        // Your if-else if-else statement here\n        if (score > 90) {\n            System.out.println(\"Excellent\");\n        } else if (score > 75) {\n            System.out.println(\"Good\");\n        } else {\n            System.out.println(\"Needs Improvement\");\n        }\n    }\n}",
      "expectedOutput": "Good",
      "tutorial": "<p class=\"mb-4 text-gray-300\">The <strong>if-else if-else</strong> statement is perfect for when you have multiple conditions to check in sequence. Java checks them from top to bottom and runs the code for the first one that is true.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">int number = 0;\n\nif (number > 0) {\n    System.out.println(\"The number is positive.\");\n} else if (number < 0) {\n    System.out.println(\"The number is negative.\");\n} else {\n    System.out.println(\"The number is zero.\");\n}</pre></div><p class=\"mt-4 text-gray-300\">Notice how only one of the blocks can ever run. The final <code>else</code> is a catch-all if none of the previous conditions were met.</p>",
      "language": "java"
    },
    {
      "title": "11. Else-If Chains with &&",
      "language": "java",
      "description": "Decide a student outcome using if/else-if/else and the && operator. Score >= 90 prints \"Honors\"; score >= 75 with bonus prints \"Pass\"; everything else prints \"Retake\".",
      "initialCode": "public class Main {\n    public static void main(String[] args) {\n        int score = 82;\n        boolean hasBonus = true;\n\n        // Write an if/else-if/else chain that matches the description\n        \n    }\n}\n",
      "fullSolution": "public class Main {\n    public static void main(String[] args) {\n        int score = 82;\n        boolean hasBonus = true;\n\n        if (score >= 90) {\n            System.out.println(\"Honors\");\n        } else if (score >= 75 && hasBonus) {\n            System.out.println(\"Pass\");\n        } else {\n            System.out.println(\"Retake\");\n        }\n    }\n}\n",
      "expectedOutput": "Pass",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Check conditions in priority order. Combine requirements with <code>&&</code> so a branch runs only when <em>both</em> parts are true.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">int age = 17;\nboolean hasPermit = true;\nif (age >= 18) {\n    System.out.println(\"Full License\");\n} else if (age >= 16 && hasPermit) {\n    System.out.println(\"Learner Permit\");\n} else {\n    System.out.println(\"Not eligible\");\n}</pre></div>",
      "id": 11
    },
    {
      "id": 12,
      "title": "12. Logical Operators",
      "description": "Combine conditions using logical operators. Use the `&&` (AND) operator to check if a user is both `loggedIn` and an `isAdmin`. To pass, change `isAdmin` to `true` and print 'Admin Access Granted'.",
      "initialCode": "public class Main {\n    public static void main(String[] args) {\n        boolean loggedIn = true;\n        boolean isAdmin = false;\n\n        // Change isAdmin to true on this line\n\n        // Use an if statement with the && operator to check both variables\n        // If the condition is true, print \"Admin Access Granted\"\n\n    }\n}",
      "fullSolution": "public class Main {\n    public static void main(String[] args) {\n        boolean loggedIn = true;\n        boolean isAdmin = false;\n\n        // Change isAdmin to true on this line\n        isAdmin = true;\n\n        // Use an if statement with the && operator to check both variables\n        // If the condition is true, print \"Admin Access Granted\"\n        if (loggedIn && isAdmin) {\n            System.out.println(\"Admin Access Granted\");\n        }\n    }\n}",
      "expectedOutput": "Admin Access Granted",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Logical operators let you create more complex conditions:</p><ul class=\"list-disc list-inside mb-4 text-gray-300 space-y-2\"><li><code>&&</code> (AND): True only if <strong>both</strong> conditions are true.</li><li><code>||</code> (OR): True if <strong>at least one</strong> condition is true.</li><li><code>!</code> (NOT): Inverts the boolean value (true becomes false, false becomes true).</li></ul><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">int age = 25;\nboolean hasLicense = true;\n\nif (age >= 18 && hasLicense) {\n    System.out.println(\"You are eligible to drive.\");\n}</pre></div><p class=\"mt-4 text-gray-300\">For this lesson, you'll need to write an <code>if</code> statement that checks if both <code>loggedIn</code> and <code>isAdmin</code> are true. To make the condition pass, you will also need to change the value of <code>isAdmin</code> from <code>false</code> to <code>true</code>.</p>",
      "language": "java"
    },
    {
      "id": 13,
      "title": "13. Creating Methods",
      "description": "Write a reusable block of code called a method. Create a method named `greetUser` that takes a `String` name as a parameter and prints 'Hello, [name]!'. Call this method from `main` with your own name.",
      "initialCode": "public class Main {\n\n    // Define your greetUser method here. It should be public and static.\n\n\n    public static void main(String[] args) {\n        // Call your greetUser method with your name (e.g., \"Alex\")\n\n    }\n}",
      "fullSolution": "public class Main {\n\n    // Define your greetUser method here. It should be public and static.\n    public static void greetUser(String name) {\n        System.out.println(\"Hello, \" + name + \"!\");\n    }\n\n    public static void main(String[] args) {\n        // Call your greetUser method with your name (e.g., \"Alex\")\n        greetUser(\"Alex\");\n    }\n}",
      "expectedOutput": "Hello, Alex!",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Methods (also called functions in other languages) help you organize code and avoid repetition. You define it once and can call it many times.</p><p class=\"mb-4 text-gray-300\">A method signature has a few parts: visibility (<code>public</code>), other modifiers (<code>static</code>), return type (<code>void</code> if it returns nothing), the method name, and parameters in parentheses.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">public class Main {\n\n    // A method that takes two integers and prints their sum\n    public static void add(int a, int b) {\n        System.out.println(a + b);\n    }\n\n    public static void main(String[] args) {\n        // Call the add method with different arguments\n        add(5, 3);   // Prints 8\n        add(10, 20); // Prints 30\n    }\n}</pre></div>",
      "language": "java"
    },
    {
      "id": 14,
      "title": "14. Methods with Return Values",
      "description": "Methods can compute and return a value. Create a method `add` that takes two integers, returns their sum, and then print the returned result from the `main` method.",
      "initialCode": "public class Main {\n\n    // Create a public static method named 'add' that takes two ints (a, b)\n    // and returns an int which is their sum.\n\n\n    public static void main(String[] args) {\n        // Call the add method with 15 and 27, store the result in a variable,\n        // and then print that result variable.\n\n    }\n}",
      "fullSolution": "public class Main {\n\n    // Create a public static method named 'add' that takes two ints (a, b)\n    // and returns an int which is their sum.\n    public static int add(int a, int b) {\n        return a + b;\n    }\n\n    public static void main(String[] args) {\n        // Call the add method with 15 and 27, store the result in a variable,\n        // and then print that result variable.\n        int result = add(15, 27);\n        System.out.println(result);\n    }\n}",
      "expectedOutput": "42",
      "tutorial": "<p class=\"mb-4 text-gray-300\">So far, our methods have used <code>void</code>, meaning they don't return any information. By changing <code>void</code> to a data type (like <code>int</code> or <code>String</code>), we can make the method send a value back to where it was called.</p><p class=\"mb-4 text-gray-300\">The <code>return</code> keyword is used to specify what value to send back. When <code>return</code> is executed, the method stops immediately.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">public class Main {\n\n    // This method takes a number and returns that number doubled.\n    public static int doubleValue(int number) {\n        return number * 2;\n    }\n\n    public static void main(String[] args) {\n        // We call the method and store its return value in a variable.\n        int answer = doubleValue(5);\n\n        // Now we can use the result.\n        System.out.println(answer); // Prints 10\n    }\n}</pre></div><p class=\"mt-4 text-gray-300\">Your task is to create an <code>add</code> method that returns the sum of two numbers.</p>",
      "language": "java"
    },
    {
      "title": "15. Array Length & Bounds",
      "language": "java",
      "description": "Use .length to read the first and last elements of an array and print the count.",
      "initialCode": "public class Main {\n    public static void main(String[] args) {\n        int[] values = {5, 9, 14, 20, 25};\n\n        // Print first value\n        // Print last value using values.length - 1\n        // Print the number of items\n    }\n}\n",
      "fullSolution": "public class Main {\n    public static void main(String[] args) {\n        int[] values = {5, 9, 14, 20, 25};\n\n        System.out.println(values[0]);\n        System.out.println(values[values.length - 1]);\n        System.out.println(values.length);\n    }\n}\n",
      "expectedOutput": "5\n25\n5",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Arrays know their size via the <code>length</code> field. Valid indexes run from <code>0</code> up to <code>length - 1</code>.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">int[] nums = {2, 4, 6};\nSystem.out.println(nums[0]);  // 2\nSystem.out.println(nums[nums.length - 1]); // 6\nSystem.out.println(nums.length); // 3</pre></div>",
      "id": 15
    },
    {
      "id": 16,
      "title": "16. Looping Through Arrays",
      "description": "Combine loops and arrays to process each item in a collection. Use a `for` loop to iterate through an array of strings and print each name on a new line.",
      "initialCode": "public class Main {\n    public static void main(String[] args) {\n        String[] names = {\"Alice\", \"Bob\", \"Charlie\"};\n\n        // Use a for loop to print each name from the array.\n        // You can get the array's size with 'names.length'.\n\n    }\n}",
      "fullSolution": "public class Main {\n    public static void main(String[] args) {\n        String[] names = {\"Alice\", \"Bob\", \"Charlie\"};\n\n        // Use a for loop to print each name from the array.\n        // You can get the array's size with 'names.length'.\n        for (int i = 0; i < names.length; i++) {\n            System.out.println(names[i]);\n        }\n    }\n}",
      "expectedOutput": "Alice\nBob\nCharlie",
      "tutorial": "<p class=\"mb-4 text-gray-300\">A very common task is to perform an action on every item in an array. A <code>for</code> loop is perfect for this.</p><p class=\"mb-4 text-gray-300\">You can get the number of items in an array using the <code>.length</code> property. This is extremely useful for setting the loop's condition, ensuring it runs exactly the right number of times.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">int[] scores = {98, 87, 100, 91};\n\n// The loop runs as long as 'i' is less than the array's length.\nfor (int i = 0; i < scores.length; i++) {\n    // We use the loop variable 'i' as the index to get each element.\n    System.out.println(\"Score \" + i + \": \" + scores[i]);\n}</pre></div><p class=\"mt-4 text-gray-300\">Your goal is to loop through the <code>names</code> array and print each element using <code>System.out.println()</code>.</p>",
      "language": "java"
    },
    {
      "id": 17,
      "title": "17. String Concatenation",
      "description": "Combine strings using the `+` operator. Create two string variables and combine them with a space in between to form a sentence, then print the result.",
      "initialCode": "public class Main {\n    public static void main(String[] args) {\n        String part1 = \"Java is\";\n        String part2 = \"powerful\";\n\n        // Create a new string named 'fullSentence' by combining part1, a space, and part2.\n\n\n        // Print the fullSentence.\n\n    }\n}",
      "fullSolution": "public class Main {\n    public static void main(String[] args) {\n        String part1 = \"Java is\";\n        String part2 = \"powerful\";\n\n        // Create a new string named 'fullSentence' by combining part1, a space, and part2.\n        String fullSentence = part1 + \" \" + part2;\n\n        // Print the fullSentence.\n        System.out.println(fullSentence);\n    }\n}",
      "expectedOutput": "Java is powerful",
      "tutorial": "<p class=\"mb-4 text-gray-300\">In Java, the <code>+</code> operator does double duty. When used with numbers, it performs addition. When used with strings, it performs <strong>concatenation</strong>, which means it joins them together.</p><p class=\"mb-4 text-gray-300\">You can combine variables and string literals (text in quotes) to build up complex strings.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">String user = \"Alex\";\nint level = 5;\n\n// We can combine strings and other data types.\n// Java automatically converts the number 'level' to a string.\nString message = \"Welcome, \" + user + \"! You are on level \" + level + \".\";\n\nSystem.out.println(message); // Prints \"Welcome, Alex! You are on level 5.\"</pre></div><p class=\"mt-4 text-gray-300\">For this lesson, combine the two provided strings. Don't forget to add a space <code>\" \"</code> in between them!</p>",
      "language": "java"
    },
    {
      "id": 18,
      "title": "18. Constructors",
      "description": "A constructor is a special method that is called when an object is created. Add a constructor to the `Car` class that accepts a `String` for the car's color and prints a message.",
      "initialCode": "class Car {\n    String color;\n\n    // Create a constructor for the Car class.\n    // It should accept one String parameter named 'carColor'.\n    // Inside, it should set the instance variable 'color' and\n    // print \"A new [color] car has been created.\"\n\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        // Create a new Car object with the color \"blue\".\n        Car myCar = new Car(\"blue\");\n    }\n}",
      "fullSolution": "class Car {\n    String color;\n\n    // Create a constructor for the Car class.\n    // It should accept one String parameter named 'carColor'.\n    // Inside, it should set the instance variable 'color' and\n    // print \"A new [color] car has been created.\"\n    public Car(String carColor) {\n        this.color = carColor;\n        System.out.println(\"A new \" + this.color + \" car has been created.\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        // Create a new Car object with the color \"blue\".\n        Car myCar = new Car(\"blue\");\n    }\n}",
      "expectedOutput": "A new blue car has been created.",
      "tutorial": "<p class=\"mb-4 text-gray-300\">A <strong>constructor</strong> in Java is a special method used to initialize objects. It is called at the time of object creation. It must have the same name as the class and does not have a return type.</p><p class=\"mb-4 text-gray-300\">Constructors are great for setting up the initial state of an object.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">class Dog {\n    String name;\n\n    // This is the constructor for the Dog class.\n    public Dog(String dogName) {\n        // 'this.name' refers to the instance variable.\n        // 'dogName' refers to the parameter.\n        this.name = dogName;\n        System.out.println(\"Dog created with name: \" + this.name);\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        // The constructor is called when we use 'new'.\n        Dog myDog = new Dog(\"Fido\"); // Prints \"Dog created with name: Fido\"\n    }\n}</pre></div>",
      "language": "java"
    },
    {
      "title": "19. this for Fields in Constructors",
      "language": "java",
      "description": "Use this to assign constructor parameters to fields, then call an instance method that references the field.",
      "initialCode": "class Counter {\n    private int value;\n\n    public Counter(int start) {\n        // Assign the parameter to the field using this\n    }\n\n    public void increment() {\n        value++;\n    }\n\n    public int getValue() {\n        return value;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Counter counter = new Counter(5);\n        counter.increment();\n        System.out.println(counter.getValue());\n    }\n}\n",
      "fullSolution": "class Counter {\n    private int value;\n\n    public Counter(int start) {\n        this.value = start;\n    }\n\n    public void increment() {\n        value++;\n    }\n\n    public int getValue() {\n        return value;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Counter counter = new Counter(5);\n        counter.increment();\n        System.out.println(counter.getValue());\n    }\n}\n",
      "expectedOutput": "6",
      "tutorial": "<p class=\"mb-4 text-gray-300\"><code>this</code> disambiguates between fields and parameters with the same name. It's common to store constructor arguments on the instance this way.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">class Player {\n    private String name;\n    public Player(String name) {\n        this.name = name;\n    }\n}</pre></div>",
      "id": 19
    },
    {
      "title": "20. Static vs Instance Fields",
      "language": "java",
      "description": "Keep a static count of created sessions while storing each session's user name separately.",
      "initialCode": "class Session {\n    // Declare a static field totalSessions initialized to 0\n    // Declare an instance field user\n\n    public Session(String user) {\n        // Assign user field and increment the static counter\n    }\n\n    public static int getTotalSessions() {\n        // Return the static counter\n        return 0;\n    }\n\n    public String getUser() {\n        return user;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Session first = new Session(\"ada\");\n        Session second = new Session(\"grace\");\n        System.out.println(Session.getTotalSessions());\n        System.out.println(first.getUser());\n    }\n}\n",
      "fullSolution": "class Session {\n    private static int totalSessions = 0;\n    private final String user;\n\n    public Session(String user) {\n        this.user = user;\n        totalSessions++;\n    }\n\n    public static int getTotalSessions() {\n        return totalSessions;\n    }\n\n    public String getUser() {\n        return user;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Session first = new Session(\"ada\");\n        Session second = new Session(\"grace\");\n        System.out.println(Session.getTotalSessions());\n        System.out.println(first.getUser());\n    }\n}\n",
      "expectedOutput": "2\nada",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Use <code>static</code> for data shared by every instance (class-level state) and instance fields for per-object details. Access static members through the class name.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">class Counter {\n    static int total = 0;\n    Counter() { total++; }\n}</pre></div>",
      "id": 20
    },
    {
      "id": 21,
      "title": "21. Enhanced For Loop",
      "description": "Java provides a simpler `for-each` loop to iterate over arrays or collections. Use an enhanced for loop to print each fruit from the `fruits` array.",
      "initialCode": "public class Main {\n    public static void main(String[] args) {\n        String[] fruits = {\"Apple\", \"Orange\", \"Banana\"};\n\n        // Use an enhanced for loop (for-each) to print each fruit.\n\n    }\n}",
      "fullSolution": "public class Main {\n    public static void main(String[] args) {\n        String[] fruits = {\"Apple\", \"Orange\", \"Banana\"};\n\n        // Use an enhanced for loop (for-each) to print each fruit.\n        for (String fruit : fruits) {\n            System.out.println(fruit);\n        }\n    }\n}",
      "expectedOutput": "Apple\nOrange\nBanana",
      "tutorial": "<p class=\"mb-4 text-gray-300\">The <strong>enhanced for loop</strong> (or for-each loop) is a more readable and concise way to iterate through all the elements of an array or collection, without needing an index variable (like <code>i</code>).</p><p class=\"mb-4 text-gray-300\">The syntax is <code>for (Type variableName : arrayName)</code>. In each iteration, the loop automatically assigns the next element from the array to your variable.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">int[] numbers = {10, 20, 30};\n\n// For each 'number' of type 'int' in the 'numbers' array...\nfor (int number : numbers) {\n    // ...print it out.\n    System.out.println(number);\n}</pre></div><p class=\"mt-4 text-gray-300\">This is often preferred over a standard for loop when you just need to access each element in order and don't need the index.</p>",
      "language": "java"
    },
    {
      "id": 22,
      "title": "22. User Input (Scanner)",
      "description": "Real programs need to interact with users. Use the `Scanner` class to get input. The simulation will provide the input \"World\". Your task is to read it and print \"Hello, World\".",
      "initialCode": "// We need to import the Scanner class to use it.\nimport java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Create a new Scanner object to read from the console.\n        Scanner scanner = new Scanner(System.in);\n\n        System.out.println(\"Enter a word:\");\n\n        // Read the next line of input and store it in a variable.\n        String input = scanner.nextLine();\n\n        // Print \"Hello, \" followed by the input you received.\n\n    }\n}",
      "fullSolution": "// We need to import the Scanner class to use it.\nimport java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Create a new Scanner object to read from the console.\n        Scanner scanner = new Scanner(System.in);\n\n        System.out.println(\"Enter a word:\");\n\n        // Read the next line of input and store it in a variable.\n        String input = scanner.nextLine();\n\n        // Print \"Hello, \" followed by the input you received.\n        System.out.println(\"Hello, \" + input);\n    }\n}",
      "userInput": [
        "World"
      ],
      "expectedOutput": "Enter a word:\nHello, World",
      "tutorial": "<p class=\"mb-4 text-gray-300\">To get input from a user in the console, Java provides the <code>Scanner</code> class. It's part of Java's utility library, so you must first import it at the top of your file with <code>import java.util.Scanner;</code>.</p><p class=\"mb-4 text-gray-300\">You then create a <code>Scanner</code> object, telling it to read from the standard input stream, <code>System.in</code>.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner myScanner = new Scanner(System.in);\n        System.out.println(\"What is your name?\");\n\n        // The program will pause here and wait for the user to type.\n        String name = myScanner.nextLine(); \n\n        System.out.println(\"Nice to meet you, \" + name);\n    }\n}</pre></div><p class=\"mt-4 text-gray-300\">For this lesson, the simulator will automatically type \"World\" for you. Your job is to read that input using <code>scanner.nextLine()</code> and use it to construct the final output.</p>",
      "language": "java"
    },
    {
      "id": 23,
      "title": "23. Switch Statement",
      "description": "Use a `switch` statement to handle different cases for a character variable. Based on the `grade`, set the `comment` variable to the correct string.",
      "initialCode": "public class Main {\n    public static void main(String[] args) {\n        char grade = 'B';\n        String comment = \"\"; // Initialize the variable\n\n        // Use a switch statement to set the 'comment' variable.\n        // case 'A': \"Excellent!\"\n        // case 'B': \"Good job!\"\n        // case 'C': \"You passed.\"\n        // default: \"Invalid grade.\"\n        // Don't forget the 'break' statements!\n\n\n        System.out.println(\"Comment: \" + comment);\n    }\n}",
      "fullSolution": "public class Main {\n    public static void main(String[] args) {\n        char grade = 'B';\n        String comment; // It's better to not initialize here\n\n        // Use a switch statement to set the 'comment' variable.\n        // case 'A': \"Excellent!\"\n        // case 'B': \"Good job!\"\n        // case 'C': \"You passed.\"\n        // default: \"Invalid grade.\"\n        // Don't forget the 'break' statements!\n        switch (grade) {\n            case 'A':\n                comment = \"Excellent!\";\n                break;\n            case 'B':\n                comment = \"Good job!\";\n                break;\n            case 'C':\n                comment = \"You passed.\";\n                break;\n            default:\n                comment = \"Invalid grade.\";\n                break;\n        }\n\n        System.out.println(\"Comment: \" + comment);\n    }\n}",
      "expectedOutput": "Comment: Good job!",
      "tutorial": "<p class=\"mb-4 text-gray-300\">The <strong>switch</strong> statement is a cleaner alternative to a long chain of <code>if-else if-else</code> statements when you need to compare one variable against several possible constant values.</p><p class=\"mb-4 text-gray-300\">The <code>break</code> keyword is crucial. If you forget it, the code will \"fall through\" and execute the code in the next <code>case</code> as well, which is usually not what you want.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">int day = 4;\nString dayString;\n\nswitch (day) {\n    case 1:  dayString = \"Monday\";\n             break;\n    case 2:  dayString = \"Tuesday\";\n             break;\n    case 3:  dayString = \"Wednesday\";\n             break;\n    // ... and so on\n    default: dayString = \"Invalid day\";\n             break;\n}\nSystem.out.println(dayString); // Prints \"Wednesday\" if day was 3</pre></div><p class=\"mt-4 text-gray-300\">Your task is to build a switch statement for the character variable <code>grade</code>. Note that you need to declare the <code>comment</code> variable before the switch, but you will assign its value inside the different cases.</p>",
      "language": "java"
    },
    {
      "id": 24,
      "title": "24. Modifying Array Elements",
      "description": "Arrays are mutable, meaning you can change their contents. Access an element by its index and assign a new value to it.",
      "initialCode": "public class Main {\n    public static void main(String[] args) {\n        String[] heroes = {\"Iron Man\", \"Thor\", \"Captain America\"};\n\n        // The Avengers have a new leader.\n        // Change the element at index 0 to \"Black Panther\".\n\n\n        // Print the first element of the array to confirm the change.\n\n    }\n}",
      "fullSolution": "public class Main {\n    public static void main(String[] args) {\n        String[] heroes = {\"Iron Man\", \"Thor\", \"Captain America\"};\n\n        // The Avengers have a new leader.\n        // Change the element at index 0 to \"Black Panther\".\n        heroes[0] = \"Black Panther\";\n\n        // Print the first element of the array to confirm the change.\n        System.out.println(heroes[0]);\n    }\n}",
      "expectedOutput": "Black Panther",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Because arrays are mutable (changeable), you can easily update their values. You use the same index syntax you used to read a value, but now you use it on the left side of an assignment operator (<code>=</code>).</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">int[] numbers = {1, 2, 99};\n\n// Print the original third element\nSystem.out.println(numbers[2]); // Prints 99\n\n// Change the value at index 2\nnumbers[2] = 3;\n\n// Print the new third element\nSystem.out.println(numbers[2]); // Prints 3</pre></div><p class=\"mt-4 text-gray-300\">Your task is to change the first element of the <code>heroes</code> array to \"Black Panther\" and then print that first element to the console.</p>",
      "language": "java"
    },
    {
      "title": "25. Array Loop Accumulators",
      "language": "java",
      "description": "Use a for loop to compute both the total and maximum value from the scores array, then print total followed by max.",
      "initialCode": "public class Main {\n    public static void main(String[] args) {\n        int[] scores = {10, 12, 8, 15, 7};\n\n        // Track running total and max score, then print them\n    }\n}\n",
      "fullSolution": "public class Main {\n    public static void main(String[] args) {\n        int[] scores = {10, 12, 8, 15, 7};\n\n        int total = 0;\n        int max = scores[0];\n        for (int score : scores) {\n            total += score;\n            if (score > max) {\n                max = score;\n            }\n        }\n\n        System.out.println(total);\n        System.out.println(max);\n    }\n}\n",
      "expectedOutput": "52\n15",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Loops often keep state across iterations?running totals, min/max tracking, or flags. Initialize before the loop, update inside, and use the results afterward.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">int min = numbers[0];\nfor (int n : numbers) {\n    if (n < min) {\n        min = n;\n    }\n}</pre></div>",
      "id": 25
    },
    {
      "id": 26,
      "title": "26. Sum of Array Elements",
      "description": "A common task is to iterate through an array to calculate a value. Use a for-each loop to calculate the sum of all numbers in an array.",
      "initialCode": "public class Main {\n    public static void main(String[] args) {\n        int[] numbers = {10, 20, 30, 40};\n        int sum = 0;\n\n        // Use a for-each loop to iterate through the 'numbers' array.\n        // In each iteration, add the current number to the 'sum' variable.\n\n\n        // After the loop, print the final sum.\n\n    }\n}",
      "fullSolution": "public class Main {\n    public static void main(String[] args) {\n        int[] numbers = {10, 20, 30, 40};\n        int sum = 0;\n\n        // Use a for-each loop to iterate through the 'numbers' array.\n        // In each iteration, add the current number to the 'sum' variable.\n        for (int number : numbers) {\n            sum = sum + number;\n        }\n\n        // After the loop, print the final sum.\n        System.out.println(sum);\n    }\n}",
      "expectedOutput": "100",
      "tutorial": "<p class=\"mb-4 text-gray-300\">This lesson combines several concepts: arrays, loops, and variable modification. The goal is to create an \"accumulator\" variable (<code>sum</code>) that starts at 0. Then, you loop through each element of the array and add its value to your accumulator.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">int[] scores = {5, 10, 15};\nint total = 0;\n\nfor (int score : scores) {\n    total += score; // This is a shorthand for total = total + score;\n}\n\nSystem.out.println(\"The total is: \" + total); // Prints \"The total is: 30\"</pre></div><p class=\"mt-4 text-gray-300\">Your task is to do the same for the <code>numbers</code> array and print out the final calculated sum.</p>",
      "language": "java"
    },
    {
      "id": 27,
      "title": "27. Finding the Maximum Value",
      "description": "Iterate through an array to find the largest value. This is a classic algorithm that combines loops and conditional logic.",
      "initialCode": "public class Main {\n    public static void main(String[] args) {\n        int[] numbers = {1, 44, 7, 99, 23, 42};\n        int max = numbers[0]; // Assume the first element is the largest to start.\n\n        // Loop through the array starting from the SECOND element (index 1).\n        // If the current number is greater than 'max', update 'max'.\n\n\n        // After the loop, print the maximum value.\n        System.out.println(\"The maximum value is: \" + max);\n    }\n}",
      "fullSolution": "public class Main {\n    public static void main(String[] args) {\n        int[] numbers = {1, 44, 7, 99, 23, 42};\n        int max = numbers[0]; // Assume the first element is the largest to start.\n\n        // Loop through the array starting from the SECOND element (index 1).\n        // If the current number is greater than 'max', update 'max'.\n        for (int i = 1; i < numbers.length; i++) {\n            if (numbers[i] > max) {\n                max = numbers[i];\n            }\n        }\n\n        // After the loop, print the maximum value.\n        System.out.println(\"The maximum value is: \" + max);\n    }\n}",
      "expectedOutput": "The maximum value is: 99",
      "tutorial": "<p class=\"mb-4 text-gray-300\">To find the maximum value in an array, you need a variable to keep track of the largest number found so far. A good strategy is to initialize this variable with the very first value from the array.</p><p class=\"mb-4 text-gray-300\">Then, you loop through the rest of the array. For each number, you compare it to your \"max so far\" variable. If the current number is larger, you update your max variable with the current number's value. By the end of the loop, your variable will hold the largest value in the entire array.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">int[] temps = {72, 85, 68, 91, 78};\nint highestTemp = temps[0]; // Start with 72\n\nfor (int temp : temps) {\n    if (temp > highestTemp) {\n        highestTemp = temp; // Update if we find a warmer day\n    }\n}\n\nSystem.out.println(highestTemp); // Prints 91</pre></div>",
      "language": "java"
    },
    {
      "id": 28,
      "title": "28. Finding the Average",
      "description": "Calculate the average of a list of numbers. This requires summing the elements and then performing floating-point division.",
      "initialCode": "public class Main {\n    public static void main(String[] args) {\n        int[] numbers = {10, 15, 20, 25, 30};\n        double sum = 0.0;\n\n        // First, loop through the numbers and calculate the sum.\n\n\n        // Next, calculate the average.\n        // To get an accurate decimal result, make sure to divide by a double.\n        double average = sum / numbers.length;\n\n        System.out.println(\"The average is: \" + average);\n    }\n}",
      "fullSolution": "public class Main {\n    public static void main(String[] args) {\n        int[] numbers = {10, 15, 20, 25, 30};\n        double sum = 0.0;\n\n        // First, loop through the numbers and calculate the sum.\n        for (int number : numbers) {\n            sum += number;\n        }\n\n        // Next, calculate the average.\n        // To get an accurate decimal result, make sure to divide by a double.\n        double average = sum / numbers.length;\n\n        System.out.println(\"The average is: \" + average);\n    }\n}",
      "expectedOutput": "The average is: 20.0",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Calculating an average involves two steps: finding the sum of all elements, and then dividing by the number of elements.</p><p class=\"mb-4 text-gray-300\">A key concept in Java is integer division versus floating-point (double) division. If you divide an integer by an integer, Java will truncate the result (e.g., <code>5 / 2</code> is <code>2</code>). To get a precise decimal answer, at least one of the numbers in the division must be a double. We can do this by making our <code>sum</code> variable a double from the start.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">int a = 7;\nint b = 2;\nSystem.out.println(a / b); // Prints 3 (integer division)\n\ndouble c = 7.0;\nSystem.out.println(c / b); // Prints 3.5 (floating-point division)</pre></div>",
      "language": "java"
    },
    {
      "id": 29,
      "title": "29. Inheritance (extends)",
      "description": "Inheritance allows a new class (subclass) to inherit properties and methods from an existing class (superclass). Create a `Dog` class that inherits from `Animal`.",
      "initialCode": "class Animal {\n    public void eat() {\n        System.out.println(\"This animal eats food.\");\n    }\n}\n\nclass Dog extends Animal {\n    // Add a method called bark() that prints \"Woof!\"\n\n}\n\nclass Cat extends Animal {\n    // Add a method called bark() that prints \"Meow!\"\n\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Animal myDog = new Dog();\n        Animal myCat = new Cat();\n        \n        myDog.eat();\n        myDog.bark();\n        myCat.eat();\n        myCat.bark();\n    }\n}",
      "fullSolution": "class Animal {\n    public void eat() {\n        System.out.println(\"This animal eats food.\");\n    }\n}\n\nclass Dog extends Animal {\n    // Add a method called bark() that prints \"Woof!\"\n    public void bark() {\n        System.out.println(\"Woof!\");\n    }\n}\n\nclass Cat extends Animal {\n    // Add a method called bark() that prints \"Meow!\"\n    public void bark() {\n        System.out.println(\"Meow!\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Animal myDog = new Dog();\n        Animal myCat = new Cat();\n        \n        myDog.eat();\n        myDog.bark();\n        myCat.eat();\n        myCat.bark();\n    }\n}",
      "expectedOutput": "This animal eats food.\nWoof!\nThis animal eats food.\nMeow!",
      "tutorial": "<p class=\"mb-4 text-gray-300\"><strong>Inheritance</strong> is a core principle of Object-Oriented Programming. It allows us to create a new class that is a modified version of an existing class. The new class (the <em>subclass</em>) inherits the fields and methods of the existing class (the <em>superclass</em>).</p><p class=\"mb-4 text-gray-300\">We use the <code>extends</code> keyword to do this. This promotes code reuse and creates a logical hierarchy.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">// Superclass\nclass Vehicle {\n    public void drive() {\n        System.out.println(\"Driving a vehicle.\");\n    }\n}\n\n// Subclass\nclass Car extends Vehicle {\n    public void honk() {\n        System.out.println(\"Beep beep!\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Car myCar = new Car();\n        myCar.drive(); // Inherited from Vehicle\n        myCar.honk();  // Defined in Car\n    }\n}</pre></div>",
      "language": "java"
    },
    {
      "title": "30. Override toString()",
      "language": "java",
      "description": "Override toString() so printing a Student shows \"Student: <name> (<level>)\".",
      "initialCode": "class Student {\n    private final String name;\n    private final String level;\n\n    public Student(String name, String level) {\n        this.name = name;\n        this.level = level;\n    }\n\n    // Override toString here\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(new Student(\"Ada\", \"junior\"));\n    }\n}\n",
      "fullSolution": "class Student {\n    private final String name;\n    private final String level;\n\n    public Student(String name, String level) {\n        this.name = name;\n        this.level = level;\n    }\n\n    @Override\n    public String toString() {\n        return \"Student: \" + name + \" (\" + level + \")\";\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(new Student(\"Ada\", \"junior\"));\n    }\n}\n",
      "expectedOutput": "Student: Ada (junior)",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Override <code>toString()</code> to give your objects meaningful printouts, which helps debugging and logging.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">@Override\npublic String toString() {\n    return \"Point(\" + x + \", \" + y + \")\";\n}</pre></div>",
      "id": 30
    },
    {
      "id": 31,
      "title": "31. Polymorphism & Overriding",
      "description": "Polymorphism allows objects of different classes to be treated as objects of a common superclass. This is often achieved by overriding methods.",
      "initialCode": "class Animal {\n    public void makeSound() {\n        System.out.println(\"Some generic animal sound\");\n    }\n}\n\nclass Dog extends Animal {\n    // Override the makeSound method to print \"Bark!\"\n\n}\n\nclass Cat extends Animal {\n    // Override the makeSound method to print \"Meow!\"\n\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Animal myDog = new Dog();\n        Animal myCat = new Cat();\n        \n        myDog.makeSound();\n        myCat.makeSound();\n    }\n}",
      "fullSolution": "class Animal {\n    public void makeSound() {\n        System.out.println(\"Some generic animal sound\");\n    }\n}\n\nclass Dog extends Animal {\n    // Override the makeSound method to print \"Bark!\"\n    @Override\n    public void makeSound() {\n        System.out.println(\"Bark!\");\n    }\n}\n\nclass Cat extends Animal {\n    // Override the makeSound method to print \"Meow!\"\n    @Override\n    public void makeSound() {\n        System.out.println(\"Meow!\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Animal myDog = new Dog();\n        Animal myCat = new Cat();\n        \n        myDog.makeSound();\n        myCat.makeSound();\n    }\n}",
      "expectedOutput": "Bark!\nMeow!",
      "tutorial": "<p class=\"mb-4 text-gray-300\"><strong>Polymorphism</strong> means \"many forms\". In Java, it means you can perform a single action in different ways. A common way to use it is when a superclass reference variable is used to refer to a subclass object.</p><p class=\"mb-4 text-gray-300\">Method <strong>overriding</strong> is when a subclass provides a specific implementation for a method that is already defined in its superclass. The <code>@Override</code> annotation is used to indicate this; it's not required but is good practice as it helps the compiler catch errors.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">class Shape {\n    public void draw() {\n        System.out.println(\"Drawing a shape\");\n    }\n}\n\nclass Circle extends Shape {\n    @Override\n    public void draw() {\n        System.out.println(\"Drawing a circle\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Shape myShape = new Circle(); // Polymorphism!\n        myShape.draw(); // Calls the Circle's draw() method\n    }\n}</pre></div>",
      "language": "java"
    },
    {
      "id": 32,
      "title": "32. ArrayList",
      "description": "An `ArrayList` is a resizable array, part of the Java Collections Framework. It's more flexible than a standard array.",
      "initialCode": "import java.util.ArrayList;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Create an ArrayList that can hold Strings\n        ArrayList<String> fruits = new ArrayList<>();\n\n        // Add \"Apple\", \"Banana\", and \"Cherry\" to the list\n\n\n        // Print the element at index 1\n\n    }\n}",
      "fullSolution": "import java.util.ArrayList;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Create an ArrayList that can hold Strings\n        ArrayList<String> fruits = new ArrayList<>();\n\n        // Add \"Apple\", \"Banana\", and \"Cherry\" to the list\n        fruits.add(\"Apple\");\n        fruits.add(\"Banana\");\n        fruits.add(\"Cherry\");\n\n        // Print the element at index 1\n        System.out.println(fruits.get(1));\n    }\n}",
      "expectedOutput": "Banana",
      "tutorial": "<p class=\"mb-4 text-gray-300\">While arrays are useful, their size is fixed once created. The <code>ArrayList</code> class provides a way to have a dynamic, resizable list of objects.</p><p class=\"mb-4 text-gray-300\">You must import it from <code>java.util.ArrayList</code>. Here are some common methods:</p><ul class=\"list-disc list-inside mb-4 text-gray-300 space-y-1\"><li><code>add(element)</code>: Adds an element to the end of the list.</li><li><code>get(index)</code>: Returns the element at the specified index.</li><li><code>size()</code>: Returns the number of elements in the list.</li><li><code>remove(index)</code>: Removes the element at the specified index.</li><li><code>set(index, element)</code>: Replaces the element at the specified index with a new one.</li></ul><p class=\"mb-4 text-gray-300\">ArrayList is a resizable list. Use add() to append and get() to access by index.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">java.util.List<Integer> list = new java.util.ArrayList<>();\nlist.add(1); list.add(2); list.add(3);\nSystem.out.println(list);</pre></div>",
      "language": "java"
    },
    {
      "id": 33,
      "title": "33. Interfaces",
      "description": "An interface is a completely abstract type that is used to group related methods with empty bodies. A class can `implement` an interface, promising to provide the code for its methods.",
      "initialCode": "// An interface is a contract for what a class can do.\ninterface Animal {\n    public void makeSound(); // No method body\n    public void sleep();\n}\n\n// This class must provide code for the Animal methods.\nclass Pig implements Animal {\n    // Provide the implementation for makeSound()\n\n    // Provide the implementation for sleep()\n\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Pig myPig = new Pig();\n        myPig.makeSound();\n        myPig.sleep();\n    }\n}",
      "fullSolution": "// An interface is a contract for what a class can do.\ninterface Animal {\n    public void makeSound(); // No method body\n    public void sleep();\n}\n\n// This class must provide code for the Animal methods.\nclass Pig implements Animal {\n    // Provide the implementation for makeSound()\n    public void makeSound() {\n        System.out.println(\"The pig says: wee wee\");\n    }\n    // Provide the implementation for sleep()\n    public void sleep() {\n        System.out.println(\"Zzz\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Pig myPig = new Pig();\n        myPig.makeSound();\n        myPig.sleep();\n    }\n}",
      "expectedOutput": "The pig says: wee wee\nZzz",
      "tutorial": "<p class=\"mb-4 text-gray-300\">An <strong>interface</strong> is like a blueprint for a class. It can only contain abstract methods (methods without a body) and constants. A class can <code>implement</code> one or more interfaces.</p><p class=\"mb-4 text-gray-300\">This is Java's way of achieving full abstraction and is a key part of designing large, flexible applications. It defines a \"contract\" that a class must follow if it implements the interface.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">interface Drivable {\n    public void startEngine();\n}\n\nclass Car implements Drivable {\n    public void startEngine() {\n        System.out.println(\"Car engine started.\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Car myCar = new Car();\n        myCar.startEngine();\n    }\n}</pre></div>",
      "language": "java"
    },
    {
      "id": 34,
      "title": "34. Exception Handling (try-catch)",
      "description": "Robust programs must handle potential errors gracefully. Use a `try-catch` block to prevent a crash when trying to divide by zero.",
      "initialCode": "public class Main {\n    public static void main(String[] args) {\n        // Use a try-catch block to handle the potential error.\n        try {\n            int result = 10 / 0;\n            System.out.println(result);\n        } catch (Exception e) {\n            // In the catch block, print \"Error: Cannot divide by zero.\"\n\n        }\n    }\n}",
      "fullSolution": "public class Main {\n    public static void main(String[] args) {\n        // Use a try-catch block to handle the potential error.\n        try {\n            int result = 10 / 0;\n            System.out.println(result);\n        } catch (Exception e) {\n            // In the catch block, print \"Error: Cannot divide by zero.\"\n            System.out.println(\"Error: Cannot divide by zero.\");\n        }\n    }\n}",
      "expectedOutput": "Error: Cannot divide by zero.",
      "tutorial": "<p class=\"mb-4 text-gray-300\">An <strong>exception</strong> is an event that disrupts the normal flow of a program. Java's exception handling mechanism allows you to manage these errors without crashing the application.</p><p class=\"mb-4 text-gray-300\">The <code>try</code> block contains the code that might throw an exception. The <code>catch</code> block contains the code that is executed if an exception of a specific type occurs in the <code>try</code> block.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">public class Main {\n    public static void main(String[] args) {\n        int[] numbers = {1, 2, 3};\n        try {\n            // This line will cause an ArrayIndexOutOfBoundsException\n            System.out.println(numbers[10]);\n        } catch (Exception e) {\n            // This block runs instead of the program crashing\n            System.out.println(\"Something went wrong.\");\n        }\n    }\n}</pre></div>",
      "language": "java"
    },
    {
      "id": 35,
      "title": "35. HashMap",
      "description": "A `HashMap` stores items in \"key/value\" pairs. Create a HashMap to store capital cities, add a few pairs, and then retrieve a value using its key.",
      "initialCode": "import java.util.HashMap;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Create a HashMap to store String keys and String values\n        HashMap<String, String> capitalCities = new HashMap<>();\n\n        // Add some key-value pairs\n        capitalCities.put(\"England\", \"London\");\n        capitalCities.put(\"Germany\", \"Berlin\");\n        capitalCities.put(\"Japan\", \"Tokyo\");\n\n        // Retrieve and print the capital of Germany\n\n    }\n}",
      "fullSolution": "import java.util.HashMap;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Create a HashMap to store String keys and String values\n        HashMap<String, String> capitalCities = new HashMap<>();\n\n        // Add some key-value pairs\n        capitalCities.put(\"England\", \"London\");\n        capitalCities.put(\"Germany\", \"Berlin\");\n        capitalCities.put(\"Japan\", \"Tokyo\");\n\n        // Retrieve and print the capital of Germany\n        System.out.println(capitalCities.get(\"Germany\"));\n    }\n}",
      "expectedOutput": "Berlin",
      "tutorial": "<p class=\"mb-4 text-gray-300\">A <code>HashMap</code> is a powerful data structure for storing key-value pairs, similar to a dictionary. Each value is associated with a unique key. It's incredibly fast for looking up values when you know the key.</p><p class=\"mb-4 text-gray-300\">Like <code>ArrayList</code>, you must import it from <code>java.util.HashMap</code>. Common methods include:</p><ul class=\"list-disc list-inside mb-4 text-gray-300 space-y-1\"><li><code>put(key, value)</code>: Adds a key-value pair.</li><li><code>get(key)</code>: Returns the value associated with the key.</li><li><code>remove(key)</code>: Removes the key-value pair.</li><li><code>size()</code>: Returns the number of pairs.</li></ul><p class=\"mb-4 text-gray-300\">Practice the concept using a short example below.</p> <h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">System.out.println(\"Hello, Java!\");</pre></div>",
      "language": "java"
    },
    {
      "title": "36. Mini Assert Utility",
      "language": "java",
      "description": "Implement a very small assertEquals helper that throws IllegalArgumentException on mismatch, then prints PASS.",
      "initialCode": "public class Main {\n    public static void main(String[] args) {\n        assertEquals(42, 40 + 2);\n    }\n\n    // Implement assertEquals(int expected, int actual)\n}\n",
      "fullSolution": "public class Main {\n    public static void main(String[] args) {\n        assertEquals(42, 40 + 2);\n    }\n\n    static void assertEquals(int expected, int actual) {\n        if (expected != actual) {\n            throw new IllegalArgumentException(\"expected \" + expected + \" but got \" + actual);\n        }\n        System.out.println(\"PASS\");\n    }\n}\n",
      "expectedOutput": "PASS",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Testing frameworks throw when expectations fail. A tiny helper that compares values and raises on mismatch mirrors JUnit's behavior.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">static void assertTrue(boolean condition) {\n    if (!condition) throw new IllegalArgumentException(\"not true\");\n}</pre></div>",
      "id": 36
    },
    {
      "title": "37. Read Env Default",
      "language": "java",
      "description": "Return an environment variable when set, otherwise a fallback value.",
      "initialCode": "public class Main {\n    public static void main(String[] args) {\n        System.out.println(getOrDefault(\"DATABASE_URL\", \"sqlite:///app.db\"));\n    }\n\n    // Implement getOrDefault(String key, String fallback)\n}\n",
      "fullSolution": "public class Main {\n    public static void main(String[] args) {\n        System.out.println(getOrDefault(\"DATABASE_URL\", \"sqlite:///app.db\"));\n    }\n\n    static String getOrDefault(String key, String fallback) {\n        String value = System.getenv(key);\n        return value != null ? value : fallback;\n    }\n}\n",
      "expectedOutput": "sqlite:///app.db",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Environment variables are often optional during local development, so code should fall back to safe defaults.</p>",
      "id": 37,
      "tags": [
        "Configuration"
      ]
    },
    {
      "id": 38,
      "title": "38. String Methods",
      "description": "The `String` class has many useful methods. Use `length()`, `toUpperCase()`, and `substring()` to manipulate a string and print the results.",
      "initialCode": "public class Main {\n    public static void main(String[] args) {\n        String text = \"Hello Java\";\n\n        // Print the length of the string\n\n        // Print the string in all uppercase letters\n\n        // Print the substring \"Java\"\n\n    }\n}",
      "fullSolution": "public class Main {\n    public static void main(String[] args) {\n        String text = \"Hello Java\";\n\n        // Print the length of the string\n        System.out.println(\"Length: \" + text.length());\n\n        // Print the string in all uppercase letters\n        System.out.println(\"Uppercase: \" + text.toUpperCase());\n\n        // Print the substring \"Java\"\n        System.out.println(\"Substring: \" + text.substring(6));\n    }\n}",
      "expectedOutput": "Length: 10\nUppercase: HELLO JAVA\nSubstring: Java",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Strings in Java are objects, and they come with many built-in methods for common operations.</p><ul class=\"list-disc list-inside mb-4 text-gray-300 space-y-1\"><li><code>length()</code>: Returns the number of characters in the string.</li><li><code>toUpperCase()</code> / <code>toLowerCase()</code>: Returns a new string in the specified case.</li><li><code>substring(startIndex)</code>: Returns a new string from the start index to the end.</li><li><code>substring(startIndex, endIndex)</code>: Returns a new string from the start index up to (but not including) the end index.</li></ul><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">String greeting = \"Welcome!\";\nSystem.out.println(greeting.length()); // Prints 8\nSystem.out.println(greeting.substring(0, 3)); // Prints \"Wel\"</pre></div>",
      "language": "java"
    },
    {
      "id": 39,
      "title": "39. Math Class",
      "description": "The `Math` class contains methods for performing basic numeric operations. Use `Math.max()` and `Math.sqrt()` to find the larger of two numbers and the square root of another.",
      "initialCode": "public class Main {\n    public static void main(String[] args) {\n        // Find the larger of 25 and 42 using Math.max()\n        System.out.println(\"Max: \" + Math.max(25, 42));\n\n        // Find the square root of 64 using Math.sqrt()\n        System.out.println(\"Sqrt: \" + Math.sqrt(64));\n    }\n}",
      "fullSolution": "public class Main {\n    public static void main(String[] args) {\n        // Find the larger of 25 and 42 using Math.max()\n        System.out.println(\"Max: \" + Math.max(25, 42));\n\n        // Find the square root of 64 using Math.sqrt()\n        System.out.println(\"Sqrt: \" + Math.sqrt(64));\n    }\n}",
      "expectedOutput": "Max: 42\nSqrt: 8.0",
      "tutorial": "<p class=\"mb-4 text-gray-300\">The <code>Math</code> class provides a collection of static methods for mathematical calculations. You don't need to create an object of the Math class; you can call its methods directly.</p><ul class=\"list-disc list-inside mb-4 text-gray-300 space-y-1\"><li><code>Math.max(a, b)</code>: Returns the largest of two values.</li><li><code>Math.min(a, b)</code>: Returns the smallest of two values.</li><li><code>Math.sqrt(n)</code>: Returns the square root of a number.</li><li><code>Math.random()</code>: Returns a random double between 0.0 and 1.0.</li><li><code>Math.abs(n)</code>: Returns the absolute (non-negative) value.</li></ul><p class=\"mb-4 text-gray-300\">Classes bundle data and behavior. Create an instance with new and call its methods.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">class Dog {\n  void bark() { System.out.println(\"Woof!\"); }\n}\nnew Dog().bark();</pre></div>",
      "language": "java"
    },
    {
      "id": 40,
      "title": "40. StringBuilder",
      "description": "When you need to build a string by appending many parts, `StringBuilder` is more efficient than regular string concatenation. Use it to build a sentence.",
      "initialCode": "import java.lang.StringBuilder;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Create a new StringBuilder\n        StringBuilder builder = new StringBuilder();\n\n        // Append parts of a sentence\n        builder.append(\"Java \");\n        builder.append(\"is \");\n        builder.append(\"efficient!\");\n\n        // Convert the StringBuilder back to a String and print it\n\n    }\n}",
      "fullSolution": "import java.lang.StringBuilder;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Create a new StringBuilder\n        StringBuilder builder = new StringBuilder();\n\n        // Append parts of a sentence\n        builder.append(\"Java \");\n        builder.append(\"is \");\n        builder.append(\"efficient!\");\n\n        // Convert the StringBuilder back to a String and print it\n        String result = builder.toString();\n        System.out.println(result);\n    }\n}",
      "expectedOutput": "Java is efficient!",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Every time you use the <code>+</code> operator to concatenate strings, Java creates a new string object in memory. This can be inefficient if you do it many times in a loop. <code>StringBuilder</code> is a mutable object that allows you to modify a sequence of characters without creating new objects for each change.</p><p class=\"mb-4 text-gray-300\">Use <code>append()</code> to add to the string. When you are finished, call <code>toString()</code> to get the final <code>String</code> object.</p><p class=\"mb-4 text-gray-300\">String methods like toLowerCase(), toUpperCase(), and length() return transformed information; Strings are immutable.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">String s = \"Java\";\nSystem.out.println(s.toLowerCase());\nSystem.out.println(s.toUpperCase());\nSystem.out.println(s.length());</pre></div>",
      "language": "java"
    },
    {
      "id": 41,
      "title": "41. The `super` Keyword",
      "description": "The `super` keyword refers to the superclass. It can be used to call the superclass's constructor or methods. Call the `Animal` constructor from the `Dog` constructor.",
      "initialCode": "class Animal {\n    String name;\n    public Animal(String name) {\n        this.name = name;\n        System.out.println(\"Animal constructor called for: \" + name);\n    }\n}\n\nclass Dog extends Animal {\n    public Dog(String name) {\n        // Use 'super' to call the constructor of the Animal class\n        // Pass the 'name' variable to it.\n\n        System.out.println(\"Dog constructor called.\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Dog myDog = new Dog(\"Fido\");\n    }\n}",
      "fullSolution": "class Animal {\n    String name;\n    public Animal(String name) {\n        this.name = name;\n        System.out.println(\"Animal constructor called for: \" + name);\n    }\n}\n\nclass Dog extends Animal {\n    public Dog(String name) {\n        // Use 'super' to call the constructor of the Animal class\n        // Pass the 'name' variable to it.\n        super(name);\n        System.out.println(\"Dog constructor called.\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Dog myDog = new Dog(\"Fido\");\n    }\n}",
      "expectedOutput": "Animal constructor called for: Fido\nDog constructor called.",
      "tutorial": "<p class=\"mb-4 text-gray-300\">The <code>super</code> keyword is used inside a subclass to refer to its immediate parent (superclass). There are two main uses:</p><ol class=\"list-decimal list-inside mb-4 text-gray-300 space-y-2\"><li><code>super(arguments)</code>: To call a constructor of the superclass. If used, it <strong>must</strong> be the very first statement in the subclass constructor.</li><li><code>super.methodName()</code>: To call a method of the superclass, which is useful if the subclass has overridden that method but you still need the original behavior.</li></ol><p class=\"mb-4 text-gray-300\">Practice the concept using a short example below.</p> <h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">System.out.println(\"Hello, Java!\");</pre></div>",
      "language": "java"
    },
    {
      "id": 42,
      "title": "42. Method Overloading",
      "description": "Method overloading allows you to define multiple methods with the same name in the same class, as long as they have different parameters. Create two `add` methods: one for integers and one for doubles.",
      "initialCode": "public class Main {\n\n    // Method to add two integers\n    public static int add(int a, int b) {\n        return a + b;\n    }\n\n    // Overload the add method to handle two doubles\n\n\n    public static void main(String[] args) {\n        int intSum = add(5, 10);\n        double doubleSum = add(3.5, 4.5);\n\n        System.out.println(\"Integer sum: \" + intSum);\n        System.out.println(\"Double sum: \" + doubleSum);\n    }\n}",
      "fullSolution": "public class Main {\n\n    // Method to add two integers\n    public static int add(int a, int b) {\n        return a + b;\n    }\n\n    // Overload the add method to handle two doubles\n    public static double add(double a, double b) {\n        return a + b;\n    }\n\n    public static void main(String[] args) {\n        int intSum = add(5, 10);\n        double doubleSum = add(3.5, 4.5);\n\n        System.out.println(\"Integer sum: \" + intSum);\n        System.out.println(\"Double sum: \" + doubleSum);\n    }\n}",
      "expectedOutput": "Integer sum: 15\nDouble sum: 8.0",
      "tutorial": "<p class=\"mb-4 text-gray-300\"><strong>Method Overloading</strong> increases the readability of the program. It allows you to have multiple methods with the same name as long as their parameter lists are different (either by the number of parameters, the type of parameters, or both).</p><p class=\"mb-4 text-gray-300\">Java determines which version of the method to call based on the arguments you provide.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">public void display(int a) {\n    System.out.println(\"Got an Integer: \" + a);\n}\n\npublic void display(String s) {\n    System.out.println(\"Got a String: \" + s);\n}\n\ndisplay(100); // Calls the first method\ndisplay(\"Hello\"); // Calls the second method</pre></div>",
      "language": "java"
    },
    {
      "id": 43,
      "title": "43. Abstract Classes",
      "description": "An abstract class cannot be instantiated and can contain abstract methods (without a body). Create an abstract `Shape` class and a `Circle` subclass that implements its abstract method.",
      "initialCode": "// Abstract class\nabstract class Shape {\n    // Abstract method (does not have a body)\n    public abstract void draw();\n\n    // Regular method\n    public void moveTo() {\n        System.out.println(\"Shape moved.\");\n    }\n}\n\n// Subclass (inherits from Shape)\nclass Circle extends Shape {\n    // Provide an implementation for the abstract draw() method\n\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Circle myCircle = new Circle();\n        myCircle.draw();\n        myCircle.moveTo();\n    }\n}",
      "fullSolution": "// Abstract class\nabstract class Shape {\n    // Abstract method (does not have a body)\n    public abstract void draw();\n\n    // Regular method\n    public void moveTo() {\n        System.out.println(\"Shape moved.\");\n    }\n}\n\n// Subclass (inherits from Shape)\nclass Circle extends Shape {\n    // Provide an implementation for the abstract draw() method\n    public void draw() {\n        System.out.println(\"Drawing a circle.\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Circle myCircle = new Circle();\n        myCircle.draw();\n        myCircle.moveTo();\n    }\n}",
      "expectedOutput": "Drawing a circle.\nShape moved.",
      "tutorial": "<p class=\"mb-4 text-gray-300\">An <strong>abstract class</strong> is a restricted class that cannot be used to create objects. It serves as a base for subclasses. It can have both abstract and non-abstract (regular) methods.</p><p class=\"mb-4 text-gray-300\">An <strong>abstract method</strong> is a method that is declared without an implementation. Any subclass of an abstract class must either implement all of the superclass's abstract methods or be declared abstract itself.</p><p class=\"mb-4 text-gray-300\">This provides a middle ground between a regular class and an interface.</p><p class=\"mb-4 text-gray-300\">Classes bundle data and behavior. Create an instance with new and call its methods.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">class Dog {\n  void bark() { System.out.println(\"Woof!\"); }\n}\nnew Dog().bark();</pre></div>",
      "language": "java"
    },
    {
      "id": 44,
      "title": "44. Type Casting",
      "description": "Type casting is when you assign a value of one primitive data type to another type. Perform both widening (automatic) and narrowing (manual) casting.",
      "initialCode": "public class Main {\n    public static void main(String[] args) {\n        // Widening Casting (int to double)\n        int myInt = 9;\n        double myDouble = myInt; // Automatic casting\n        System.out.println(myDouble);\n\n        // Narrowing Casting (double to int)\n        double anotherDouble = 9.78;\n        // Manually cast the double to an int and store it in anotherInt\n        int anotherInt = (int) anotherDouble;\n\n        System.out.println(anotherInt);\n    }\n}",
      "fullSolution": "public class Main {\n    public static void main(String[] args) {\n        // Widening Casting (int to double)\n        int myInt = 9;\n        double myDouble = myInt; // Automatic casting\n        System.out.println(myDouble);\n\n        // Narrowing Casting (double to int)\n        double anotherDouble = 9.78;\n        // Manually cast the double to an int and store it in anotherInt\n        int anotherInt = (int) anotherDouble;\n\n        System.out.println(anotherInt);\n    }\n}",
      "expectedOutput": "9.0\n9",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Type casting is used to convert variables from one data type to another.</p><ul class=\"list-disc list-inside mb-4 text-gray-300 space-y-2\"><li><strong>Widening Casting</strong>: Happens automatically when passing a smaller size type to a larger size type (e.g., <code>int</code> to <code>double</code>). This is safe as there is no data loss.</li><li><strong>Narrowing Casting</strong>: Must be done manually by placing the type in parentheses in front of the value (e.g., <code>(int)</code>). This can lead to data loss, as you are fitting a larger type into a smaller one. For example, casting a <code>double</code> to an <code>int</code> will truncate the decimal part.</li></ul><p class=\"mb-4 text-gray-300\">Practice the concept using a short example below.</p> <h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">System.out.println(\"Hello, Java!\");</pre></div>",
      "language": "java"
    },
    {
      "id": 45,
      "title": "45. Ternary Operator",
      "description": "The ternary operator is a shorthand for an if-else statement. Use it to assign a value to the `result` string based on a condition.",
      "initialCode": "public class Main {\n    public static void main(String[] args) {\n        int time = 20;\n        String result;\n\n        // Use the ternary operator to set 'result'.\n        // If time < 18, it should be \"Good day.\"\n        // Otherwise, it should be \"Good evening.\"\n        result = (time < 18) ? \"Good day.\" : \"Good evening.\";\n\n        System.out.println(result);\n    }\n}",
      "fullSolution": "public class Main {\n    public static void main(String[] args) {\n        int time = 20;\n        String result;\n\n        // Use the ternary operator to set 'result'.\n        // If time < 18, it should be \"Good day.\"\n        // Otherwise, it should be \"Good evening.\"\n        result = (time < 18) ? \"Good day.\" : \"Good evening.\";\n\n        System.out.println(result);\n    }\n}",
      "expectedOutput": "Good evening.",
      "tutorial": "<p class=\"mb-4 text-gray-300\">The ternary operator provides a concise way to write simple conditional assignments. Its syntax is:</p><p class=\"mb-4 text-gray-300\"><code>variable = (condition) ? valueIfTrue : valueIfFalse;</code></p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">// Using if-else\nint x = 10;\nString message;\nif (x > 5) {\n    message = \"x is greater than 5\";\n} else {\n    message = \"x is not greater than 5\";\n}\n\n// Using ternary operator (equivalent)\nString message2 = (x > 5) ? \"x is greater than 5\" : \"x is not greater than 5\";</pre></div>",
      "language": "java"
    },
    {
      "id": 46,
      "title": "46. Do-While Loop",
      "description": "A `do-while` loop is a variant of the while loop which executes the code block once before checking the condition. Use it to print a countdown that includes 0.",
      "initialCode": "public class Main {\n    public static void main(String[] args) {\n        int i = 3;\n\n        // Create a do-while loop that prints 'i' and decrements it.\n        // The loop should continue as long as i is greater than or equal to 0.\n\n    }\n}",
      "fullSolution": "public class Main {\n    public static void main(String[] args) {\n        int i = 3;\n\n        // Create a do-while loop that prints 'i' and decrements it.\n        // The loop should continue as long as i is greater than or equal to 0.\n        do {\n            System.out.println(i);\n            i--;\n        } while (i >= 0);\n    }\n}",
      "expectedOutput": "3\n2\n1\n0",
      "tutorial": "<p class=\"mb-4 text-gray-300\">The <code>do-while</code> loop is similar to a <code>while</code> loop, but with one key difference: the condition is checked <em>after</em> the loop body is executed. This guarantees that the loop will run at least once, regardless of whether the condition is true or false.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">int count = 5;\n\ndo {\n    System.out.println(\"This will print at least once.\");\n} while (count < 3); // Condition is false, but loop ran once.</pre></div>",
      "language": "java"
    },
    {
      "title": "47. Primitive vs Reference & Autoboxing",
      "language": "java",
      "description": "Autobox an int into a list, then compare two Integer objects created with valueOf to show equals vs ==.",
      "initialCode": "import java.util.ArrayList;\n\npublic class Main {\n    public static void main(String[] args) {\n        ArrayList<Integer> numbers = new ArrayList<>();\n        int primitive = 256;\n\n        // Autobox primitive into the list\n        // Create two Integer objects using Integer.valueOf(256)\n        // Print the first element of the list\n        // Print boxed.equals(other)\n        // Print boxed == other\n    }\n}\n",
      "fullSolution": "import java.util.ArrayList;\n\npublic class Main {\n    public static void main(String[] args) {\n        ArrayList<Integer> numbers = new ArrayList<>();\n        int primitive = 256;\n\n        numbers.add(primitive); // autobox\n        Integer boxed = Integer.valueOf(256);\n        Integer other = Integer.valueOf(256);\n\n        System.out.println(numbers.get(0));\n        System.out.println(boxed.equals(other));\n        System.out.println(boxed == other);\n    }\n}\n",
      "expectedOutput": "256\ntrue\nfalse",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Collections hold objects, so primitives auto-convert to their wrapper classes (autoboxing). Two wrapper objects can be equal in value yet occupy different references, so <code>.equals()</code> is the safe comparison.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">Integer a = Integer.valueOf(256);\nInteger b = Integer.valueOf(256);\nSystem.out.println(a.equals(b)); // true\nSystem.out.println(a == b);      // false</pre></div>",
      "id": 47
    },
    {
      "id": 48,
      "title": "48. Wrapper Classes",
      "description": "Wrapper classes provide a way to use primitive data types (like `int`) as objects. Create an `Integer` object and use one of its methods.",
      "initialCode": "import java.util.ArrayList;\n\npublic class Main {\n    public static void main(String[] args) {\n        // ArrayLists cannot store primitives, they need objects.\n        ArrayList<Integer> myNumbers = new ArrayList<>();\n\n        // Create an Integer wrapper object\n        Integer myInt = 500;\n\n        // Add it to the list\n        myNumbers.add(myInt);\n\n        // Use a method from the Integer wrapper class, like toString(), and print it.\n\n    }\n}",
      "fullSolution": "import java.util.ArrayList;\n\npublic class Main {\n    public static void main(String[] args) {\n        // ArrayLists cannot store primitives, they need objects.\n        ArrayList<Integer> myNumbers = new ArrayList<>();\n\n        // Create an Integer wrapper object\n        Integer myInt = 500;\n\n        // Add it to the list\n        myNumbers.add(myInt);\n\n        // Use a method from the Integer wrapper class, like toString(), and print it.\n        String intAsString = myInt.toString();\n        System.out.println(\"String length: \" + intAsString.length());\n    }\n}",
      "expectedOutput": "String length: 3",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Java has two categories of data types: primitive types and reference types (objects). Sometimes you need to treat a primitive like an object, for example, when using it with collections like <code>ArrayList</code>. Wrapper classes solve this problem.</p><p class=\"mb-4 text-gray-300\">Each primitive has a corresponding wrapper class:</p><ul class=\"list-disc list-inside mb-4 text-gray-300 space-y-1\"><li><code>int</code> -> <code>Integer</code></li><li><code>double</code> -> <code>Double</code></li><li><code>char</code> -> <code>Character</code></li><li><code>boolean</code> -> <code>Boolean</code></li></ul><p class=\"mb-4 text-gray-300\">The process of converting a primitive to a wrapper object is called <strong>autoboxing</strong>, and the reverse is called <strong>unboxing</strong>. Java often does this automatically for you.</p><p class=\"mb-4 text-gray-300\">Classes bundle data and behavior. Create an instance with new and call its methods.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">class Dog {\n  void bark() { System.out.println(\"Woof!\"); }\n}\nnew Dog().bark();</pre></div>",
      "language": "java"
    },
    {
      "id": 49,
      "title": "49. Recursion",
      "description": "Recursion is the technique of making a function call itself. Create a recursive function to calculate the sum of all numbers up to n.",
      "initialCode": "public class Main {\n    public static void main(String[] args) {\n        int result = sum(5);\n        System.out.println(result);\n    }\n\n    // Create the recursive sum method\n    public static int sum(int k) {\n        // The base case: if k is 0, stop and return 0.\n\n        // The recursive step: return k + the sum of all numbers below k.\n\n    }\n}",
      "fullSolution": "public class Main {\n    public static void main(String[] args) {\n        int result = sum(5);\n        System.out.println(result);\n    }\n\n    // Create the recursive sum method\n    public static int sum(int k) {\n        // The base case: if k is 0, stop and return 0.\n        if (k > 0) {\n            // The recursive step: return k + the sum of all numbers below k.\n            return k + sum(k - 1);\n        } else {\n            return 0;\n        }\n    }\n}",
      "expectedOutput": "15",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Recursion is a powerful but tricky concept where a method calls itself to solve a problem. It breaks a complex problem into smaller, identical subproblems.</p><p class=\"mb-4 text-gray-300\">Every recursive function must have two parts:</p><ol class=\"list-decimal list-inside mb-4 text-gray-300 space-y-2\"><li>A <strong>base case</strong>: A condition that stops the recursion. Without it, you'll get an infinite loop and a <code>StackOverflowError</code>.</li><li>A <strong>recursive step</strong>: The part of the function that calls itself, usually with a modified argument that brings it closer to the base case.</li></ol><p class=\"mb-4 text-gray-300\">For this problem, summing numbers up to 5 (5+4+3+2+1) can be thought of as <code>5 + sum(4)</code>, and <code>sum(4)</code> is <code>4 + sum(3)</code>, and so on, until you reach the base case of <code>sum(0)</code>.</p><p class=\"mb-4 text-gray-300\">Practice the concept using a short example below.</p> <h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">System.out.println(\"Hello, Java!\");</pre></div>",
      "language": "java"
    },
    {
      "id": 50,
      "title": "50. 2D Arrays",
      "description": "A 2D array is like a grid or a table, an array of arrays. Create a 2D array and access an element from a specific row and column.",
      "initialCode": "public class Main {\n    public static void main(String[] args) {\n        // Create a 2D integer array (a 2x3 matrix)\n        int[][] myNumbers = { {1, 2, 3}, {4, 5, 6} };\n\n        // Access the element in the second row (index 1)\n        // and the third column (index 2).\n        // Print the result.\n\n    }\n}",
      "fullSolution": "public class Main {\n    public static void main(String[] args) {\n        // Create a 2D integer array (a 2x3 matrix)\n        int[][] myNumbers = { {1, 2, 3}, {4, 5, 6} };\n\n        // Access the element in the second row (index 1)\n        // and the third column (index 2).\n        // Print the result.\n        int value = myNumbers[1][2];\n        System.out.println(value);\n    }\n}",
      "expectedOutput": "6",
      "tutorial": "<p class=\"mb-4 text-gray-300\">A 2D array is an array where each element is itself another array. It's useful for representing data in a grid-like structure, such as a tic-tac-toe board or a spreadsheet.</p><p class=\"mb-4 text-gray-300\">You declare it with two sets of square brackets (e.g., <code>int[][]</code>). To access an element, you provide two indices: the first for the row and the second for the column.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">String[][] board = {\n    {\"X\", \"O\", \"X\"},\n    {\"O\", \"X\", \"O\"},\n    {\"X\", \"O\", \"X\"}\n};\n\n// Access the middle element (row 1, column 1)\nSystem.out.println(board[1][1]); // Prints \"X\"</pre></div>",
      "language": "java"
    },
    {
      "id": 51,
      "title": "51. Looping Through 2D Arrays",
      "description": "To iterate over all elements in a 2D array, you need nested loops: one for the rows and one for the columns.",
      "initialCode": "public class Main {\n    public static void main(String[] args) {\n        int[][] myNumbers = { {1, 2, 3}, {4, 5, 6} };\n\n        // Use nested for loops to print all elements.\n        // The outer loop iterates through the rows (myNumbers.length).\n        // The inner loop iterates through the columns of the current row (myNumbers[i].length).\n\n    }\n}",
      "fullSolution": "public class Main {\n    public static void main(String[] args) {\n        int[][] myNumbers = { {1, 2, 3}, {4, 5, 6} };\n\n        // Use nested for loops to print all elements.\n        // The outer loop iterates through the rows (myNumbers.length).\n        // The inner loop iterates through the columns of the current row (myNumbers[i].length).\n        for (int i = 0; i < myNumbers.length; i++) {\n            for (int j = 0; j < myNumbers[i].length; j++) {\n                System.out.println(myNumbers[i][j]);\n            }\n        }\n    }\n}",
      "expectedOutput": "1\n2\n3\n4\n5\n6",
      "tutorial": "<p class=\"mb-4 text-gray-300\">To process every element in a 2D array, a common pattern is to use a \"nested loop\" \u00e2\u20ac\u201d a loop inside another loop.</p><p class=\"mb-4 text-gray-300\">The outer loop iterates through each of the main arrays (the rows). The inner loop then iterates through all the elements within that specific row-array (the columns).</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example with for-each loops:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">String[][] data = {{\"A\", \"B\"}, {\"C\", \"D\"}};\n\nfor (String[] row : data) {\n    for (String element : row) {\n        System.out.print(element + \" \"); // Prints \"A B C D \"\n    }\n}</pre></div>",
      "language": "java"
    },
    {
      "id": 52,
      "title": "52. The `final` Keyword",
      "description": "The `final` keyword is used to make a variable a constant, meaning its value cannot be changed. Try to change a final variable to see the error, then fix it by removing the attempt to change it.",
      "initialCode": "public class Main {\n    public static void main(String[] args) {\n        // A final variable's value cannot be changed.\n        final int MY_NUMBER = 15;\n\n        // This line will cause a compilation error. \n        // To pass the lesson, remove or comment out this line.\n        MY_NUMBER = 20;\n\n        System.out.println(MY_NUMBER);\n    }\n}",
      "fullSolution": "public class Main {\n    public static void main(String[] args) {\n        // A final variable's value cannot be changed.\n        final int MY_NUMBER = 15;\n\n        // This line will cause a compilation error. \n        // To pass the lesson, remove or comment out this line.\n        // MY_NUMBER = 20;\n\n        System.out.println(MY_NUMBER);\n    }\n}",
      "expectedOutput": "15",
      "tutorial": "<p class=\"mb-4 text-gray-300\">The <code>final</code> keyword is a non-access modifier used for classes, methods, and variables. It has different meanings depending on the context:</p><ul class=\"list-disc list-inside mb-4 text-gray-300 space-y-2\"><li><strong>final variable</strong>: Creates a constant. Its value cannot be changed after it has been assigned. By convention, constant names are written in all uppercase letters.</li><li><strong>final method</strong>: Cannot be overridden by a subclass.</li><li><strong>final class</strong>: Cannot be extended (inherited from) by another class.</li></ul><p class=\"mb-4 text-gray-300\">This lesson focuses on final variables. Attempting to reassign a final variable will result in a compile-time error.</p><p class=\"mb-4 text-gray-300\">Practice the concept using a short example below.</p> <h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">System.out.println(\"Hello, Java!\");</pre></div>",
      "language": "java"
    },
    {
      "id": 53,
      "title": "53. Enums",
      "description": "An enum is a special \"class\" that represents a group of constants. Define an enum for difficulty levels and use it in a switch statement.",
      "initialCode": "// Define an enum for game difficulty levels\nenum Level {\n    EASY,\n    MEDIUM,\n    HARD\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Level myLevel = Level.MEDIUM;\n\n        // Use a switch statement to print a message based on the level\n\n    }\n}",
      "fullSolution": "// Define an enum for game difficulty levels\nenum Level {\n    EASY,\n    MEDIUM,\n    HARD\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Level myLevel = Level.MEDIUM;\n\n        // Use a switch statement to print a message based on the level\n        switch(myLevel) {\n            case EASY:\n                System.out.println(\"Easy level\");\n                break;\n            case MEDIUM:\n                System.out.println(\"Medium level\");\n                break;\n            case HARD:\n                System.out.println(\"Hard level\");\n                break;\n        }\n    }\n}",
      "expectedOutput": "Medium level",
      "tutorial": "<p class=\"mb-4 text-gray-300\">An <code>enum</code> (short for enumeration) is a special data type that enables for a variable to be a set of predefined constants. The variable must be equal to one of the values that have been predefined for it.</p><p class=\"mb-4 text-gray-300\">Enums are useful when you have a value that you know is one of a small, fixed set of possibilities, such as days of the week, compass directions, or states in a game. They make code more readable and prevent errors from using invalid values.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">enum Direction {\n    NORTH, SOUTH, EAST, WEST\n}\n\nDirection myDir = Direction.NORTH;\n\nif (myDir == Direction.NORTH) {\n    System.out.println(\"Heading North!\");\n}</pre></div>",
      "language": "java"
    },
    {
      "id": 54,
      "title": "54. Access Modifiers (private)",
      "description": "Access modifiers control the visibility of classes, fields, and methods. Use the `private` keyword to encapsulate data and provide public getter/setter methods.",
      "initialCode": "class Person {\n    // Make the 'name' variable private\n    public String name;\n\n    // Public getter method\n    public String getName() {\n        return name;\n    }\n\n    // Public setter method\n    public void setName(String newName) {\n        this.name = newName;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Person myPerson = new Person();\n        // This would cause an error if 'name' were private: myPerson.name = \"John\";\n        \n        // Use the setter to change the name\n\n        // Use the getter to retrieve and print the name\n\n    }\n}",
      "fullSolution": "class Person {\n    // Make the 'name' variable private\n    private String name;\n\n    // Public getter method\n    public String getName() {\n        return name;\n    }\n\n    // Public setter method\n    public void setName(String newName) {\n        this.name = newName;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Person myPerson = new Person();\n        // This would cause an error if 'name' were private: myPerson.name = \"John\";\n        \n        // Use the setter to change the name\n        myPerson.setName(\"Alice\");\n\n        // Use the getter to retrieve and print the name\n        System.out.println(myPerson.getName());\n    }\n}",
      "expectedOutput": "Alice",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Java has four access modifiers:</p><ul class=\"list-disc list-inside mb-4 text-gray-300 space-y-2\"><li><code>public</code>: The code is accessible for all classes.</li><li><code>private</code>: The code is only accessible within the declared class.</li><li><code>protected</code>: The code is accessible in the same package and subclasses.</li><li><strong>default</strong> (no keyword): The code is only accessible in the same package.</li></ul><p class=\"mb-4 text-gray-300\">The <code>private</code> modifier is central to the concept of <strong>encapsulation</strong>. It hides sensitive data from the outside world. To access or modify private data, you provide public \"getter\" and \"setter\" methods.</p><p class=\"mb-4 text-gray-300\">Practice the concept using a short example below.</p> <h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">System.out.println(\"Hello, Java!\");</pre></div>",
      "language": "java"
    },
    {
      "id": 55,
      "title": "55. The `continue` Keyword",
      "description": "The `continue` statement breaks one iteration (in the loop), if a specified condition occurs, and continues with the next iteration in the loop. Use it to print only the odd numbers.",
      "initialCode": "public class Main {\n    public static void main(String[] args) {\n        for (int i = 0; i < 10; i++) {\n            // If 'i' is an even number, skip this iteration\n            if (i % 2 == 0) {\n                \n            }\n            System.out.println(i);\n        }\n    }\n}",
      "fullSolution": "public class Main {\n    public static void main(String[] args) {\n        for (int i = 0; i < 10; i++) {\n            // If 'i' is an even number, skip this iteration\n            if (i % 2 == 0) {\n                continue;\n            }\n            System.out.println(i);\n        }\n    }\n}",
      "expectedOutput": "1\n3\n5\n7\n9",
      "tutorial": "<p class=\"mb-4 text-gray-300\">While <code>break</code> exits a loop entirely, <code>continue</code> just skips the current iteration. When the <code>continue</code> statement is executed, the program immediately jumps to the loop's next iteration, bypassing any remaining code in the current iteration.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">// Don't print the number 5\nfor (int i = 0; i < 10; i++) {\n    if (i == 5) {\n        continue; // Skip the rest of the loop body when i is 5\n    }\n    System.out.println(i);\n}</pre></div><p class=\"mt-4 text-gray-300\">In this lesson, you'll use the modulo operator (<code>%</code>) to check for even numbers and skip them with <code>continue</code>.</p>",
      "language": "java"
    },
    {
      "id": 56,
      "title": "56. Iterating through a HashMap",
      "description": "You can loop through the keys, values, or key-value pairs of a HashMap. Use a for-each loop to print all the keys in the map.",
      "initialCode": "import java.util.HashMap;\n\npublic class Main {\n    public static void main(String[] args) {\n        HashMap<String, String> capitalCities = new HashMap<>();\n        capitalCities.put(\"England\", \"London\");\n        capitalCities.put(\"Germany\", \"Berlin\");\n        capitalCities.put(\"Japan\", \"Tokyo\");\n\n        // Use keySet() and a for-each loop to print each country name.\n\n    }\n}",
      "fullSolution": "import java.util.HashMap;\n\npublic class Main {\n    public static void main(String[] args) {\n        HashMap<String, String> capitalCities = new HashMap<>();\n        capitalCities.put(\"England\", \"London\");\n        capitalCities.put(\"Germany\", \"Berlin\");\n        capitalCities.put(\"Japan\", \"Tokyo\");\n\n        // Use keySet() and a for-each loop to print each country name.\n        for (String country : capitalCities.keySet()) {\n            System.out.println(country);\n        }\n    }\n}",
      "expectedOutput": "England\nGermany\nJapan",
      "tutorial": "<p class=\"mb-4 text-gray-300\">There are several ways to loop through a <code>HashMap</code>:</p><ul class=\"list-disc list-inside mb-4 text-gray-300 space-y-2\"><li><code>keySet()</code>: Returns a set of all the keys. You can iterate through this set and use <code>get()</code> to retrieve each value.</li><li><code>values()</code>: Returns a collection of all the values. Use this if you don't need the keys.</li><li><code>entrySet()</code>: Returns a set of all key-value pairs (as <code>Map.Entry</code> objects). This is the most efficient method if you need both the key and the value in each iteration.</li></ul><h4 class=\"font-semibold text-gray-200 mb-2\">Example using entrySet():</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">for (Map.Entry<String, String> entry : capitalCities.entrySet()) {\n    System.out.println(\"Key: \" + entry.getKey() + \", Value: \" + entry.getValue());\n}</pre></div>",
      "language": "java"
    },
    {
      "id": 57,
      "title": "57. The `this` Keyword",
      "description": "The `this` keyword refers to the current object instance. It is commonly used to resolve ambiguity between instance variables and parameters.",
      "initialCode": "class Car {\n    String model;\n\n    // Constructor\n    public Car(String model) {\n        // Use 'this' to distinguish between the instance variable 'model'\n        // and the parameter 'model'.\n        model = model;\n    }\n\n    public void printModel() {\n        System.out.println(\"Car model: \" + this.model);\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Car myCar = new Car(\"Mustang\");\n        myCar.printModel();\n    }\n}",
      "fullSolution": "class Car {\n    String model;\n\n    // Constructor\n    public Car(String model) {\n        // Use 'this' to distinguish between the instance variable 'model'\n        // and the parameter 'model'.\n        this.model = model;\n    }\n\n    public void printModel() {\n        System.out.println(\"Car model: \" + this.model);\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Car myCar = new Car(\"Mustang\");\n        myCar.printModel();\n    }\n}",
      "expectedOutput": "Car model: Mustang",
      "tutorial": "<p class=\"mb-4 text-gray-300\">The <code>this</code> keyword is a reference to the current object \u00e2\u20ac\u201d the object whose method or constructor is being called. It can be used to:</p><ul class=\"list-disc list-inside mb-4 text-gray-300 space-y-2\"><li>Disambiguate between instance variables and parameters when they have the same name (the most common use).</li><li>Call another constructor in the same class (e.g., <code>this(arguments)</code>).</li><li>Pass the current object as an argument in a method call.</li></ul><p class=\"mb-4 text-gray-300\">When a parameter has the same name as an instance variable, the parameter \"shadows\" the instance variable. Using <code>this.variableName</code> ensures you are referring to the instance variable.</p><p class=\"mb-4 text-gray-300\">Practice the concept using a short example below.</p> <h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">System.out.println(\"Hello, Java!\");</pre></div>",
      "language": "java"
    },
    {
      "id": 58,
      "title": "58. Reading Numbers with Scanner",
      "description": "The `Scanner` class can read specific data types, not just strings. Use `nextInt()` to read an integer from the user and perform a calculation.",
      "initialCode": "import java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        System.out.println(\"Enter your age:\");\n\n        // Use nextInt() to read the user's age\n        int age = scanner.nextInt();\n\n        int ageInTenYears = age + 10;\n        System.out.println(\"In ten years, you will be \" + ageInTenYears + \".\");\n    }\n}",
      "fullSolution": "import java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        System.out.println(\"Enter your age:\");\n\n        // Use nextInt() to read the user's age\n        int age = scanner.nextInt();\n\n        int ageInTenYears = age + 10;\n        System.out.println(\"In ten years, you will be \" + ageInTenYears + \".\");\n    }\n}",
      "userInput": [
        "25"
      ],
      "expectedOutput": "Enter your age:\nIn ten years, you will be 35.",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Besides <code>nextLine()</code>, the <code>Scanner</code> class provides methods to read specific data types directly:</p><ul class=\"list-disc list-inside mb-4 text-gray-300 space-y-1\"><li><code>nextInt()</code></li><li><code>nextDouble()</code></li><li><code>nextBoolean()</code></li><li><code>next()</code> (reads the next word, not the whole line)</li></ul><p class=\"mb-4 text-gray-300\">Using these methods can be more convenient than reading a line as a string and then converting it manually. The simulation for this lesson will provide the number \"25\" as input.</p><p class=\"mb-4 text-gray-300\">Read input from the console with java.util.Scanner. Close scanners in real programs to free resources.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import java.util.Scanner;\nScanner scanner = new Scanner(System.in);\nString name = scanner.nextLine();\nSystem.out.println(\"Hello, \" + name);</pre></div>",
      "language": "java"
    },
    {
      "id": 59,
      "title": "59. String Comparison",
      "description": "When comparing strings for equality, you should use the `.equals()` method, not the `==` operator. The `==` operator checks if two references point to the same object, while `.equals()` checks if the string contents are the same.",
      "initialCode": "public class Main {\n    public static void main(String[] args) {\n        String a = \"hello\";\n        String b = new String(\"hello\");\n\n        // This will print false, because they are different objects\n        System.out.println(\"Using == : \" + (a == b));\n\n        // Use the .equals() method to correctly compare the content of the strings\n        // and print the result.\n        System.out.print(\"Using .equals() : \" + a.equals(b));\n\n    }\n}",
      "fullSolution": "public class Main {\n    public static void main(String[] args) {\n        String a = \"hello\";\n        String b = new String(\"hello\");\n\n        // This will print false, because they are different objects\n        System.out.println(\"Using == : \" + (a == b));\n\n        // Use the .equals() method to correctly compare the content of the strings\n        // and print the result.\n        System.out.print(\"Using .equals() : \" + a.equals(b));\n    }\n}",
      "expectedOutput": "Using == : false\nUsing .equals() : true",
      "tutorial": "<p class=\"mb-4 text-gray-300\">This is a very common point of confusion for new Java programmers. For primitive types (like <code>int</code>, <code>boolean</code>), the <code>==</code> operator works as expected, comparing their values.</p><p class=\"mb-4 text-gray-300\">However, for objects (like <code>String</code>), <code>==</code> checks if the two variables refer to the exact same object in memory. The <code>.equals()</code> method, on the other hand, is defined in the class to provide a meaningful comparison of the objects' actual contents.</p><p class=\"mb-4 text-gray-300\"><strong>Rule of thumb:</strong> Always use <code>.equals()</code> to compare strings for equality.</p><p class=\"mb-4 text-gray-300\">String methods like toLowerCase(), toUpperCase(), and length() return transformed information; Strings are immutable.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">String s = \"Java\";\nSystem.out.println(s.toLowerCase());\nSystem.out.println(s.toUpperCase());\nSystem.out.println(s.length());</pre></div>",
      "language": "java"
    },
    {
      "id": 60,
      "title": "60. The `finally` Block",
      "description": "The `finally` block in a try-catch statement always executes, regardless of whether an exception was thrown or not. It is used to run important cleanup code.",
      "initialCode": "public class Main {\n    public static void main(String[] args) {\n        try {\n            System.out.println(\"Inside the try block.\");\n            // int x = 5 / 0; // Uncomment to see exception path\n        } catch (Exception e) {\n            System.out.println(\"Inside the catch block.\");\n        } finally {\n            // This block will always execute. Print a message here.\n\n        }\n    }\n}",
      "fullSolution": "public class Main {\n    public static void main(String[] args) {\n        try {\n            System.out.println(\"Inside the try block.\");\n            // int x = 5 / 0; // Uncomment to see exception path\n        } catch (Exception e) {\n            System.out.println(\"Inside the catch block.\");\n        } finally {\n            // This block will always execute. Print a message here.\n            System.out.println(\"Inside the finally block. Cleanup complete.\");\n        }\n    }\n}",
      "expectedOutput": "Inside the try block.\nInside the finally block. Cleanup complete.",
      "tutorial": "<p class=\"mb-4 text-gray-300\">The <code>try-catch-finally</code> structure provides robust error handling. The flow is as follows:</p><ol class=\"list-decimal list-inside mb-4 text-gray-300 space-y-2\"><li>The <code>try</code> block is executed.</li><li>If an exception occurs, the corresponding <code>catch</code> block is executed.</li><li>The <code>finally</code> block is <strong>always</strong> executed, whether an exception happened or not. This makes it the perfect place for cleanup code, like closing files or network connections, to ensure resources are released properly.</li></ol><p class=\"mb-4 text-gray-300\">Practice the concept using a short example below.</p> <h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">System.out.println(\"Hello, Java!\");</pre></div>",
      "language": "java"
    },
    {
      "id": 61,
      "title": "61. The `instanceof` Operator",
      "description": "The `instanceof` operator checks whether an object is an instance of a specific class or an interface. Use it to determine the true type of an object.",
      "initialCode": "class Animal {}\nclass Dog extends Animal {}\nclass Cat extends Animal {}\n\npublic class Main {\n    public static void main(String[] args) {\n        Animal myPet = new Dog();\n\n        // Check if myPet is an instance of Dog\n        System.out.println(\"Is it a Dog? \" + (myPet instanceof Dog));\n\n        // Check if myPet is an instance of Cat\n\n\n        // Check if myPet is an instance of Animal (its superclass)\n\n    }\n}",
      "fullSolution": "class Animal {}\nclass Dog extends Animal {}\nclass Cat extends Animal {}\n\npublic class Main {\n    public static void main(String[] args) {\n        Animal myPet = new Dog();\n\n        // Check if myPet is an instance of Dog\n        System.out.println(\"Is it a Dog? \" + (myPet instanceof Dog));\n\n        // Check if myPet is an instance of Cat\n        System.out.println(\"Is it a Cat? \" + (myPet instanceof Cat));\n\n        // Check if myPet is an instance of Animal (its superclass)\n        System.out.println(\"Is it an Animal? \" + (myPet instanceof Animal));\n    }\n}",
      "expectedOutput": "Is it a Dog? true\nIs it a Cat? false\nIs it an Animal? true",
      "tutorial": "<p class=\"mb-4 text-gray-300\">The <code>instanceof</code> operator is a type comparison operator that returns <code>true</code> if the object on the left side is an instance of the class on the right side. It also returns <code>true</code> if the object is an instance of a subclass of the class on the right.</p><p class=\"mb-4 text-gray-300\">This is particularly useful in polymorphism when you have a variable of a superclass type that could be holding an object of any of its subclasses, and you need to perform a specific action based on its actual type.</p><p class=\"mb-4 text-gray-300\">Practice the concept using a short example below.</p> <h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">System.out.println(\"Hello, Java!\");</pre></div>",
      "language": "java"
    },
    {
      "id": 62,
      "title": "62. Course Review",
      "description": "Combine everything you have learned. Create a `Student` class, manage a list of students with an `ArrayList`, and calculate their average score.",
      "initialCode": "import java.util.ArrayList;\n\nclass Student {\n    String name; int score;\n    Student(String name, int score) {\n        this.name = name;\n        this.score = score;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        ArrayList<Student> students = new ArrayList<>();\n        students.add(new Student(\"Alice\", 90));\n        students.add(new Student(\"Bob\", 80));\n        students.add(new Student(\"Charlie\", 100));\n\n        double totalScore = 0;\n        // Loop through the students list and sum their scores\n\n\n        // Calculate and print the average score\n\n    }\n}",
      "fullSolution": "import java.util.ArrayList;\n\nclass Student {\n    String name; int score;\n    Student(String name, int score) {\n        this.name = name;\n        this.score = score;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        ArrayList<Student> students = new ArrayList<>();\n        students.add(new Student(\"Alice\", 90));\n        students.add(new Student(\"Bob\", 80));\n        students.add(new Student(\"Charlie\", 100));\n\n        double totalScore = 0;\n        // Loop through the students list and sum their scores\n        for (Student s : students) {\n            totalScore += s.score;\n        }\n\n        // Calculate and print the average score\n        double average = totalScore / students.size();\n        System.out.println(\"Average student score: \" + average);\n    }\n}",
      "expectedOutput": "Average student score: 90.0",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Congratulations on reaching the final review lesson! This challenge combines many of the core concepts you've learned:</p><ul class=\"list-disc list-inside mb-4 text-gray-300 space-y-2\"><li><strong>Classes and Objects</strong>: The <code>Student</code> class with a constructor and private fields.</li><li><strong>Encapsulation</strong>: Using a getter method (<code>getScore</code>) to access private data.</li><li><strong>ArrayList</strong>: To hold a dynamic list of <code>Student</code> objects.</li><li><strong>Loops</strong>: A for-each loop to iterate through the list.</li><li><strong>Variables and Calculations</strong>: Summing the scores and calculating the average.</li></ul><p class=\"mb-4 text-gray-300\">Solving this demonstrates a solid grasp of Java fundamentals. Well done!</p><p class=\"mb-4 text-gray-300\">Practice the concept using a short example below.</p> <h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">System.out.println(\"Hello, Java!\");</pre></div>",
      "language": "java"
    },
    {
      "title": "63. Spring-Style Controller Method",
      "language": "java",
      "description": "Create a dummy @GetMapping annotation and use it on a controller method that returns \"Hello, World!\".",
      "initialCode": "@interface GetMapping {\n    String value();\n}\n\nclass HelloController {\n    // Annotate hello() with @GetMapping(\"/hello\") and return \"Hello, World!\"\n    public String hello() {\n        return null;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(new HelloController().hello());\n    }\n}\n",
      "fullSolution": "@interface GetMapping {\n    String value();\n}\n\nclass HelloController {\n    @GetMapping(\"/hello\")\n    public String hello() {\n        return \"Hello, World!\";\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(new HelloController().hello());\n    }\n}\n",
      "expectedOutput": "Hello, World!",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Spring MVC uses annotations such as <code>@GetMapping</code> to map HTTP routes to controller methods. Defining a no-op annotation lets you practice the syntax without pulling in Spring dependencies.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">@interface PostMapping { String value(); }\nclass Api {\n    @PostMapping(\"/submit\")\n    public String submit() { return \"OK\"; }\n}</pre></div>",
      "id": 63,
      "tags": [
        "Spring"
      ]
    },
    {
      "title": "64. SpringApplication Runner Stub",
      "language": "java",
      "description": "Create a SpringApplication-like helper that prints which class is booting.",
      "initialCode": "class SpringApplication {\n    // Implement static run that prints \"Booting <ClassName>\"\n}\n\nclass DemoApplication {\n    public static void main(String[] args) {\n        SpringApplication.run(DemoApplication.class, args);\n    }\n}\n",
      "fullSolution": "class SpringApplication {\n    static void run(Class<?> cls, String[] args) {\n        System.out.println(\"Booting \" + cls.getSimpleName());\n    }\n}\n\nclass DemoApplication {\n    public static void main(String[] args) {\n        SpringApplication.run(DemoApplication.class, args);\n    }\n}\n",
      "expectedOutput": "Booting DemoApplication",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Spring Boot apps start via SpringApplication.run. A stubbed version lets you practice the pattern without pulling in dependencies.</p>",
      "id": 64,
      "tags": [
        "Spring"
      ]
    },
    {
      "title": "65. Spring Boot Mini Project Plan",
      "language": "java",
      "description": "List the files needed for a minimal Spring Boot REST API and print each filename with its responsibility.",
      "initialCode": "import java.util.List;\nimport java.util.Map;\n\npublic class Main {\n    public static void main(String[] args) {\n        List<Map.Entry<String, String>> files = List.of(\n            Map.entry(\"src/main/java/com/example/Application.java\", \"bootstraps Spring app\"),\n            Map.entry(\"src/main/java/com/example/web/ProductController.java\", \"REST endpoints\"),\n            Map.entry(\"src/main/resources/application.properties\", \"configuration\"),\n            Map.entry(\"build.gradle\", \"dependencies & plugins\")\n        );\n\n        // Print lines in format \"<path> -> <description>\"\n    }\n}\n",
      "fullSolution": "import java.util.List;\nimport java.util.Map;\n\npublic class Main {\n    public static void main(String[] args) {\n        List<Map.Entry<String, String>> files = List.of(\n            Map.entry(\"src/main/java/com/example/Application.java\", \"bootstraps Spring app\"),\n            Map.entry(\"src/main/java/com/example/web/ProductController.java\", \"REST endpoints\"),\n            Map.entry(\"src/main/resources/application.properties\", \"configuration\"),\n            Map.entry(\"build.gradle\", \"dependencies & plugins\")\n        );\n\n        for (Map.Entry<String, String> file : files) {\n            System.out.println(file.getKey() + \" -> \" + file.getValue());\n        }\n    }\n}\n",
      "expectedOutput": "src/main/java/com/example/Application.java -> bootstraps Spring app\nsrc/main/java/com/example/web/ProductController.java -> REST endpoints\nsrc/main/resources/application.properties -> configuration\nbuild.gradle -> dependencies & plugins",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Sketching the project tree clarifies the entry point, web layer, config, and build file you will need before writing code.</p>",
      "tags": [
        "Project",
        "Spring"
      ],
      "id": 65
    },
    {
      "title": "66. Collections Warm-Up with Generics",
      "language": "java",
      "description": "Create a typed list and set, add names (including a duplicate), then print their sizes.",
      "initialCode": "import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Create an ArrayList<String> and add \"Ada\", \"Grace\", \"Ada\"\n        // Create a HashSet<String> from the list\n        // Print the list size then the set size\n    }\n}\n",
      "fullSolution": "import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        List<String> names = new ArrayList<>();\n        names.add(\"Ada\");\n        names.add(\"Grace\");\n        names.add(\"Ada\");\n\n        Set<String> unique = new HashSet<>(names);\n\n        System.out.println(names.size());\n        System.out.println(unique.size());\n    }\n}\n",
      "expectedOutput": "3\n2",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Generics keep collections type-safe: <code>List&lt;String&gt;</code> guarantees every element is a <code>String</code>. Converting to a <code>Set</code> is a quick way to deduplicate.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">List<Integer> numbers = new ArrayList<>();\nnumbers.add(1);\nnumbers.add(1);\nSet<Integer> unique = new HashSet<>(numbers);\nSystem.out.println(unique.size()); // 1</pre></div>",
      "id": 66
    },
    {
      "id": 67,
      "title": "67. Streams: map",
      "description": "Use a stream with a lambda to double each number and print each on a new line.",
      "initialCode": "import java.util.*;\nimport java.util.stream.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        List<Integer> nums = Arrays.asList(1,2,3);\n        // Double each then print each value on its own line\n\n    }\n}",
      "fullSolution": "import java.util.*;\nimport java.util.stream.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        List<Integer> nums = Arrays.asList(1,2,3);\n        nums.stream().map(n -> n * 2).forEach(System.out::println);\n    }\n}",
      "expectedOutput": "2\n4\n6",
      "tutorial": "<p class=\"mb-4 text-gray-300\">The `map` operation transforms each element of a stream. It applies a function to each element and returns a new stream of the results.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import java.util.List;\nList<String> names = List.of(\"alice\", \"bob\");\nnames.stream()\n     .map(String::toUpperCase)\n     .forEach(System.out::println); // ALICE, BOB printed on new lines</pre></div>",
      "language": "java"
    },
    {
      "id": 68,
      "title": "68. Streams: filter",
      "description": "Filter even numbers from 0..6 and print them.",
      "initialCode": "import java.util.stream.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Filter evens from 0..6 and print them on new lines\n\n    }\n}",
      "fullSolution": "import java.util.stream.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        IntStream.rangeClosed(0,6).filter(n -> n % 2 == 0).forEach(System.out::println);\n    }\n}",
      "expectedOutput": "0\n2\n4\n6",
      "tutorial": "<p class=\"mb-4 text-gray-300\">The `filter` operation selects elements from a stream that match a given condition (a `Predicate`).</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import java.util.List;\nList<Integer> nums = List.of(1, 2, 3, 4);\nnums.stream()\n    .filter(n -> n % 2 == 0)\n    .forEach(System.out::println); // 2, 4 printed on new lines</pre></div>",
      "language": "java"
    },
    {
      "id": 69,
      "title": "69. Sort by Length",
      "description": "Sort strings by length ascending and print them.",
      "initialCode": "import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        List<String> words = Arrays.asList(\"pear\", \"fig\", \"apple\");\n        // Sort by length and print each on a new line\n\n    }\n}",
      "fullSolution": "import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        List<String> words = Arrays.asList(\"pear\", \"fig\", \"apple\");\n        words.stream().sorted(Comparator.comparingInt(String::length)).forEach(System.out::println);\n    }\n}",
      "expectedOutput": "fig\npear\napple",
      "tutorial": "<p class=\"mb-4 text-gray-300\">You can sort collections using a `Comparator`. `Comparator.comparingInt` is a helper for sorting by an integer property, like string length.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import java.util.List;\nimport java.util.Comparator;\nList<String> words = List.of(\"fig\", \"apple\", \"pear\");\nwords.stream()\n     .sorted(Comparator.comparingInt(String::length))\n     .forEach(System.out::println); // fig, pear, apple on new lines</pre></div>",
      "language": "java"
    },
    {
      "id": 70,
      "title": "70. Comparator on Objects",
      "description": "Sort objects by a field using Comparator.comparing.",
      "initialCode": "import java.util.*;\n\nclass Person {\n    String name; int age;\n    Person(String n, int a){ name=n; age=a; }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        List<Person> people = Arrays.asList(new Person(\"Bob\",30), new Person(\"Alice\",25), new Person(\"Eve\",35));\n        // Sort by age ascending and print names\n\n    }\n}",
      "fullSolution": "import java.util.*;\n\nclass Person {\n    String name; int age;\n    Person(String n, int a){ name=n; age=a; }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        List<Person> people = Arrays.asList(new Person(\"Bob\",30), new Person(\"Alice\",25), new Person(\"Eve\",35));\n        people.stream().sorted(Comparator.comparingInt(p -> p.age)).forEach(p -> System.out.println(p.name));\n    }\n}",
      "expectedOutput": "Alice\nBob\nEve",
      "tutorial": "<p class=\"mb-4 text-gray-300\">`Comparator.comparing` extracts a sort key from an object. You provide a lambda that takes an object and returns the property to sort by.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import java.util.*;\nclass Person { String name; Person(String n) { name=n; } }\nList<Person> people = List.of(new Person(\"Bob\"), new Person(\"Alice\"));\npeople.stream().sorted(Comparator.comparing(p -> p.name))\n      .forEach(p -> System.out.println(p.name)); // Alice, Bob</pre></div>",
      "language": "java"
    },
    {
      "id": 71,
      "title": "71. Optional.map",
      "description": "Uppercase a value inside Optional and print it if present.",
      "initialCode": "import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        Optional<String> opt = Optional.of(\"java\");\n        // Map to uppercase and print if present\n\n    }\n}",
      "fullSolution": "import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        Optional<String> opt = Optional.of(\"java\");\n        opt.map(String::toUpperCase).ifPresent(System.out::println);\n    }\n}",
      "expectedOutput": "JAVA",
      "tutorial": "<p class=\"mb-4 text-gray-300\">`Optional.map` applies a function to the value inside an Optional, if it is present, and returns a new Optional with the result.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import java.util.Optional;\nOptional<String> opt = Optional.of(\"text\");\nopt.map(String::toUpperCase).ifPresent(System.out::println); // TEXT</pre></div>",
      "language": "java"
    },
    {
      "id": 72,
      "title": "72. Generic Box<T>",
      "description": "Create a generic Box class and print its value.",
      "initialCode": "public class Main {\n    static class Box<T> {\n        T value;\n        Box(T v){ value=v; }\n        T get(){ return value; }\n    }\n    public static void main(String[] args) {\n        // Create Box<Integer> with 7 and print its value\n\n    }\n}",
      "fullSolution": "public class Main {\n    static class Box<T> {\n        T value;\n        Box(T v){ value=v; }\n        T get(){ return value; }\n    }\n    public static void main(String[] args) {\n        Box<Integer> b = new Box<>(7);\n        System.out.println(b.get());\n    }\n}",
      "expectedOutput": "7",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Generics allow you to define classes and methods that are parameterized over types. A `Box<T>` can hold any type `T`.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">class Box<T> { private T t; public void set(T t) { this.t=t; } public T get() { return t; } }\nBox<Integer> intBox = new Box<>();\nintBox.set(10);\nSystem.out.println(intBox.get()); // 10</pre></div>",
      "language": "java"
    },
    {
      "id": 73,
      "title": "73. Bounded Wildcards",
      "description": "Sum a list of Numbers using an upper-bounded wildcard.",
      "initialCode": "import java.util.*;\n\npublic class Main {\n    static double sumList(List<? extends Number> list){\n        double s = 0;\n        // Sum numbers here\n        return s;\n    }\n    public static void main(String[] args) {\n        System.out.println(sumList(Arrays.asList(1,2,3)));\n    }\n}",
      "fullSolution": "import java.util.*;\n\npublic class Main {\n    static double sumList(List<? extends Number> list){\n        double s = 0;\n        for (Number n : list) s += n.doubleValue();\n        return s;\n    }\n    public static void main(String[] args) {\n        System.out.println(sumList(Arrays.asList(1,2,3)));\n    }\n}",
      "expectedOutput": "6.0",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Upper-bounded wildcards (`? extends Type`) are used to increase flexibility. A `List<? extends Number>` can hold a list of Integers or a list of Doubles.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import java.util.List;\npublic static double sum(List<? extends Number> list) {\n    return list.stream().mapToDouble(Number::doubleValue).sum();\n}\nSystem.out.println(sum(List.of(1, 2.5))); // 3.5</pre></div>",
      "language": "java"
    },
    {
      "id": 74,
      "title": "74. Method References",
      "description": "Use method references to map and print.",
      "initialCode": "import java.util.*;\nimport java.util.stream.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        List<String> s = Arrays.asList(\"a\", \"b\", \"c\");\n        // Map to uppercase and print using method references\n\n    }\n}",
      "fullSolution": "import java.util.*;\nimport java.util.stream.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        List<String> s = Arrays.asList(\"a\", \"b\", \"c\");\n        s.stream().map(String::toUpperCase).forEach(System.out::println);\n    }\n}",
      "expectedOutput": "A\nB\nC",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Method references are a shorthand syntax for a lambda expression that executes just ONE method. They make code more readable.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import java.util.List;\nList<String> list = List.of(\"a\", \"b\");\nlist.stream().map(String::toUpperCase).forEach(System.out::println); // A, B</pre></div>",
      "language": "java"
    },
    {
      "id": 75,
      "title": "75. Reverse Sort",
      "description": "Sort numbers in descending order and print them.",
      "initialCode": "import java.util.*;\nimport java.util.stream.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        List<Integer> nums = Arrays.asList(3,1,2);\n        // Sort descending and print\n\n    }\n}",
      "fullSolution": "import java.util.*;\nimport java.util.stream.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        List<Integer> nums = Arrays.asList(3,1,2);\n        nums.stream().sorted(Comparator.reverseOrder()).forEach(System.out::println);\n    }\n}",
      "expectedOutput": "3\n2\n1",
      "tutorial": "<p class=\"mb-4 text-gray-300\">`Comparator.reverseOrder()` returns a comparator that imposes the reverse of the natural ordering.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import java.util.*;\nList<Integer> nums = List.of(1, 3, 2);\nnums.stream().sorted(Comparator.reverseOrder()).forEach(System.out::println); // 3, 2, 1</pre></div>",
      "language": "java"
    },
    {
      "id": 76,
      "title": "76. Enum + switch",
      "description": "Switch on an enum and print a label.",
      "initialCode": "enum Day { MON, SAT }\n\npublic class Main {\n    public static void main(String[] args) {\n        Day d = Day.MON;\n        // Switch and print Workday for MON, Weekend for SAT\n\n    }\n}",
      "fullSolution": "enum Day { MON, SAT }\n\npublic class Main {\n    public static void main(String[] args) {\n        Day d = Day.MON;\n        switch (d) {\n            case MON -> System.out.println(\"Workday\");\n            case SAT -> System.out.println(\"Weekend\");\n        }\n    }\n}",
      "expectedOutput": "Workday",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Enums work very well with `switch` statements, providing compile-time checking that all cases are handled.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">enum Level { EASY, HARD }\nLevel level = Level.EASY;\nswitch (level) {\n    case EASY -> System.out.println(\"Easy mode\");\n    case HARD -> System.out.println(\"Hard mode\");\n}</pre></div>",
      "language": "java"
    },
    {
      "id": 77,
      "title": "77. Record Basics",
      "description": "Use a record to model a point and print x+y.",
      "initialCode": "record Point(int x, int y) {}\n\npublic class Main {\n    public static void main(String[] args) {\n        // Print the sum of Point(2,3) coordinates\n\n    }\n}",
      "fullSolution": "record Point(int x, int y) {}\n\npublic class Main {\n    public static void main(String[] args) {\n        Point p = new Point(2,3);\n        System.out.println(p.x() + p.y());\n    }\n}",
      "expectedOutput": "5",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Records (Java 16+) provide a compact syntax for declaring classes which are transparent holders for immutable data.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">record Point(int x, int y) {}\nPoint p = new Point(1, 2);\nSystem.out.println(p.x()); // 1</pre></div>",
      "language": "java"
    },
    {
      "id": 78,
      "title": "78. Streams: reduce",
      "description": "Use reduce to sum numbers.",
      "initialCode": "import java.util.*;\nimport java.util.stream.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        List<Integer> nums = Arrays.asList(1,2,3);\n        // Use reduce to compute the sum and print it\n\n    }\n}",
      "fullSolution": "import java.util.*;\nimport java.util.stream.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        List<Integer> nums = Arrays.asList(1,2,3);\n        int sum = nums.stream().reduce(0, Integer::sum);\n        System.out.println(sum);\n    }\n}",
      "expectedOutput": "6",
      "tutorial": "<p class=\"mb-4 text-gray-300\">The `reduce` operation combines all elements of a stream into a single result.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import java.util.List;\nint sum = List.of(1, 2, 3).stream().reduce(0, (a, b) -> a + b);\nSystem.out.println(sum); // 6</pre></div>",
      "language": "java"
    },
    {
      "id": 79,
      "title": "79. Collectors.joining",
      "description": "Join strings with commas using Collectors.joining.",
      "initialCode": "import java.util.*;\nimport java.util.stream.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        List<String> w = Arrays.asList(\"a\",\"b\",\"c\");\n        // Join with commas and print\n\n    }\n}",
      "fullSolution": "import java.util.*;\nimport java.util.stream.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        List<String> w = Arrays.asList(\"a\",\"b\",\"c\");\n        String s = w.stream().collect(Collectors.joining(\",\"));\n        System.out.println(s);\n    }\n}",
      "expectedOutput": "a,b,c",
      "tutorial": "<p class=\"mb-4 text-gray-300\">`Collectors.joining` is a collector that concatenates the input elements into a String, in encounter order.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import java.util.stream.*;\nString s = Stream.of(\"a\", \"b\", \"c\").collect(Collectors.joining(\",\"));\nSystem.out.println(s); // \"a,b,c\"</pre></div>",
      "language": "java"
    },
    {
      "id": 80,
      "title": "80. LinkedHashMap Order",
      "description": "Preserve insertion order and print key:value pairs.",
      "initialCode": "import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        LinkedHashMap<String,Integer> m = new LinkedHashMap<>();\n        m.put(\"a\",1); m.put(\"b\",2); m.put(\"c\",3);\n        // Print a:1 then b:2 then c:3 (each on its own line)\n\n    }\n}",
      "fullSolution": "import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        LinkedHashMap<String,Integer> m = new LinkedHashMap<>();\n        m.put(\"a\",1); m.put(\"b\",2); m.put(\"c\",3);\n        m.forEach((k,v) -> System.out.println(k + \":\" + v));\n    }\n}",
      "expectedOutput": "a:1\nb:2\nc:3",
      "tutorial": "<p class=\"mb-4 text-gray-300\">A HashMap stores key-value pairs. Use `put` to add items and `get` to retrieve them by key.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import java.util.HashMap;\nHashMap<String, String> capitals = new HashMap<>();\ncapitals.put(\"England\", \"London\");\nSystem.out.println(capitals.get(\"England\")); // London</pre></div>",
      "language": "java"
    },
    {
      "id": 81,
      "title": "81. LinkedHashSet Basics",
      "description": "Avoid duplicates and keep insertion order.",
      "initialCode": "import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        LinkedHashSet<Integer> set = new LinkedHashSet<>();\n        set.add(1); set.add(2); set.add(1); set.add(3);\n        // Print each value on a new line\n\n    }\n}",
      "fullSolution": "import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        LinkedHashSet<Integer> set = new LinkedHashSet<>();\n        set.add(1); set.add(2); set.add(1); set.add(3);\n        for (Integer i : set) System.out.println(i);\n    }\n}",
      "expectedOutput": "1\n2\n3",
      "tutorial": "<p class=\"mb-4 text-gray-300\">A `LinkedHashSet` is an ordered version of HashSet that maintains a doubly-linked List across all elements. The elements are ordered based on their insertion order.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import java.util.LinkedHashSet;\nLinkedHashSet<Integer> set = new LinkedHashSet<>();\nset.add(3); set.add(1); set.add(3);\nSystem.out.println(set); // [3, 1]</pre></div>",
      "language": "java"
    },
    {
      "id": 82,
      "title": "82. TreeSet Sort",
      "description": "Store numbers in a sorted set and print ascending.",
      "initialCode": "import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        TreeSet<Integer> ts = new TreeSet<>(Arrays.asList(3,1,2));\n        // Print sorted elements\n\n    }\n}",
      "fullSolution": "import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        TreeSet<Integer> ts = new TreeSet<>(Arrays.asList(3,1,2));\n        for (Integer i : ts) System.out.println(i);\n    }\n}",
      "expectedOutput": "1\n2\n3",
      "tutorial": "<p class=\"mb-4 text-gray-300\">A `TreeSet` is a NavigableSet implementation based on a TreeMap. The elements are ordered using their natural ordering, or by a Comparator provided at set creation time.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import java.util.TreeSet;\nTreeSet<Integer> set = new TreeSet<>();\nset.add(3); set.add(1);\nSystem.out.println(set); // [1, 3]</pre></div>",
      "language": "java"
    },
    {
      "id": 83,
      "title": "83. Comparable",
      "description": "Implement Comparable to sort custom objects.",
      "initialCode": "import java.util.*;\n\nclass User implements Comparable<User> {\n    String name;\n    User(String n){ name=n; }\n    // Implement compareTo by name\n    public int compareTo(User o){ return 0; }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        List<User> users = Arrays.asList(new User(\"Bob\"), new User(\"Alice\"), new User(\"Carol\"));\n        Collections.sort(users);\n        for (User u : users) System.out.println(u.name);\n    }\n}",
      "fullSolution": "import java.util.*;\n\nclass User implements Comparable<User> {\n    String name;\n    User(String n){ name=n; }\n    public int compareTo(User o){ return this.name.compareTo(o.name); }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        List<User> users = Arrays.asList(new User(\"Bob\"), new User(\"Alice\"), new User(\"Carol\"));\n        Collections.sort(users);\n        for (User u : users) System.out.println(u.name);\n    }\n}",
      "expectedOutput": "Alice\nBob\nCarol",
      "tutorial": "<p class=\"mb-4 text-gray-300\">The `Comparable` interface imposes a total ordering on the objects of each class that implements it. This ordering is referred to as the class's natural ordering.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">class User implements Comparable<User> {\n    String name; User(String n){name=n;}\n    public int compareTo(User o) { return name.compareTo(o.name); }\n}\nUser u1=new User(\"Bob\"), u2=new User(\"Alice\");\nSystem.out.println(u1.compareTo(u2) > 0); // true</pre></div>",
      "language": "java"
    },
    {
      "id": 84,
      "title": "84. Default Methods",
      "description": "Use a default method in an interface.",
      "initialCode": "interface Greeter {\n    // Provide a default method greet() printing Hello\n}\n\nclass MyGreeter implements Greeter {}\n\npublic class Main {\n    public static void main(String[] args) {\n        new MyGreeter().greet();\n    }\n}",
      "fullSolution": "interface Greeter {\n    default void greet(){ System.out.println(\"Hello\"); }\n}\n\nclass MyGreeter implements Greeter {}\n\npublic class Main {\n    public static void main(String[] args) {\n        new MyGreeter().greet();\n    }\n}",
      "expectedOutput": "Hello",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Define reusable logic in methods. Static methods belong to the class and can be called without an instance.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">static int add(int a, int b) { return a + b; }\nSystem.out.println(add(3, 4)); // 7</pre></div>",
      "language": "java"
    },
    {
      "id": 85,
      "title": "85. Abstract Class",
      "description": "Extend an abstract class and implement its method.",
      "initialCode": "abstract class Animal {\n    abstract void speak();\n}\nclass Dog extends Animal {\n    // Implement speak to print Bark!\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        new Dog().speak();\n    }\n}",
      "fullSolution": "abstract class Animal {\n    abstract void speak();\n}\nclass Dog extends Animal {\n    void speak(){ System.out.println(\"Bark!\"); }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        new Dog().speak();\n    }\n}",
      "expectedOutput": "Bark!",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Abstract classes are similar to interfaces but can have fields that are not static and final, and they can contain non-abstract methods.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">abstract class Shape { abstract double area(); }\nclass Circle extends Shape { double r=2; double area() {return 3.14*r*r;} }\nSystem.out.println(new Circle().area()); // 12.56</pre></div>",
      "language": "java"
    },
    {
      "id": 86,
      "title": "86. LocalDate",
      "description": "Parse a date and add one day.",
      "initialCode": "import java.time.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        LocalDate d = LocalDate.parse(\"2023-01-02\");\n        // Print d.plusDays(1)\n\n    }\n}",
      "fullSolution": "import java.time.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        LocalDate d = LocalDate.parse(\"2023-01-02\");\n        System.out.println(d.plusDays(1));\n    }\n}",
      "expectedOutput": "2023-01-03",
      "tutorial": "<p class=\"mb-4 text-gray-300\">`LocalDate` is an immutable date-time object that represents a date, often viewed as year-month-day.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import java.time.LocalDate;\nLocalDate date = LocalDate.of(2023, 1, 31);\nSystem.out.println(date.plusDays(1)); // 2023-02-01</pre></div>",
      "language": "java"
    },
    {
      "id": 87,
      "title": "87. Regex Find",
      "description": "Use Pattern/Matcher to find digits in a string.",
      "initialCode": "import java.util.regex.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        Matcher m = Pattern.compile(\"\\\\d\").matcher(\"a1b2\");\n        // Print each digit match on its own line\n\n    }\n}",
      "fullSolution": "import java.util.regex.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        Matcher m = Pattern.compile(\"\\\\d\").matcher(\"a1b2\");\n        while (m.find()) System.out.println(m.group());\n    }\n}",
      "expectedOutput": "1\n2",
      "tutorial": "<p class=\"mb-4 text-gray-300\">The `Matcher` class finds matches for a regular expression pattern in a string. The `find()` method scans the input sequence to find the next subsequence that matches the pattern.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import java.util.regex.*;\nMatcher m = Pattern.compile(\"\\\\d+\").matcher(\"a12b34c\");\nwhile (m.find()) { System.out.println(m.group()); } // 12, 34</pre></div>",
      "language": "java"
    },
    {
      "id": 88,
      "title": "88. ArrayDeque",
      "description": "Use a deque to add/remove from both ends.",
      "initialCode": "import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        ArrayDeque<String> dq = new ArrayDeque<>();\n        dq.addLast(\"A\"); dq.addLast(\"B\"); dq.addFirst(\"0\");\n        // Remove from front until empty, printing each\n\n    }\n}",
      "fullSolution": "import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        ArrayDeque<String> dq = new ArrayDeque<>();\n        dq.addLast(\"A\"); dq.addLast(\"B\"); dq.addFirst(\"0\");\n        while (!dq.isEmpty()) System.out.println(dq.removeFirst());\n    }\n}",
      "expectedOutput": "0\nA\nB",
      "tutorial": "<p class=\"mb-4 text-gray-300\">`ArrayDeque` is a resizable-array implementation of the `Deque` interface. It has no capacity restrictions and is faster than LinkedList for stack and queue operations.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import java.util.ArrayDeque;\nArrayDeque<Integer> dq = new ArrayDeque<>();\ndq.addFirst(1); dq.addLast(2);\nSystem.out.println(dq.pollFirst()); // 1</pre></div>",
      "language": "java"
    },
    {
      "id": 89,
      "title": "89. String.format",
      "description": "Format a string with placeholders.",
      "initialCode": "public class Main {\n    public static void main(String[] args) {\n        // Print: Name: Alice, Age: 30\n\n    }\n}",
      "fullSolution": "public class Main {\n    public static void main(String[] args) {\n        System.out.println(String.format(\"Name: %s, Age: %d\", \"Alice\", 30));\n    }\n}",
      "expectedOutput": "Name: Alice, Age: 30",
      "tutorial": "<p class=\"mb-4 text-gray-300\">`String.format()` returns a formatted string using the specified format string and arguments.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">String s = String.format(\"Hello, %s! You have %d messages.\", \"Alice\", 5);\nSystem.out.println(s);</pre></div>",
      "language": "java"
    },
    {
      "title": "90. Maven Coordinate Formatter",
      "language": "java",
      "description": "Format Maven coordinates as groupId:artifactId:version and print the result.",
      "initialCode": "public class Main {\n    public static void main(String[] args) {\n        String group = \"org.springframework\";\n        String artifact = \"spring-core\";\n        String version = \"6.1.0\";\n\n        // Use String.join or concatenation to print groupId:artifactId:version\n    }\n}\n",
      "fullSolution": "public class Main {\n    public static void main(String[] args) {\n        String group = \"org.springframework\";\n        String artifact = \"spring-core\";\n        String version = \"6.1.0\";\n\n        System.out.println(String.join(\":\", group, artifact, version));\n    }\n}\n",
      "expectedOutput": "org.springframework:spring-core:6.1.0",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Maven artifacts are referenced by <code>groupId:artifactId:version</code>. Formatting these strings shows how dependencies are declared in pom.xml.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">String coordinate = String.join(\":\", \"org.projectlombok\", \"lombok\", \"1.18.30\");\nSystem.out.println(coordinate);</pre></div>",
      "id": 90
    },
    {
      "title": "91. Gradle Dependency Line",
      "language": "java",
      "description": "Print an implementation(\"group:artifact:version\") line for Gradle build scripts.",
      "initialCode": "public class Main {\n    public static void main(String[] args) {\n        String group = \"com.fasterxml.jackson.core\";\n        String artifact = \"jackson-databind\";\n        String version = \"2.16.1\";\n\n        // Print implementation(\"group:artifact:version\")\n    }\n}\n",
      "fullSolution": "public class Main {\n    public static void main(String[] args) {\n        String group = \"com.fasterxml.jackson.core\";\n        String artifact = \"jackson-databind\";\n        String version = \"2.16.1\";\n\n        String dependency = String.format(\"implementation(\\\"%s:%s:%s\\\")\", group, artifact, version);\n        System.out.println(dependency);\n    }\n}\n",
      "expectedOutput": "implementation(\"com.fasterxml.jackson.core:jackson-databind:2.16.1\")",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Gradle's Kotlin/Groovy DSL wraps dependencies in method calls such as <code>implementation(\"group:artifact:version\")</code>. Build scripts often use <code>String.format</code> or template literals to generate these entries.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">String dep = String.format(\"testImplementation(\"%s:%s:%s\")\", \"org.junit.jupiter\", \"junit-jupiter\", \"5.10.1\");\nSystem.out.println(dep);</pre></div>",
      "id": 91
    },
    {
      "title": "92. Git Branch Summary",
      "language": "java",
      "description": "Format a branch list so the current branch is marked with '*'.",
      "initialCode": "public class Main {\n    public static void main(String[] args) {\n        String[] branches = {\"main\", \"feature/login\", \"chore/deps\"};\n        String current = \"feature/login\";\n\n        // Print branches with '*' prefix on the current branch\n    }\n}\n",
      "fullSolution": "public class Main {\n    public static void main(String[] args) {\n        String[] branches = {\"main\", \"feature/login\", \"chore/deps\"};\n        String current = \"feature/login\";\n\n        for (String name : branches) {\n            String marker = name.equals(current) ? \"*\" : \" \";\n            System.out.println(marker + \" \" + name);\n        }\n    }\n}\n",
      "expectedOutput": "  main\n* feature/login\n  chore/deps",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Match Git's branch listing by marking the active branch with an asterisk.</p>",
      "id": 92,
      "tags": [
        "Git",
        "Workflow"
      ]
    },
    {
      "title": "93. Git Merge Plan",
      "language": "java",
      "description": "Print the Git commands to merge a feature branch into main and show the commits that will be added.",
      "initialCode": "public class Main {\n    public static void main(String[] args) {\n        String source = \"feature/login\";\n        String target = \"main\";\n        String[] commits = {\"login-form\", \"oauth\"};\n\n        // Print checkout, merge, then the incoming commits separated by commas\n    }\n}\n",
      "fullSolution": "public class Main {\n    public static void main(String[] args) {\n        String source = \"feature/login\";\n        String target = \"main\";\n        String[] commits = {\"login-form\", \"oauth\"};\n\n        System.out.println(\"git checkout \" + target);\n        System.out.println(\"git merge \" + source);\n        System.out.println(\"Incoming commits: \" + String.join(\", \", commits));\n    }\n}\n",
      "expectedOutput": "git checkout main\ngit merge feature/login\nIncoming commits: login-form, oauth",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Summarize merge work by listing the commands you will run and the commits that will land. Tools like <code>git log main..feature</code> provide the same input.</p>",
      "tags": [
        "Git",
        "Workflow"
      ],
      "id": 93
    },
    {
      "title": "94. Git Rebase Steps",
      "language": "java",
      "description": "Describe the commands to rebase a feature branch onto main and show the commits being replayed.",
      "initialCode": "public class Main {\n    public static void main(String[] args) {\n        String feature = \"feature/search\";\n        String base = \"main\";\n        String[] commits = {\"index-view\", \"search-ui\"};\n\n        // Print checkout, fetch, rebase, then the commits being replayed\n    }\n}\n",
      "fullSolution": "public class Main {\n    public static void main(String[] args) {\n        String feature = \"feature/search\";\n        String base = \"main\";\n        String[] commits = {\"index-view\", \"search-ui\"};\n\n        System.out.println(\"git checkout \" + feature);\n        System.out.println(\"git fetch origin \" + base);\n        System.out.println(\"git rebase origin/\" + base);\n        System.out.println(\"Replaying: \" + String.join(\", \", commits));\n    }\n}\n",
      "expectedOutput": "git checkout feature/search\ngit fetch origin main\ngit rebase origin/main\nReplaying: index-view, search-ui",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Rebasing keeps history linear. Listing the replayed commits double-checks what will be rewritten.</p>",
      "tags": [
        "Git",
        "Workflow"
      ],
      "id": 94
    },
    {
      "id": 95,
      "title": "95. Arrays.stream",
      "description": "Stream over a primitive array and sum it.",
      "initialCode": "import java.util.*;\nimport java.util.stream.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        int[] arr = {1,2,3};\n        // Print the sum\n\n    }\n}",
      "fullSolution": "import java.util.*;\nimport java.util.stream.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        int[] arr = {1,2,3};\n        System.out.println(Arrays.stream(arr).sum());\n    }\n}",
      "expectedOutput": "6",
      "tutorial": "<p class=\"mb-4 text-gray-300\">`Arrays.stream()` returns a sequential Stream with the specified array as its source.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import java.util.Arrays;\nint[] arr = {1, 2, 3};\nSystem.out.println(Arrays.stream(arr).sum()); // 6</pre></div>",
      "language": "java"
    },
    {
      "id": 96,
      "title": "96. distinct()",
      "description": "Remove duplicates with distinct and print unique values.",
      "initialCode": "import java.util.*;\nimport java.util.stream.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        List<Integer> list = Arrays.asList(1,1,2,2,3);\n        // Print unique values in encounter order\n\n    }\n}",
      "fullSolution": "import java.util.*;\nimport java.util.stream.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        List<Integer> list = Arrays.asList(1,1,2,2,3);\n        list.stream().distinct().forEach(System.out::println);\n    }\n}",
      "expectedOutput": "1\n2\n3",
      "tutorial": "<p class=\"mb-4 text-gray-300\">The `distinct()` stream operation returns a stream consisting of the distinct elements (according to `Object.equals(Object)`) of this stream.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import java.util.stream.Stream;\nStream.of(1, 2, 1, 3).distinct().forEach(System.out::println); // 1, 2, 3</pre></div>",
      "language": "java"
    },
    {
      "id": 97,
      "title": "97. groupingBy + TreeMap",
      "description": "Group words by length into a sorted map and print counts.",
      "initialCode": "import java.util.*;\nimport java.util.stream.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        List<String> words = Arrays.asList(\"one\", \"two\", \"three\");\n        // Group by length into a TreeMap and print k=v per line\n\n    }\n}",
      "fullSolution": "import java.util.*;\nimport java.util.stream.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        List<String> words = Arrays.asList(\"one\", \"two\", \"three\");\n        Map<Integer, Long> m = words.stream().collect(Collectors.groupingBy(String::length, TreeMap::new, Collectors.counting()));\n        m.forEach((k,v) -> System.out.println(k + \"=\" + v));\n    }\n}",
      "expectedOutput": "3=2\n5=1",
      "tutorial": "<p class=\"mb-4 text-gray-300\">`Collectors.groupingBy` is used for grouping objects by some property and storing results in a Map instance.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import java.util.stream.*;\nimport java.util.List;\nSystem.out.println(Stream.of(\"a\", \"bb\", \"ccc\", \"dd\").collect(Collectors.groupingBy(String::length))); // {1=[a], 2=[bb, dd], 3=[ccc]}</pre></div>",
      "language": "java"
    },
    {
      "id": 98,
      "title": "98. flatMap",
      "description": "Flatten a list of lists and print each element.",
      "initialCode": "import java.util.*;\nimport java.util.stream.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        List<List<Integer>> nested = Arrays.asList(Arrays.asList(1,2), Arrays.asList(3,4));\n        // Flatten and print each number\n\n    }\n}",
      "fullSolution": "import java.util.*;\nimport java.util.stream.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        List<List<Integer>> nested = Arrays.asList(Arrays.asList(1,2), Arrays.asList(3,4));\n        nested.stream().flatMap(List::stream).forEach(System.out::println);\n    }\n}",
      "expectedOutput": "1\n2\n3\n4",
      "tutorial": "<p class=\"mb-4 text-gray-300\">`flatMap` transforms each element of a stream into another stream and then concatenates these streams into a single, \"flattened\" stream.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import java.util.stream.*;\nimport java.util.List;\nList<List<Integer>> listOfLists = List.of(List.of(1), List.of(2, 3));\nlistOfLists.stream().flatMap(List::stream).forEach(System.out::println); // 1, 2, 3</pre></div>",
      "language": "java"
    },
    {
      "id": 99,
      "title": "99. compute() Counts",
      "description": "Use Map.compute to count character frequency preserving first-seen order.",
      "initialCode": "import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        String s = \"banana\";\n        Map<Character,Integer> m = new LinkedHashMap<>();\n        // Count chars and print b=1, a=3, n=2 (one per line)\n\n    }\n}",
      "fullSolution": "import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        String s = \"banana\";\n        Map<Character,Integer> m = new LinkedHashMap<>();\n        for (char c : s.toCharArray()) {\n            m.compute(c, (k,v) -> v==null ? 1 : v+1);\n        }\n        m.forEach((k,v) -> System.out.println(k + \"=\" + v));\n    }\n}",
      "expectedOutput": "b=1\na=3\nn=2",
      "tutorial": "<p class=\"mb-4 text-gray-300\">`Map.compute()` attempts to compute a mapping for the specified key and its current mapped value.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import java.util.HashMap;\nHashMap<String, Integer> map = new HashMap<>();\nmap.compute(\"key\", (k, v) -> (v == null) ? 1 : v + 1);\nSystem.out.println(map.get(\"key\")); // 1</pre></div>",
      "language": "java"
    },
    {
      "id": 100,
      "title": "100. partitioningBy",
      "description": "Partition numbers into even/odd and print counts.",
      "initialCode": "import java.util.*;\nimport java.util.stream.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        List<Integer> nums = Arrays.asList(1,2,3,4,5);\n        // Partition into even/odd and print even=2 then odd=3\n\n    }\n}",
      "fullSolution": "import java.util.*;\nimport java.util.stream.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        List<Integer> nums = Arrays.asList(1,2,3,4,5);\n        Map<Boolean, Long> m = nums.stream().collect(Collectors.partitioningBy(n -> n % 2 == 0, Collectors.counting()));\n        System.out.println(\"even=\" + m.get(true));\n        System.out.println(\"odd=\" + m.get(false));\n    }\n}",
      "expectedOutput": "even=2\nodd=3",
      "tutorial": "<p class=\"mb-4 text-gray-300\">`Collectors.partitioningBy` is a collector which partitions the input elements into a `Map<Boolean, List<T>>` according to a `Predicate`.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import java.util.stream.*;\nSystem.out.println(Stream.of(1,2,3,4).collect(Collectors.partitioningBy(n -> n%2==0))); // {false=[1, 3], true=[2, 4]}</pre></div>",
      "language": "java"
    },
    {
      "title": "101. Thread vs Runnable",
      "language": "java",
      "description": "Create a Runnable that prints a message, start a Thread with it, then join the thread.",
      "initialCode": "public class Main {\n    public static void main(String[] args) throws InterruptedException {\n        // Create a Runnable that prints \"Working...\"\n        // Start a Thread with the runnable\n        // Wait for it to finish using join()\n    }\n}\n",
      "fullSolution": "public class Main {\n    public static void main(String[] args) throws InterruptedException {\n        Runnable task = () -> System.out.println(\"Working...\");\n        Thread worker = new Thread(task);\n        worker.start();\n        worker.join();\n    }\n}\n",
      "expectedOutput": "Working...",
      "tutorial": "<p class=\"mb-4 text-gray-300\">In Java, <code>Runnable</code> captures the work to do, while <code>Thread</code> controls execution. Wrap your runnable in a thread (or executor) and start it.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">Runnable job = () -> System.out.println(\"Hi\");\nThread t = new Thread(job);\nt.start();\nt.join();</pre></div>",
      "id": 101
    },
    {
      "id": 102,
      "title": "102. ExecutorService",
      "description": "Submit a Callable and print the result.",
      "initialCode": "import java.util.concurrent.*;\n\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        // Submit a task returning 2+3 and print the result\n\n    }\n}",
      "fullSolution": "import java.util.concurrent.*;\n\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        ExecutorService ex = Executors.newSingleThreadExecutor();\n        Future<Integer> f = ex.submit(() -> 2 + 3);\n        System.out.println(f.get());\n        ex.shutdown();\n    }\n}",
      "expectedOutput": "5",
      "tutorial": "<p class=\"mb-4 text-gray-300\">`ExecutorService` is a framework for asynchronous task execution. It manages a pool of threads and a task queue.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import java.util.concurrent.*;\nExecutorService es = Executors.newSingleThreadExecutor();\nFuture<Integer> future = es.submit(() -> 1 + 1);\ntry { System.out.println(future.get()); } catch (Exception e) {}\nes.shutdown();</pre></div>",
      "language": "java"
    },
    {
      "id": 103,
      "title": "103. CompletableFuture",
      "description": "Compose async tasks and print the final result.",
      "initialCode": "import java.util.concurrent.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        // supplyAsync -> thenApply to add ! and print\n\n    }\n}",
      "fullSolution": "import java.util.concurrent.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        CompletableFuture<String> cf = CompletableFuture.supplyAsync(() -> \"Hi\").thenApply(s -> s + \"!\");\n        System.out.println(cf.join());\n    }\n}",
      "expectedOutput": "Hi!",
      "tutorial": "<p class=\"mb-4 text-gray-300\">`CompletableFuture` is used for asynchronous programming. It represents a future result of an asynchronous computation.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import java.util.concurrent.CompletableFuture;\nCompletableFuture.supplyAsync(() -> \"Result\").thenAccept(System.out::println); // Result</pre></div>",
      "language": "java"
    },
    {
      "id": 104,
      "title": "104. AtomicInteger",
      "description": "Safely increment a counter from two threads and print the total.",
      "initialCode": "import java.util.concurrent.atomic.*;\n\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        AtomicInteger ai = new AtomicInteger(0);\n        // Start two threads incrementing 100 times each, then print ai.get()\n\n    }\n}",
      "fullSolution": "import java.util.concurrent.atomic.*;\n\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        AtomicInteger ai = new AtomicInteger(0);\n        Thread t1 = new Thread(() -> { for (int i=0;i<100;i++) ai.incrementAndGet(); });\n        Thread t2 = new Thread(() -> { for (int i=0;i<100;i++) ai.incrementAndGet(); });\n        t1.start(); t2.start(); t1.join(); t2.join();\n        System.out.println(ai.get());\n    }\n}",
      "expectedOutput": "200",
      "tutorial": "<p class=\"mb-4 text-gray-300\">An `AtomicInteger` is an `int` value that may be updated atomically, making it useful in concurrent programming without locks.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import java.util.concurrent.atomic.AtomicInteger;\nAtomicInteger ai = new AtomicInteger(5);\nSystem.out.println(ai.incrementAndGet()); // 6</pre></div>",
      "language": "java"
    },
    {
      "id": 105,
      "title": "105. Optional.orElse",
      "description": "Provide a default value when Optional is empty.",
      "initialCode": "import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        Optional<String> o = Optional.empty();\n        // Print default if empty\n\n    }\n}",
      "fullSolution": "import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        Optional<String> o = Optional.empty();\n        System.out.println(o.orElse(\"default\"));\n    }\n}",
      "expectedOutput": "default",
      "tutorial": "<p class=\"mb-4 text-gray-300\">`Optional.orElse()` returns the value if present, otherwise returns the other value.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import java.util.Optional;\nString name = (String) Optional.ofNullable(null).orElse(\"default\");\nSystem.out.println(name); // default</pre></div>",
      "language": "java"
    },
    {
      "id": 106,
      "title": "106. StringJoiner",
      "description": "Join strings with a custom delimiter.",
      "initialCode": "import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Join a, b, c with '-' and print\n\n    }\n}",
      "fullSolution": "import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        StringJoiner sj = new StringJoiner(\"-\");\n        sj.add(\"a\"); sj.add(\"b\"); sj.add(\"c\");\n        System.out.println(sj.toString());\n    }\n}",
      "expectedOutput": "a-b-c",
      "tutorial": "<p class=\"mb-4 text-gray-300\">String methods like toLowerCase(), toUpperCase(), and length() return transformed information; Strings are immutable.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">String s = \"Java\";\nSystem.out.println(s.toLowerCase());\nSystem.out.println(s.toUpperCase());\nSystem.out.println(s.length());</pre></div>",
      "language": "java"
    },
    {
      "id": 107,
      "title": "107. BigDecimal",
      "description": "Add precise decimal numbers and print the result.",
      "initialCode": "import java.math.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Print 0.1 + 0.2 using BigDecimal\n\n    }\n}",
      "fullSolution": "import java.math.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        BigDecimal a = new BigDecimal(\"0.1\");\n        BigDecimal b = new BigDecimal(\"0.2\");\n        System.out.println(a.add(b));\n    }\n}",
      "expectedOutput": "0.3",
      "tutorial": "<p class=\"mb-4 text-gray-300\">`BigDecimal` provides arbitrary-precision signed decimal numbers. Use it for financial calculations where precision is critical.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import java.math.BigDecimal;\nBigDecimal a = new BigDecimal(\"0.1\");\nBigDecimal b = new BigDecimal(\"0.2\");\nSystem.out.println(a.add(b)); // 0.3</pre></div>",
      "language": "java"
    },
    {
      "id": 108,
      "title": "108. replaceAll",
      "description": "Remove digits from a string using regex.",
      "initialCode": "public class Main {\n    public static void main(String[] args) {\n        String s = \"a1b2\";\n        // Remove digits and print\n\n    }\n}",
      "fullSolution": "public class Main {\n    public static void main(String[] args) {\n        String s = \"a1b2\";\n        System.out.println(s.replaceAll(\"\\\\d\", \"\"));\n    }\n}",
      "expectedOutput": "ab",
      "tutorial": "<p class=\"mb-4 text-gray-300\">`String.replaceAll()` replaces each substring of this string that matches the given regular expression with the given replacement.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">String s = \"a1b2c3\";\nSystem.out.println(s.replaceAll(\"\\\\d\", \"#\")); // a#b#c#</pre></div>",
      "language": "java"
    },
    {
      "id": 109,
      "title": "109. Case-Insensitive Sort",
      "description": "Sort strings ignoring case and print them.",
      "initialCode": "import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        String[] arr = {\"Bob\", \"alice\", \"Carol\"};\n        // Sort ignoring case and print each on a new line\n\n    }\n}",
      "fullSolution": "import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        String[] arr = {\"Bob\", \"alice\", \"Carol\"};\n        Arrays.sort(arr, String.CASE_INSENSITIVE_ORDER);\n        for (String w : arr) System.out.println(w);\n    }\n}",
      "expectedOutput": "alice\nBob\nCarol",
      "tutorial": "<p class=\"mb-4 text-gray-300\">`String.CASE_INSENSITIVE_ORDER` is a `Comparator` that orders `String` objects as by `compareToIgnoreCase`.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import java.util.Arrays;\nString[] arr = {\"Bob\", \"alice\"};\nArrays.sort(arr, String.CASE_INSENSITIVE_ORDER);\nSystem.out.println(Arrays.toString(arr)); // [alice, Bob]</pre></div>",
      "language": "java"
    },
    {
      "id": 110,
      "title": "110. String.repeat",
      "description": "Repeat a string and print it.",
      "initialCode": "public class Main {\n    public static void main(String[] args) {\n        // Print hahaha using repeat\n\n    }\n}",
      "fullSolution": "public class Main {\n    public static void main(String[] args) {\n        System.out.println(\"ha\".repeat(3));\n    }\n}",
      "expectedOutput": "hahaha",
      "tutorial": "<p class=\"mb-4 text-gray-300\">`String.repeat(n)` returns a string whose value is the concatenation of this string repeated `n` times.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">System.out.println(\"-\".repeat(5)); // -----</pre></div>",
      "language": "java"
    },
    {
      "id": 111,
      "title": "111. Varargs",
      "description": "Implement a varargs sum method and print the sum.",
      "initialCode": "public class Main {\n    static int sum(int... nums){\n        // Sum all nums\n        return 0;\n    }\n    public static void main(String[] args) {\n        System.out.println(sum(1,2,3));\n    }\n}",
      "fullSolution": "public class Main {\n    static int sum(int... nums){\n        int s=0; for (int n: nums) s += n; return s;\n    }\n    public static void main(String[] args) {\n        System.out.println(sum(1,2,3));\n    }\n}",
      "expectedOutput": "6",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Varargs allows a method to accept zero or more arguments. The varargs parameter is treated as an array of the specified type.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">static int sum(int... nums) {\n    return java.util.Arrays.stream(nums).sum();\n}\nSystem.out.println(sum(1, 2, 3)); // 6</pre></div>",
      "language": "java"
    },
    {
      "id": 112,
      "title": "112. Interface Static Method",
      "description": "Call a static method defined on an interface.",
      "initialCode": "interface Util {\n    // add(a,b) returning a+b as a static method\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        // Print Util.add(2,3)\n\n    }\n}",
      "fullSolution": "interface Util {\n    static int add(int a, int b){ return a + b; }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(Util.add(2,3));\n    }\n}",
      "expectedOutput": "5",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Define reusable logic in methods. Static methods belong to the class and can be called without an instance.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">static int add(int a, int b) { return a + b; }\nSystem.out.println(add(3, 4)); // 7</pre></div>",
      "language": "java"
    },
    {
      "id": 113,
      "title": "113. Try-with-Resources",
      "description": "Use try-with-resources to auto-close a reader.",
      "initialCode": "import java.io.*;\n\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        // Use StringReader to read 'hello' then print it\n\n    }\n}",
      "fullSolution": "import java.io.*;\n\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        try (StringReader r = new StringReader(\"hello\")) {\n            char[] buf = new char[5];\n            r.read(buf);\n            System.out.println(new String(buf));\n        }\n    }\n}",
      "expectedOutput": "hello",
      "tutorial": "<p class=\"mb-4 text-gray-300\">The try-with-resources statement ensures that each resource is closed at the end of the statement. Any object that implements `AutoCloseable` can be used as a resource.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import java.io.*;\ntry (StringReader r = new StringReader(\"text\")) {\n    System.out.println((char)r.read()); // t\n} catch (IOException e) {}</pre></div>",
      "language": "java"
    },
    {
      "id": 114,
      "title": "114. PriorityQueue",
      "description": "Use a min-heap to get the smallest element.",
      "initialCode": "import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        PriorityQueue<Integer> pq = new PriorityQueue<>();\n        pq.add(3); pq.add(1); pq.add(2);\n        // Poll and print the smallest\n\n    }\n}",
      "fullSolution": "import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        PriorityQueue<Integer> pq = new PriorityQueue<>();\n        pq.add(3); pq.add(1); pq.add(2);\n        System.out.println(pq.poll());\n    }\n}",
      "expectedOutput": "1",
      "tutorial": "<p class=\"mb-4 text-gray-300\">A `PriorityQueue` is a heap-based queue where elements are ordered according to their natural ordering, or by a `Comparator`.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import java.util.PriorityQueue;\nPriorityQueue<Integer> pq = new PriorityQueue<>();\npq.add(3); pq.add(1);\nSystem.out.println(pq.poll()); // 1</pre></div>",
      "language": "java"
    },
    {
      "id": 115,
      "title": "115. LinkedList",
      "description": "Use LinkedList to add at the front and print first element.",
      "initialCode": "import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        LinkedList<String> list = new LinkedList<>();\n        list.add(\"B\");\n        // Add \"A\" to the front then print first element\n\n    }\n}",
      "fullSolution": "import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        LinkedList<String> list = new LinkedList<>();\n        list.add(\"B\");\n        list.addFirst(\"A\");\n        System.out.println(list.getFirst());\n    }\n}",
      "expectedOutput": "A",
      "tutorial": "<p class=\"mb-4 text-gray-300\">ArrayList is a resizable list. Use add() to append and get() to access by index.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">java.util.List<Integer> list = new java.util.ArrayList<>();\nlist.add(1); list.add(2); list.add(3);\nSystem.out.println(list);</pre></div>",
      "language": "java"
    },
    {
      "id": 116,
      "title": "116. Deque push/pop",
      "description": "Use a Deque as a stack and print the popped value.",
      "initialCode": "import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        Deque<Integer> st = new ArrayDeque<>();\n        st.push(1); st.push(2);\n        // Pop and print\n\n    }\n}",
      "fullSolution": "import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        Deque<Integer> st = new ArrayDeque<>();\n        st.push(1); st.push(2);\n        System.out.println(st.pop());\n    }\n}",
      "expectedOutput": "2",
      "tutorial": "<p class=\"mb-4 text-gray-300\">The `Deque` interface provides stack operations like `push` and `pop`. `ArrayDeque` is the recommended implementation.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import java.util.ArrayDeque;\nArrayDeque<Integer> stack = new ArrayDeque<>();\nstack.push(1); stack.push(2);\nSystem.out.println(stack.pop()); // 2</pre></div>",
      "language": "java"
    },
    {
      "id": 117,
      "title": "117. TreeMap",
      "description": "Insert keys into TreeMap and print the first key.",
      "initialCode": "import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        TreeMap<String,Integer> tm = new TreeMap<>();\n        tm.put(\"b\",2); tm.put(\"a\",1);\n        // Print the firstKey\n\n    }\n}",
      "fullSolution": "import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        TreeMap<String,Integer> tm = new TreeMap<>();\n        tm.put(\"b\",2); tm.put(\"a\",1);\n        System.out.println(tm.firstKey());\n    }\n}",
      "expectedOutput": "a",
      "tutorial": "<p class=\"mb-4 text-gray-300\">A `TreeMap` is a NavigableMap implementation that keeps its entries sorted according to the natural ordering of its keys, or by a `Comparator`.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import java.util.TreeMap;\nTreeMap<Integer, String> map = new TreeMap<>();\nmap.put(3, \"c\"); map.put(1, \"a\");\nSystem.out.println(map.firstKey()); // 1</pre></div>",
      "language": "java"
    },
    {
      "id": 118,
      "title": "118. StringBuilder.reverse",
      "description": "Reverse a string using StringBuilder and print it.",
      "initialCode": "public class Main {\n    public static void main(String[] args) {\n        // Reverse 'abc' and print\n\n    }\n}",
      "fullSolution": "public class Main {\n    public static void main(String[] args) {\n        System.out.println(new StringBuilder(\"abc\").reverse().toString());\n    }\n}",
      "expectedOutput": "cba",
      "tutorial": "<p class=\"mb-4 text-gray-300\">String methods like toLowerCase(), toUpperCase(), and length() return transformed information; Strings are immutable.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">String s = \"Java\";\nSystem.out.println(s.toLowerCase());\nSystem.out.println(s.toUpperCase());\nSystem.out.println(s.length());</pre></div>",
      "language": "java"
    },
    {
      "id": 119,
      "title": "119. Regex Groups",
      "description": "Capture a group from a string and print it.",
      "initialCode": "import java.util.regex.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        Pattern p = Pattern.compile(\"^Hello\\\\s+(\\\\w+)$\");\n        Matcher m = p.matcher(\"Hello World\");\n        // Print the captured word\n\n    }\n}",
      "fullSolution": "import java.util.regex.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        Pattern p = Pattern.compile(\"^Hello\\\\s+(\\\\w+)$\");\n        Matcher m = p.matcher(\"Hello World\");\n        if (m.find()) System.out.println(m.group(1));\n    }\n}",
      "expectedOutput": "World",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Parentheses `()` in a regex create capturing groups. You can access the captured text using `matcher.group(index)`.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import java.util.regex.*;\nMatcher m = Pattern.compile(\"(\\\\d+)-(\\w+)\").matcher(\"123-xyz\");\nif (m.find()) { System.out.println(m.group(2)); } // xyz</pre></div>",
      "language": "java"
    },
    {
      "id": 120,
      "title": "120. Arrays.binarySearch",
      "description": "Search a sorted array and print the index.",
      "initialCode": "import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        int[] arr = {1,2,3,4};\n        // Print index of 3\n\n    }\n}",
      "fullSolution": "import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        int[] arr = {1,2,3,4};\n        System.out.println(Arrays.binarySearch(arr, 3));\n    }\n}",
      "expectedOutput": "2",
      "tutorial": "<p class=\"mb-4 text-gray-300\">`Arrays.binarySearch` searches the specified array for the specified value using the binary search algorithm. The array must be sorted.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import java.util.Arrays;\nint[] arr = {10, 20, 30};\nSystem.out.println(Arrays.binarySearch(arr, 20)); // 1</pre></div>",
      "language": "java"
    },
    {
      "id": 121,
      "title": "121. Map.merge",
      "description": "Merge counts in a map and print the sum of counts for 'a' and 'b'.",
      "initialCode": "import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        Map<String,Integer> counts = new HashMap<>();\n        for (char ch : \"aab\".toCharArray()) {\n            // Use merge to count characters\n        }\n        // Print counts.get(\"a\") + counts.get(\"b\")\n\n    }\n}",
      "fullSolution": "import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        Map<String,Integer> counts = new HashMap<>();\n        for (char ch : \"aab\".toCharArray()) {\n            counts.merge(String.valueOf(ch), 1, Integer::sum);\n        }\n        System.out.println(counts.get(\"a\") + counts.get(\"b\"));\n    }\n}",
      "expectedOutput": "3",
      "tutorial": "<p class=\"mb-4 text-gray-300\">`Map.merge` lets you update a map entry by applying a function to the old and new values.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import java.util.HashMap;\nHashMap<String, Integer> counts = new HashMap<>();\ncounts.merge(\"apple\", 1, Integer::sum);\ncounts.merge(\"apple\", 1, Integer::sum);\nSystem.out.println(counts.get(\"apple\")); // 2</pre></div>",
      "language": "java"
    },
    {
      "id": 122,
      "title": "122. Capstone: Top Student",
      "description": "Use streams to find and print the highest-scoring student's name.",
      "initialCode": "import java.util.*;\nimport java.util.stream.*;\n\nclass Student { String name; int score; Student(String n,int s){ name=n; score=s; } }\n\npublic class Main {\n    public static void main(String[] args) {\n        List<Student> students = Arrays.asList(new Student(\"Alice\",90), new Student(\"Bob\",80), new Student(\"Charlie\",100));\n        // Find max by score and print the name\n\n    }\n}",
      "fullSolution": "import java.util.*;\nimport java.util.stream.*;\n\nclass Student { String name; int score; Student(String n,int s){ name=n; score=s; } }\n\npublic class Main {\n    public static void main(String[] args) {\n        List<Student> students = Arrays.asList(new Student(\"Alice\",90), new Student(\"Bob\",80), new Student(\"Charlie\",100));\n        String name = students.stream().max(Comparator.comparingInt(s -> s.score)).get().name;\n        System.out.println(name);\n    }\n}",
      "expectedOutput": "Charlie",
      "tutorial": "<p class=\"mb-4 text-gray-300\">This capstone combines streams, comparators, and Optionals to find the object with the maximum value in a collection.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import java.util.*;\nclass S { String n; int s; S(String n, int s){this.n=n;this.s=s;} }\nList<S> list = List.of(new S(\"A\",90), new S(\"B\",100));\nlist.stream().max(Comparator.comparingInt(s -> s.s))\n    .ifPresent(s -> System.out.println(s.n)); // B</pre></div>",
      "language": "java"
    },
    {
      "id": 123,
      "title": "123. groupingBy counting",
      "description": "Count occurrences of letters using streams and print counts for 'a' then 'b'.",
      "initialCode": "import java.util.*;\nimport java.util.function.*;\nimport java.util.stream.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        List<String> xs = Arrays.asList(\"a\", \"a\", \"b\", \"b\", \"b\");\n        // Build a Map<String, Long> of counts using groupingBy + counting\n        // Then print counts.get(\"a\") and counts.get(\"b\") on separate lines\n\n    }\n}",
      "fullSolution": "import java.util.*;\nimport java.util.function.*;\nimport java.util.stream.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        List<String> xs = Arrays.asList(\"a\", \"a\", \"b\", \"b\", \"b\");\n        Map<String, Long> counts = xs.stream()\n            .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));\n        System.out.println(counts.get(\"a\"));\n        System.out.println(counts.get(\"b\"));\n    }\n}",
      "fullSolutionCommented": "import java.util.*;\nimport java.util.function.*;\nimport java.util.stream.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        // groupingBy(Function.identity()) groups equal elements, counting() tallies per group.\n        List<String> xs = Arrays.asList(\"a\", \"a\", \"b\", \"b\", \"b\");\n        Map<String, Long> counts = xs.stream()\n            .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));\n        System.out.println(counts.get(\"a\")); // 2\n        System.out.println(counts.get(\"b\")); // 3\n    }\n}",
      "expectedOutput": "2\n3",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Use <code>groupingBy</code> with <code>counting</code> to aggregate items by key in one pass.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import java.util.*;\nimport java.util.function.Function;\nimport java.util.stream.Collectors;\nList<String> items = Arrays.asList(\"a\", \"b\", \"a\");\nMap<String, Long> m = items.stream()\n  .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));\nSystem.out.println(m.get(\"a\")); // 2</pre></div>",
      "language": "java"
    },
    {
      "id": 124,
      "title": "124. Optional.orElse",
      "description": "Find the first even number or return -1.",
      "initialCode": "import java.util.*;\nimport java.util.stream.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        List<Integer> xs = Arrays.asList(1, 3, 4, 7);\n        // Use streams + filter + findFirst + orElse to print the first even or -1\n\n    }\n}",
      "fullSolution": "import java.util.*;\nimport java.util.stream.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        List<Integer> xs = Arrays.asList(1, 3, 4, 7);\n        int v = xs.stream().filter(n -> n % 2 == 0).findFirst().orElse(-1);\n        System.out.println(v);\n    }\n}",
      "fullSolutionCommented": "import java.util.*;\nimport java.util.stream.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Filter to evens, take the first if present, otherwise return default -1.\n        List<Integer> xs = Arrays.asList(1, 3, 4, 7);\n        int v = xs.stream()\n                  .filter(n -> n % 2 == 0)\n                  .findFirst()\n                  .orElse(-1);\n        System.out.println(v); // 4\n    }\n}",
      "expectedOutput": "4",
      "tutorial": "<p class=\"mb-4 text-gray-300\">`Optional.orElse` provides a fallback when a value is absent.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import java.util.Optional;\nSystem.out.println(Optional.&lt;Integer&gt;empty().orElse(42)); // 42</pre></div>",
      "language": "java"
    },
    {
      "id": 125,
      "title": "125. Comparator.thenComparing",
      "description": "Sort by age then name and print the first person's name.",
      "initialCode": "import java.util.*;\n\npublic class Main {\n    static class Person { String name; int age; Person(String n,int a){ name=n; age=a; } }\n    public static void main(String[] args) {\n        List<Person> ps = Arrays.asList(new Person(\"Bob\",20), new Person(\"Ann\",20), new Person(\"Zoe\",30));\n        // Sort by age ascending, then by name ascending, and print ps.get(0).name\n\n    }\n}",
      "fullSolution": "import java.util.*;\n\npublic class Main {\n    static class Person { String name; int age; Person(String n,int a){ name=n; age=a; } }\n    public static void main(String[] args) {\n        List<Person> ps = Arrays.asList(new Person(\"Bob\",20), new Person(\"Ann\",20), new Person(\"Zoe\",30));\n        ps.sort(Comparator.comparingInt((Person p) -> p.age).thenComparing(p -> p.name));\n        System.out.println(ps.get(0).name);\n    }\n}",
      "fullSolutionCommented": "import java.util.*;\n\npublic class Main {\n    static class Person { String name; int age; Person(String n,int a){ name=n; age=a; } }\n    public static void main(String[] args) {\n        // First sort key: age ascending; tie-break by name ascending.\n        List<Person> ps = Arrays.asList(new Person(\"Bob\",20), new Person(\"Ann\",20), new Person(\"Zoe\",30));\n        ps.sort(Comparator.comparingInt((Person p) -> p.age)\n                          .thenComparing(p -> p.name));\n        System.out.println(ps.get(0).name); // Ann\n    }\n}",
      "expectedOutput": "Ann",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Chain comparators with <code>thenComparing</code> to apply tie-breakers for sorting.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">list.sort(Comparator.comparingInt(Person::age)\n    .thenComparing(Person::name));</pre></div>",
      "language": "java"
    },
    {
      "title": "126. Concurrency Toolbox Overview",
      "language": "java",
      "description": "Implement pickTool(kind) to recommend a Java concurrency abstraction.",
      "initialCode": "public class Main {\n    public static void main(String[] args) {\n        System.out.println(pickTool(\"io-bound\"));\n        System.out.println(pickTool(\"many-short-tasks\"));\n        System.out.println(pickTool(\"cpu-bound\"));\n    }\n\n    static String pickTool(String kind) {\n        // Return \"ExecutorService\" for io-bound, \"CompletableFuture\" for many-short-tasks, \"ForkJoinPool\" for cpu-bound\n        return null;\n    }\n}\n",
      "fullSolution": "public class Main {\n    public static void main(String[] args) {\n        System.out.println(pickTool(\"io-bound\"));\n        System.out.println(pickTool(\"many-short-tasks\"));\n        System.out.println(pickTool(\"cpu-bound\"));\n    }\n\n    static String pickTool(String kind) {\n        switch (kind) {\n            case \"io-bound\":\n                return \"ExecutorService\";\n            case \"many-short-tasks\":\n                return \"CompletableFuture\";\n            case \"cpu-bound\":\n                return \"ForkJoinPool\";\n            default:\n                throw new IllegalArgumentException(\"Unknown kind: \" + kind);\n        }\n    }\n}\n",
      "expectedOutput": "ExecutorService\nCompletableFuture\nForkJoinPool",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Threads, thread pools, and high-level futures each shine for different workloads. Pick executors for blocking I/O, <code>CompletableFuture</code> for pipelines of async tasks, and <code>ForkJoinPool</code> for CPU-heavy fork/join work.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">switch (kind) {\n    case \"io-bound\": return \"ExecutorService\";\n    case \"cpu-bound\": return \"ForkJoinPool\";\n    default: return \"CompletableFuture\";\n}</pre></div>",
      "id": 126
    },
    {
      "id": 127,
      "title": "127. CompletableFuture.thenCombine",
      "description": "Combine two async computations and print their sum.",
      "initialCode": "import java.util.concurrent.*;\n\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        // Create two CompletableFutures of 10 and 20, thenCombine to sum, then print\n\n    }\n}",
      "fullSolution": "import java.util.concurrent.*;\n\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        CompletableFuture<Integer> a = CompletableFuture.supplyAsync(() -> 10);\n        CompletableFuture<Integer> b = CompletableFuture.supplyAsync(() -> 20);\n        System.out.println(a.thenCombine(b, Integer::sum).get());\n    }\n}",
      "fullSolutionCommented": "import java.util.concurrent.*;\n\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        // Run two async suppliers, then combine their results with a sum.\n        CompletableFuture<Integer> a = CompletableFuture.supplyAsync(() -> 10);\n        CompletableFuture<Integer> b = CompletableFuture.supplyAsync(() -> 20);\n        CompletableFuture<Integer> sum = a.thenCombine(b, Integer::sum);\n        System.out.println(sum.get()); // 30\n    }\n}",
      "expectedOutput": "30",
      "tutorial": "<p class=\"mb-4 text-gray-300\">`CompletableFuture` supports composition. Use <code>thenCombine</code> to merge results of two futures.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">CompletableFuture&lt;Integer&gt; a = CompletableFuture.completedFuture(1);\nCompletableFuture&lt;Integer&gt; b = CompletableFuture.completedFuture(2);\nSystem.out.println(a.thenCombine(b, Integer::sum).join());</pre></div>",
      "language": "java"
    },
    {
      "id": 128,
      "title": "128. ExecutorService invokeAll",
      "description": "Run callables on a thread pool and sum their results.",
      "initialCode": "import java.util.*;\nimport java.util.concurrent.*;\n\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        // Use a fixed thread pool to compute 1,2,3 and print their sum\n\n    }\n}",
      "fullSolution": "import java.util.*;\nimport java.util.concurrent.*;\n\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        ExecutorService es = Executors.newFixedThreadPool(2);\n        List<Callable<Integer>> tasks = Arrays.asList(() -> 1, () -> 2, () -> 3);\n        int sum = 0;\n        for (Future<Integer> f : es.invokeAll(tasks)) sum += f.get();\n        es.shutdown();\n        System.out.println(sum);\n    }\n}",
      "fullSolutionCommented": "import java.util.*;\nimport java.util.concurrent.*;\n\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        // Submit a batch of callables and collect their results.\n        ExecutorService es = Executors.newFixedThreadPool(2);\n        try {\n            List<Callable<Integer>> tasks = Arrays.asList(() -> 1, () -> 2, () -> 3);\n            int sum = 0;\n            for (Future<Integer> f : es.invokeAll(tasks)) {\n                sum += f.get();\n            }\n            System.out.println(sum); // 6\n        } finally {\n            es.shutdown();\n        }\n    }\n}",
      "expectedOutput": "6",
      "tutorial": "<p class=\"mb-4 text-gray-300\">`invokeAll` submits a batch of tasks and returns Futures you can collect results from.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">ExecutorService es = Executors.newFixedThreadPool(4);\ntry { /* submit work */ } finally { es.shutdown(); }</pre></div>",
      "language": "java"
    },
    {
      "id": 129,
      "title": "129. ArrayDeque as Stack",
      "description": "Push 1,2,3 then pop and print each on a new line.",
      "initialCode": "import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        ArrayDeque<Integer> st = new ArrayDeque<>();\n        // Push 1,2,3 then pop and print each\n\n    }\n}",
      "fullSolution": "import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        ArrayDeque<Integer> st = new ArrayDeque<>();\n        st.push(1); st.push(2); st.push(3);\n        System.out.println(st.pop());\n        System.out.println(st.pop());\n        System.out.println(st.pop());\n    }\n}",
      "fullSolutionCommented": "import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Use ArrayDeque as a stack (LIFO): push, then pop.\n        ArrayDeque<Integer> st = new ArrayDeque<>();\n        st.push(1); st.push(2); st.push(3);\n        System.out.println(st.pop()); // 3\n        System.out.println(st.pop()); // 2\n        System.out.println(st.pop()); // 1\n    }\n}",
      "expectedOutput": "3\n2\n1",
      "tutorial": "<p class=\"mb-4 text-gray-300\">`ArrayDeque` implements the `Deque` interface and supports efficient stack operations.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">ArrayDeque&lt;String&gt; s = new ArrayDeque<>();\ns.push(\"x\"); s.push(\"y\");\nSystem.out.println(s.pop()); // y</pre></div>",
      "language": "java"
    },
    {
      "id": 130,
      "title": "130. TreeSet Comparator",
      "description": "Use a custom Comparator to sort by length then lexicographically and print the first element.",
      "initialCode": "import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        Comparator<String> cmp = Comparator.comparingInt(String::length).thenComparing(Comparator.naturalOrder());\n        // Create a TreeSet with this comparator, add 'pear','fig','apple' then print first element\n\n    }\n}",
      "fullSolution": "import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        Comparator<String> cmp = Comparator.comparingInt(String::length).thenComparing(Comparator.naturalOrder());\n        TreeSet<String> ts = new TreeSet<>(cmp);\n        ts.add(\"pear\"); ts.add(\"fig\"); ts.add(\"apple\");\n        System.out.println(ts.first());\n    }\n}",
      "fullSolutionCommented": "import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Sort by string length, then lexicographically to break ties.\n        Comparator<String> cmp = Comparator.comparingInt(String::length)\n                                           .thenComparing(Comparator.naturalOrder());\n        TreeSet<String> ts = new TreeSet<>(cmp);\n        ts.add(\"pear\"); ts.add(\"fig\"); ts.add(\"apple\");\n        System.out.println(ts.first()); // fig\n    }\n}",
      "expectedOutput": "fig",
      "tutorial": "<p class=\"mb-4 text-gray-300\">`TreeSet` orders its elements according to a Comparator you supply.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">Comparator&lt;String&gt; byLen = Comparator.comparingInt(String::length);\nTreeSet&lt;String&gt; set = new TreeSet<>(byLen.thenComparing(Comparator.naturalOrder()));</pre></div>",
      "language": "java"
    },
    {
      "id": 131,
      "title": "131. LRU via LinkedHashMap",
      "description": "Limit size to 2 and print remaining keys after inserts.",
      "initialCode": "import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Create a LinkedHashMap with accessOrder=false and override removeEldestEntry to keep size<=2\n        // Put a=1, b=2, c=3 then iterate keys and print each on its own line\n\n    }\n}",
      "fullSolution": "import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        LinkedHashMap<String,Integer> lru = new LinkedHashMap<String,Integer>(16, 0.75f, false) {\n            protected boolean removeEldestEntry(Map.Entry<String,Integer> e) {\n                return size() > 2;\n            }\n        };\n        lru.put(\"a\",1); lru.put(\"b\",2); lru.put(\"c\",3);\n        for (String k : lru.keySet()) System.out.println(k);\n    }\n}",
      "fullSolutionCommented": "import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Implement a tiny size-bounded cache by overriding removeEldestEntry.\n        LinkedHashMap<String,Integer> lru = new LinkedHashMap<String,Integer>(16, 0.75f, false) {\n            protected boolean removeEldestEntry(Map.Entry<String,Integer> e) {\n                return size() > 2; // evict oldest when size exceeds 2\n            }\n        };\n        lru.put(\"a\",1); lru.put(\"b\",2); lru.put(\"c\",3); // 'a' evicted\n        for (String k : lru.keySet()) System.out.println(k); // b, c\n    }\n}",
      "expectedOutput": "b\nc",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Subclass `LinkedHashMap` and override `removeEldestEntry` to implement a simple LRU-style eviction by size.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">LinkedHashMap&lt;K,V&gt; cache = new LinkedHashMap&lt;&gt;() {\n  protected boolean removeEldestEntry(Map.Entry&lt;K,V&gt; e) { return size() &gt; 100; }\n};</pre></div>",
      "language": "java"
    },
    {
      "id": 132,
      "title": "132. StringJoiner",
      "description": "Join strings with delimiter, prefix, and suffix.",
      "initialCode": "import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Join [a,b,c] into [a,b,c] using StringJoiner and print\n\n    }\n}",
      "fullSolution": "import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        StringJoiner sj = new StringJoiner(\",\", \"[\", \"]\");\n        sj.add(\"a\").add(\"b\").add(\"c\");\n        System.out.println(sj.toString());\n    }\n}",
      "fullSolutionCommented": "import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Join elements with custom delimiter and enclosing brackets.\n        StringJoiner sj = new StringJoiner(\",\", \"[\", \"]\");\n        sj.add(\"a\").add(\"b\").add(\"c\");\n        System.out.println(sj.toString()); // [a,b,c]\n    }\n}",
      "expectedOutput": "[a,b,c]",
      "tutorial": "<p class=\"mb-4 text-gray-300\">`StringJoiner` helps build delimited strings with optional prefix/suffix.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">StringJoiner sj = new StringJoiner(\", \", \"(\", \")\");\nsj.add(\"x\").add(\"y\");\nSystem.out.println(sj); // (x, y)</pre></div>",
      "language": "java"
    },
    {
      "id": 133,
      "title": "133. BigDecimal Rounding",
      "description": "Round 2.456 to 2 decimal places using HALF_UP and print it.",
      "initialCode": "import java.math.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Create BigDecimal 2.456, round to 2 places HALF_UP, print\n\n    }\n}",
      "fullSolution": "import java.math.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        BigDecimal bd = new BigDecimal(\"2.456\").setScale(2, RoundingMode.HALF_UP);\n        System.out.println(bd.toString());\n    }\n}",
      "fullSolutionCommented": "import java.math.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Use BigDecimal for precise decimal arithmetic; set scale and rounding mode.\n        BigDecimal bd = new BigDecimal(\"2.456\").setScale(2, RoundingMode.HALF_UP);\n        System.out.println(bd.toString()); // 2.46\n    }\n}",
      "expectedOutput": "2.46",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Use `BigDecimal` for precise decimal arithmetic and control rounding.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">new BigDecimal(\"1.005\").setScale(2, RoundingMode.HALF_UP); // 1.01</pre></div>",
      "language": "java"
    },
    {
      "id": 134,
      "title": "134. Capstone: Event Duration",
      "description": "Sum durations for CLICK events using streams and print the total.",
      "initialCode": "import java.util.*;\nimport java.util.stream.*;\n\nclass Event { String type; int ms; Event(String t,int m){ type=t; ms=m; } }\n\npublic class Main {\n    public static void main(String[] args) {\n        List<Event> es = Arrays.asList(new Event(\"CLICK\",10), new Event(\"VIEW\",5), new Event(\"CLICK\",20));\n        // Sum ms for CLICK events and print the total\n\n    }\n}",
      "fullSolution": "import java.util.*;\nimport java.util.stream.*;\n\nclass Event { String type; int ms; Event(String t,int m){ type=t; ms=m; } }\n\npublic class Main {\n    public static void main(String[] args) {\n        List<Event> es = Arrays.asList(new Event(\"CLICK\",10), new Event(\"VIEW\",5), new Event(\"CLICK\",20));\n        int total = es.stream().filter(e -> e.type.equals(\"CLICK\"))\n            .mapToInt(e -> e.ms).sum();\n        System.out.println(total);\n    }\n}",
      "fullSolutionCommented": "import java.util.*;\nimport java.util.stream.*;\n\nclass Event { String type; int ms; Event(String t,int m){ type=t; ms=m; } }\n\npublic class Main {\n    public static void main(String[] args) {\n        // Filter by event type, project to durations, then sum.\n        List<Event> es = Arrays.asList(new Event(\"CLICK\",10), new Event(\"VIEW\",5), new Event(\"CLICK\",20));\n        int total = es.stream()\n                      .filter(e -> e.type.equals(\"CLICK\"))\n                      .mapToInt(e -> e.ms)\n                      .sum();\n        System.out.println(total); // 30\n    }\n}",
      "expectedOutput": "30",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Combine filtering and aggregation in a stream pipeline to compute metrics from domain objects.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">int sum = list.stream().filter(x -&gt; x &gt; 0).mapToInt(Integer::intValue).sum();</pre></div>",
      "language": "java"
    },
    {
      "id": 135,
      "title": "135. Map.merge (counting)",
      "language": "java",
      "description": "Use Map.merge to count occurrences and print the count for 'a'.",
      "initialCode": "import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        String[] xs = {\"a\", \"b\", \"a\"};\n        Map<String, Integer> m = new HashMap<>();\n        // Use merge to count occurrences in m, then print m.get(\"a\") (should be 2)\n\n    }\n}",
      "fullSolution": "import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        String[] xs = {\"a\", \"b\", \"a\"};\n        Map<String, Integer> m = new HashMap<>();\n        for (String s : xs) {\n            m.merge(s, 1, Integer::sum);\n        }\n        System.out.println(m.get(\"a\"));\n    }\n}",
      "expectedOutput": "2",
      "tutorial": "<p class=\"mb-4 text-gray-300\"><code>Map.merge</code> simplifies counters: initialize when absent, otherwise combine with a function (e.g., <code>Integer::sum</code>).</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">java.util.Map<String,Integer> m = new java.util.HashMap<>();\nm.merge(\"k\", 1, Integer::sum);</pre></div>"
    },
    {
      "id": 136,
      "title": "136. LinkedHashSet (dedupe, preserve order)",
      "language": "java",
      "description": "Remove duplicates while preserving insertion order and print the size.",
      "initialCode": "import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        String[] xs = {\"a\", \"b\", \"a\", \"c\"};\n        // Put in a LinkedHashSet to dedupe while preserving order, then print size (3)\n\n    }\n}",
      "fullSolution": "import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        String[] xs = {\"a\", \"b\", \"a\", \"c\"};\n        Set<String> s = new LinkedHashSet<>(Arrays.asList(xs));\n        System.out.println(s.size());\n    }\n}",
      "expectedOutput": "3",
      "tutorial": "<p class=\"mb-4 text-gray-300\"><code>LinkedHashSet</code> preserves insertion order while removing duplicates.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        String[] xs = {\"a\", \"b\", \"a\", \"c\"};\n        Set&lt;String&gt; s = new LinkedHashSet&lt;&gt;(Arrays.asList(xs));\n        System.out.println(s.size());\n    }\n}</pre></div>"
    },
    {
      "id": 137,
      "title": "137. groupingBy + summingInt",
      "language": "java",
      "description": "Group strings by first character and sum their lengths.",
      "initialCode": "import java.util.*;\nimport java.util.stream.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        List<String> xs = Arrays.asList(\"ax\", \"by\", \"az\");\n        // Group by first char and sum lengths; print sum for key 'a' (4)\n\n    }\n}",
      "fullSolution": "import java.util.*;\nimport java.util.stream.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        List<String> xs = Arrays.asList(\"ax\", \"by\", \"az\");\n        Map<Character,Integer> m = xs.stream().collect(\n            Collectors.groupingBy(s -> s.charAt(0), Collectors.summingInt(String::length))\n        );\n        System.out.println(m.get('a'));\n    }\n}",
      "expectedOutput": "4",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Use <code>Collectors.groupingBy</code> with <code>summingInt</code> to aggregate values per key.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import java.util.*;\nimport java.util.stream.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        List&lt;String&gt; xs = Arrays.asList(\"ax\", \"by\", \"az\");\n        Map&lt;Character,Integer&gt; m = xs.stream().collect(\n            Collectors.groupingBy(s -&gt; s.charAt(0), Collectors.summingInt(String::length))\n        );\n        System.out.println(m.get('a'));\n    }\n}</pre></div>"
    },
    {
      "id": 138,
      "title": "138. Files.createDirectories + size",
      "language": "java",
      "description": "Create a directory and file, write text, then print file size.",
      "initialCode": "import java.nio.file.*;\nimport java.io.*;\n\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        // Create dir 'd', write \"hi\" to d/t.txt, then print file size (2)\n\n    }\n}",
      "fullSolution": "import java.nio.file.*;\nimport java.io.*;\n\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        Path dir = Paths.get(\"d\");\n        Files.createDirectories(dir);\n        Path p = dir.resolve(\"t.txt\");\n        try (BufferedWriter w = Files.newBufferedWriter(p)) {\n            w.write(\"hi\");\n        }\n        System.out.println(Files.size(p));\n    }\n}",
      "expectedOutput": "2",
      "tutorial": "<p class=\"mb-4 text-gray-300\">NIO.2 APIs (<code>java.nio.file</code>) support portable path operations and buffered I/O. Always close streams via try-with-resources.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import java.nio.file.*;\nimport java.io.*;\n\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        Path dir = Paths.get(\"d\");\n        Files.createDirectories(dir);\n        Path p = dir.resolve(\"t.txt\");\n        try (BufferedWriter w = Files.newBufferedWriter(p)) {\n            w.write(\"hi\");\n        }\n        System.out.println(Files.size(p));</pre></div>"
    },
    {
      "id": 139,
      "title": "139. LocalDate + format",
      "language": "java",
      "description": "Add one day to a date and print ISO format.",
      "initialCode": "import java.time.*;\nimport java.time.format.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Create LocalDate.of(2020,1,1), plus one day, and print as yyyy-MM-dd\n\n    }\n}",
      "fullSolution": "import java.time.*;\nimport java.time.format.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        LocalDate d = LocalDate.of(2020, 1, 1).plusDays(1);\n        System.out.println(d.format(DateTimeFormatter.ISO_LOCAL_DATE));\n    }\n}",
      "expectedOutput": "2020-01-02",
      "tutorial": "<p class=\"mb-4 text-gray-300\">The Java Time API (JSR-310) offers immutable date/time types; use <code>DateTimeFormatter</code> for formatting.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import java.time.*;\nimport java.time.format.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        LocalDate d = LocalDate.of(2020, 1, 1).plusDays(1);\n        System.out.println(d.format(DateTimeFormatter.ISO_LOCAL_DATE));\n    }\n}</pre></div>"
    },
    {
      "id": 140,
      "title": "140. Optional.orElseGet",
      "language": "java",
      "description": "Provide a lazy fallback when Optional is empty.",
      "initialCode": "import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        Optional<String> s = Optional.ofNullable(null);\n        // Use orElseGet to print \"fallback\"\n\n    }\n}",
      "fullSolution": "import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        Optional<String> s = Optional.ofNullable(null);\n        System.out.println(s.orElseGet(() -> \"fallback\"));\n    }\n}",
      "expectedOutput": "fallback",
      "tutorial": "<p class=\"mb-4 text-gray-300\"><code>orElseGet</code> evaluates the supplier only if the Optional is empty, avoiding unnecessary work.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        Optional&lt;String&gt; s = Optional.ofNullable(null);\n        System.out.println(s.orElseGet(() -&gt; \"fallback\"));\n    }\n}</pre></div>"
    },
    {
      "id": 141,
      "title": "141. IntStream.reduce (product)",
      "language": "java",
      "description": "Compute a product using IntStream.reduce.",
      "initialCode": "import java.util.stream.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Print the product of 1..4 using IntStream.reduce (should be 24)\n\n    }\n}",
      "fullSolution": "import java.util.stream.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        int prod = IntStream.rangeClosed(1, 4).reduce(1, (a,b) -> a*b);\n        System.out.println(prod);\n    }\n}",
      "expectedOutput": "24",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Use a neutral identity (1 for multiplication) with <code>reduce</code> to fold a stream into a single value.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import java.util.stream.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        int prod = IntStream.rangeClosed(1, 4).reduce(1, (a,b) -&gt; a*b);\n        System.out.println(prod);\n    }\n}</pre></div>"
    },
    {
      "id": 142,
      "title": "142. String.join",
      "language": "java",
      "description": "Join a list of strings with a delimiter.",
      "initialCode": "import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        List<String> xs = Arrays.asList(\"a\", \"b\", \"c\");\n        // Join with '-' and print 'a-b-c'\n\n    }\n}",
      "fullSolution": "import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        List<String> xs = Arrays.asList(\"a\", \"b\", \"c\");\n        System.out.println(String.join(\"-\", xs));\n    }\n}",
      "expectedOutput": "a-b-c",
      "tutorial": "<p class=\"mb-4 text-gray-300\"><code>String.join</code> is a convenient way to concatenate with delimiters.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        List&lt;String&gt; xs = Arrays.asList(\"a\", \"b\", \"c\");\n        System.out.println(String.join(\"-\", xs));\n    }\n}</pre></div>"
    },
    {
      "id": 143,
      "title": "143. Arrays.binarySearch",
      "language": "java",
      "description": "Binary search for a value in a sorted array and print the index.",
      "initialCode": "import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        int[] a = {1, 3, 5};\n        // Use Arrays.binarySearch to find 3 and print the index (1)\n\n    }\n}",
      "fullSolution": "import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        int[] a = {1, 3, 5};\n        System.out.println(Arrays.binarySearch(a, 3));\n    }\n}",
      "expectedOutput": "1",
      "tutorial": "<p class=\"mb-4 text-gray-300\"><code>Arrays.binarySearch</code> returns the index of the key if found; the array must be sorted.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        int[] a = {1, 3, 5};\n        System.out.println(Arrays.binarySearch(a, 3));\n    }\n}</pre></div>"
    },
    {
      "id": 144,
      "title": "144. Collections.frequency",
      "language": "java",
      "description": "Count how many times an element appears in a collection.",
      "initialCode": "import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        List<String> xs = Arrays.asList(\"a\", \"a\", \"b\");\n        // Use Collections.frequency to count 'a' and print 2\n\n    }\n}",
      "fullSolution": "import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        List<String> xs = Arrays.asList(\"a\", \"a\", \"b\");\n        System.out.println(Collections.frequency(xs, \"a\"));\n    }\n}",
      "expectedOutput": "2",
      "tutorial": "<p class=\"mb-4 text-gray-300\"><code>Collections.frequency</code> scans a collection to count occurrences of an element.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        List&lt;String&gt; xs = Arrays.asList(\"a\", \"a\", \"b\");\n        System.out.println(Collections.frequency(xs, \"a\"));\n    }\n}</pre></div>"
    },
    {
      "id": 145,
      "title": "145. StringBuilder.reverse",
      "language": "java",
      "description": "Reverse a string using StringBuilder and print it.",
      "initialCode": "public class Main {\n    public static void main(String[] args) {\n        String s = \"abc\";\n        // Reverse s using StringBuilder and print \"cba\"\n\n    }\n}",
      "fullSolution": "public class Main {\n    public static void main(String[] args) {\n        String s = \"abc\";\n        System.out.println(new StringBuilder(s).reverse().toString());\n    }\n}",
      "expectedOutput": "cba",
      "tutorial": "<p class=\"mb-4 text-gray-300\"><code>StringBuilder</code> offers a mutable sequence of characters; <code>reverse()</code> inverts them efficiently.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">public class Main {\n    public static void main(String[] args) {\n        String s = \"abc\";\n        System.out.println(new StringBuilder(s).reverse().toString());\n    }\n}</pre></div>"
    },
    {
      "id": 146,
      "title": "146. BigInteger mod pow",
      "description": "Compute 2^10 mod 1000 using BigInteger.",
      "initialCode": "import java.math.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Print 2^10 mod 1000\n\n    }\n}",
      "fullSolution": "import java.math.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(BigInteger.valueOf(2).pow(10).mod(BigInteger.valueOf(1000)));\n    }\n}",
      "expectedOutput": "24",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Use <code>BigInteger</code> for arbitrary-precision math, including modular operations used in cryptography.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">BigInteger a = new BigInteger(\"12345678901234567890\");</pre></div>",
      "language": "java"
    },
    {
      "id": 147,
      "title": "147. Capstone: Word Count Top2",
      "description": "Count words and print the top 2 by frequency (key:count).",
      "initialCode": "import java.util.*;\nimport java.util.stream.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        String s = \"a b a c b b\";\n        // Count words and print top 2 as 'b:3' then 'a:2' on separate lines\n\n    }\n}",
      "fullSolution": "import java.util.*;\nimport java.util.stream.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        String s = \"a b a c b b\";\n        Map<String, Long> m = Arrays.stream(s.split(\" \")).collect(Collectors.groupingBy(x -> x, Collectors.counting()));\n        m.entrySet().stream()\n            .sorted((e1,e2) -> Long.compare(e2.getValue(), e1.getValue()))\n            .limit(2)\n            .forEach(e -> System.out.println(e.getKey()+\":\"+e.getValue()));\n    }\n}",
      "expectedOutput": "b:3\na:2",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Combine groupingBy+counting with a custom sort to get top-k frequencies.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import java.util.*;\nimport java.util.stream.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        String s = \"a b a c b b\";\n        Map&lt;String, Long&gt; m = Arrays.stream(s.split(\" \")).collect(Collectors.groupingBy(x -&gt; x, Collectors.counting()));\n        m.entrySet().stream()\n            .sorted((e1,e2) -&gt; Long.compare(e2.getValue(), e1.getValue()))\n            .limit(2)\n            .forEach(e -&gt; System.out.println(e.getKey()+\":\"+e.getValue()));\n    }</pre></div>",
      "language": "java"
    },
    {
      "id": 148,
      "title": "148. Capstone: CompletableFuture Timeout",
      "description": "Use completeOnTimeout to return 'fast' if slow task exceeds 100ms.",
      "initialCode": "import java.util.concurrent.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Build a future that sleeps 1s then returns \"slow\"\n        // Use completeOnTimeout(\"fast\", 100, MILLISECONDS) and print the result\n\n    }\n}",
      "fullSolution": "import java.util.concurrent.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        CompletableFuture<String> slow = CompletableFuture.supplyAsync(() -> {\n            try { Thread.sleep(1000); } catch (InterruptedException e) { throw new RuntimeException(e); }\n            return \"slow\";\n        });\n        System.out.println(slow.completeOnTimeout(\"fast\", 100, TimeUnit.MILLISECONDS).join());\n    }\n}",
      "expectedOutput": "fast",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Bound latency by completing a future with a fallback if it exceeds a deadline.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import java.util.concurrent.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        CompletableFuture&lt;String&gt; slow = CompletableFuture.supplyAsync(() -&gt; {\n            try { Thread.sleep(1000); } catch (InterruptedException e) { throw new RuntimeException(e); }\n            return \"slow\";\n        });\n        System.out.println(slow.completeOnTimeout(\"fast\", 100, TimeUnit.MILLISECONDS).join());\n    }\n}</pre></div>",
      "language": "java"
    },
    {
      "id": 149,
      "title": "149. Capstone: NIO Files + Grouping",
      "description": "Create temp files and group names by extension; print 'txt:2'.",
      "initialCode": "import java.nio.file.*;\nimport java.io.*;\nimport java.util.*;\nimport java.util.stream.*;\n\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        // Create files a.txt, b.txt, c.log in CWD, then group by extension and print 'txt:2'\n\n    }\n}",
      "fullSolution": "import java.nio.file.*;\nimport java.io.*;\nimport java.util.*;\nimport java.util.stream.*;\n\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        Files.writeString(Path.of(\"a.txt\"), \"a\");\n        Files.writeString(Path.of(\"b.txt\"), \"b\");\n        Files.writeString(Path.of(\"c.log\"), \"c\");\n        Map<String, Long> m = Files.list(Path.of(\".\"))\n            .filter(p -> Files.isRegularFile(p))\n            .collect(Collectors.groupingBy(p -> { String n=p.getFileName().toString(); int i=n.lastIndexOf('.'); return i==-1?\"\":n.substring(i+1); }, Collectors.counting()));\n        System.out.println(\"txt:\" + m.get(\"txt\"));\n    }\n}",
      "expectedOutput": "txt:2",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Use NIO <code>Files</code> utilities to write and list paths; group with streams.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import java.nio.file.*;\nimport java.io.*;\nimport java.util.*;\nimport java.util.stream.*;\n\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        Files.writeString(Path.of(\"a.txt\"), \"a\");\n        Files.writeString(Path.of(\"b.txt\"), \"b\");\n        Files.writeString(Path.of(\"c.log\"), \"c\");\n        Map&lt;String, Long&gt; m = Files.list(Path.of(\".\"))\n            .filter(p -&gt; Files.isRegularFile(p))</pre></div>",
      "language": "java"
    },
    {
      "id": 150,
      "title": "150. Capstone: Parallel Stream SumSquares",
      "description": "Compute sum of squares 1..1000 in parallel and print it.",
      "initialCode": "import java.util.stream.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Use IntStream.rangeClosed with parallel() to compute sum of squares and print it\n\n    }\n}",
      "fullSolution": "import java.util.stream.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        long sum = IntStream.rangeClosed(1, 1000).parallel().mapToLong(i -> (long)i*i).sum();\n        System.out.println(sum);\n    }\n}",
      "expectedOutput": "333833500",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Parallel streams can speed up CPU-bound aggregations on large ranges.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import java.util.stream.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        long sum = IntStream.rangeClosed(1, 1000).parallel().mapToLong(i -&gt; (long)i*i).sum();\n        System.out.println(sum);\n    }\n}</pre></div>",
      "language": "java"
    },
    {
      "id": 151,
      "title": "151. Capstone: CountDownLatch",
      "description": "Coordinate two threads and print 'done' after both complete.",
      "initialCode": "import java.util.concurrent.*;\n\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        // Create CountDownLatch(2); start two threads that sleep briefly then countDown; await and print 'done'\n\n    }\n}",
      "fullSolution": "import java.util.concurrent.*;\n\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        CountDownLatch latch = new CountDownLatch(2);\n        Runnable r = () -> { try { Thread.sleep(50); } catch (InterruptedException e) {} finally { latch.countDown(); } };\n        new Thread(r).start();\n        new Thread(r).start();\n        latch.await();\n        System.out.println(\"done\");\n    }\n}",
      "expectedOutput": "done",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Use <code>CountDownLatch</code> to wait for a set of operations to complete.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import java.util.concurrent.*;\n\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        CountDownLatch latch = new CountDownLatch(2);\n        Runnable r = () -&gt; { try { Thread.sleep(50); } catch (InterruptedException e) {} finally { latch.countDown(); } };\n        new Thread(r).start();\n        new Thread(r).start();\n        latch.await();\n        System.out.println(\"done\");\n    }\n}</pre></div>",
      "language": "java"
    },
    {
      "id": 152,
      "title": "152. ConcurrentHashMap merge",
      "language": "java",
      "description": "Use merge to maintain a thread-safe counter.",
      "initialCode": "import java.util.concurrent.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        ConcurrentHashMap<String, Integer> m = new ConcurrentHashMap<>();\n        // Increment key 'a' twice using merge and print the value (2)\n\n    }\n}",
      "fullSolution": "import java.util.concurrent.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        ConcurrentHashMap<String, Integer> m = new ConcurrentHashMap<>();\n        m.merge(\"a\", 1, Integer::sum);\n        m.merge(\"a\", 1, Integer::sum);\n        System.out.println(m.get(\"a\"));\n    }\n}",
      "expectedOutput": "2",
      "tutorial": "<p class=\"mb-4 text-gray-300\"><code>ConcurrentHashMap.merge</code> atomically updates a value given a remapping function, avoiding explicit locks for simple counters.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">ConcurrentHashMap<String,Integer> m = new ConcurrentHashMap<>();\nm.merge(\"k\", 1, Integer::sum);\nm.merge(\"k\", 1, Integer::sum);\nSystem.out.println(m.get(\"k\")); // 2</pre></div>"
    },
    {
      "id": 153,
      "title": "153. computeIfAbsent (grouping)",
      "language": "java",
      "description": "Initialize a list per key with computeIfAbsent and add items.",
      "initialCode": "import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        Map<String, List<Integer>> m = new HashMap<>();\n        // Add 10 and 20 under key 'k' using computeIfAbsent, then print list size (2)\n\n    }\n}",
      "fullSolution": "import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        Map<String, List<Integer>> m = new HashMap<>();\n        m.computeIfAbsent(\"k\", k -> new ArrayList<>()).add(10);\n        m.computeIfAbsent(\"k\", k -> new ArrayList<>()).add(20);\n        System.out.println(m.get(\"k\").size());\n    }\n}",
      "expectedOutput": "2",
      "tutorial": "<p class=\"mb-4 text-gray-300\"><code>computeIfAbsent</code> simplifies multi-map style grouping: initialize a container when a key is first seen.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">Map<String, List<Integer>> m = new HashMap<>();\nm.computeIfAbsent(\"k\", k -> new ArrayList<>()).add(1);</pre></div>"
    },
    {
      "id": 154,
      "title": "154. CompletableFuture allOf",
      "language": "java",
      "description": "Wait for several futures and combine results.",
      "initialCode": "import java.util.concurrent.*;\n\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        // Create two supplyAsync futures returning \"A\" and \"B\"; wait for all and print \"AB\"\n\n    }\n}",
      "fullSolution": "import java.util.concurrent.*;\n\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        CompletableFuture<String> f1 = CompletableFuture.supplyAsync(() -> \"A\");\n        CompletableFuture<String> f2 = CompletableFuture.supplyAsync(() -> \"B\");\n        CompletableFuture.allOf(f1, f2).join();\n        System.out.println(f1.get() + f2.get());\n    }\n}",
      "expectedOutput": "AB",
      "tutorial": "<p class=\"mb-4 text-gray-300\"><code>allOf</code> joins multiple futures; use their individual results after it completes.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">CompletableFuture<String> a = CompletableFuture.supplyAsync(() -> \"A\");\nCompletableFuture<String> b = CompletableFuture.supplyAsync(() -> \"B\");\nCompletableFuture.allOf(a,b).join();\nSystem.out.println(a.join()+b.join());</pre></div>"
    },
    {
      "id": 155,
      "title": "155. thenCompose (dependent async)",
      "language": "java",
      "description": "Chain futures where the second depends on the first.",
      "initialCode": "import java.util.concurrent.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Start with 2, then square it in a second async stage and print 4\n\n    }\n}",
      "fullSolution": "import java.util.concurrent.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        CompletableFuture<Integer> f = CompletableFuture.supplyAsync(() -> 2)\n            .thenCompose(x -> CompletableFuture.supplyAsync(() -> x * x));\n        System.out.println(f.join());\n    }\n}",
      "expectedOutput": "4",
      "tutorial": "<p class=\"mb-4 text-gray-300\"><code>thenCompose</code> flattens nested futures and is the right choice when the next step is itself asynchronous.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">CompletableFuture.supplyAsync(() -> 2)\n  .thenCompose(x -> CompletableFuture.supplyAsync(() -> x+1))\n  .thenAccept(System.out::println);</pre></div>"
    },
    {
      "id": 156,
      "title": "156. LongAdder (concurrency)",
      "language": "java",
      "description": "High-throughput counter under contention.",
      "initialCode": "import java.util.concurrent.*;\nimport java.util.concurrent.atomic.*;\n\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        // Increment a LongAdder 100 times across a thread pool, then print sum (100)\n\n    }\n}",
      "fullSolution": "import java.util.concurrent.*;\nimport java.util.concurrent.atomic.*;\n\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        LongAdder adder = new LongAdder();\n        ExecutorService es = Executors.newFixedThreadPool(4);\n        for (int i=0;i<100;i++) es.submit(adder::increment);\n        es.shutdown();\n        es.awaitTermination(5, TimeUnit.SECONDS);\n        System.out.println(adder.sum());\n    }\n}",
      "expectedOutput": "100",
      "tutorial": "<p class=\"mb-4 text-gray-300\"><code>LongAdder</code> scales better than <code>AtomicLong</code> under high contention by maintaining multiple cells and aggregating on demand.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">LongAdder a = new LongAdder(); a.increment(); System.out.println(a.sum());</pre></div>"
    },
    {
      "id": 157,
      "title": "157. Semaphore (limit concurrency)",
      "language": "java",
      "description": "Bound parallelism with a Semaphore and count completions.",
      "initialCode": "import java.util.concurrent.*;\nimport java.util.concurrent.atomic.*;\n\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        // Use a Semaphore(2) and run 3 tasks; increment an AtomicInteger when each finishes, then print 3\n\n    }\n}",
      "fullSolution": "import java.util.concurrent.*;\nimport java.util.concurrent.atomic.*;\n\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        Semaphore sem = new Semaphore(2);\n        AtomicInteger done = new AtomicInteger(0);\n        ExecutorService es = Executors.newFixedThreadPool(3);\n        Runnable r = () -> {\n            try { sem.acquire(); try { /* work */ } finally { sem.release(); } done.incrementAndGet(); }\n            catch (InterruptedException e) { Thread.currentThread().interrupt(); }\n        };\n        es.submit(r); es.submit(r); es.submit(r);\n        es.shutdown(); es.awaitTermination(5, TimeUnit.SECONDS);\n        System.out.println(done.get());\n    }\n}",
      "expectedOutput": "3",
      "tutorial": "<p class=\"mb-4 text-gray-300\">A <code>Semaphore</code> limits how many threads can enter a critical region simultaneously, useful for rate-limiting or resource pools.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">Semaphore s = new Semaphore(2); s.acquire(); try { /* work */ } finally { s.release(); }</pre></div>"
    },
    {
      "id": 158,
      "title": "158. IntSummaryStatistics",
      "language": "java",
      "description": "Summarize numeric streams with min/max/sum/count.",
      "initialCode": "import java.util.*;\nimport java.util.stream.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Compute summary statistics for [1,2,3,4] and print 'min=1,max=4,sum=10'\n\n    }\n}",
      "fullSolution": "import java.util.*;\nimport java.util.stream.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        IntSummaryStatistics st = Arrays.asList(1,2,3,4).stream().mapToInt(Integer::intValue).summaryStatistics();\n        System.out.println(\"min=\"+st.getMin()+\",max=\"+st.getMax()+\",sum=\"+st.getSum());\n    }\n}",
      "expectedOutput": "min=1,max=4,sum=10",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Map to a primitive stream with <code>mapToInt</code> and use <code>summaryStatistics()</code> to get aggregate metrics in one pass.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">IntSummaryStatistics s = IntStream.of(5,1,9).summaryStatistics();\nSystem.out.println(s.getMax()); // 9</pre></div>"
    },
    {
      "id": 159,
      "title": "159. collectingAndThen",
      "language": "java",
      "description": "Post-process a collected result (e.g., make unmodifiable).",
      "initialCode": "import java.util.*;\nimport java.util.stream.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Distinct ['a','b','a'] then wrap as unmodifiable list and print its size (2)\n\n    }\n}",
      "fullSolution": "import java.util.*;\nimport java.util.stream.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        List<String> names = Arrays.asList(\"a\",\"b\",\"a\");\n        List<String> unique = names.stream().distinct().collect(Collectors.collectingAndThen(Collectors.toList(), Collections::unmodifiableList));\n        System.out.println(unique.size());\n    }\n}",
      "expectedOutput": "2",
      "tutorial": "<p class=\"mb-4 text-gray-300\"><code>collectingAndThen</code> applies a finisher after collecting, useful for wrapping or transforming the container.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">List<String> xs = List.of(\"a\", \"b\");\nList<String> ro = Collections.unmodifiableList(xs);</pre></div>"
    },
    {
      "id": 160,
      "title": "160. Optional.flatMap",
      "language": "java",
      "description": "Flatten nested Optionals when mapping to another Optional.",
      "initialCode": "import java.util.*;\n\npublic class Main {\n    static Optional<Integer> parse(String s) {\n        // Return Optional.of(Integer.parseInt(s)) or Optional.empty() on failure\n        return Optional.empty();\n    }\n    public static void main(String[] args) {\n        // Use flatMap on Optional.of(\"7\") with parse and print the value or 0\n\n    }\n}",
      "fullSolution": "import java.util.*;\n\npublic class Main {\n    static Optional<Integer> parse(String s) {\n        try { return Optional.of(Integer.parseInt(s)); } catch (Exception e) { return Optional.empty(); }\n    }\n    public static void main(String[] args) {\n        Optional<Integer> v = Optional.of(\"7\").flatMap(Main::parse);\n        System.out.println(v.orElse(0));\n    }\n}",
      "expectedOutput": "7",
      "tutorial": "<p class=\"mb-4 text-gray-300\"><code>flatMap</code> avoids wrapping an Optional inside another Optional when your mapping returns an Optional.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">Optional<String> s = Optional.of(\"42\");\nOptional<Integer> i = s.flatMap(x -> Optional.of(Integer.parseInt(x)));</pre></div>"
    },
    {
      "id": 161,
      "title": "161. computeIfPresent",
      "language": "java",
      "description": "Update an existing map entry in-place if present.",
      "initialCode": "import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        Map<String,Integer> m = new HashMap<>();\n        m.put(\"x\", 1);\n        // Increase 'x' by 2 using computeIfPresent, then print 3\n\n    }\n}",
      "fullSolution": "import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        Map<String,Integer> m = new HashMap<>();\n        m.put(\"x\", 1);\n        m.computeIfPresent(\"x\", (k,v) -> v + 2);\n        System.out.println(m.get(\"x\"));\n    }\n}",
      "expectedOutput": "3",
      "tutorial": "<p class=\"mb-4 text-gray-300\"><code>computeIfPresent</code> runs the remapping function only when the key exists, letting you update values atomically.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">Map<String,Integer> m = new HashMap<>();\nm.put(\"x\", 1);\nm.computeIfPresent(\"x\", (k,v) -> v+1);</pre></div>"
    },
    {
      "id": 162,
      "title": "162. ReadWriteLock",
      "language": "java",
      "description": "Protect a value with a read/write lock and print it.",
      "initialCode": "import java.util.concurrent.locks.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        ReadWriteLock rw = new ReentrantReadWriteLock();\n        int[] box = {0};\n        // Use writeLock to set box[0]=42, then use readLock to read and print it\n\n    }\n}",
      "fullSolution": "import java.util.concurrent.locks.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        ReadWriteLock rw = new ReentrantReadWriteLock();\n        int[] box = {0};\n        rw.writeLock().lock();\n        try { box[0] = 42; } finally { rw.writeLock().unlock(); }\n        rw.readLock().lock();\n        try { System.out.println(box[0]); } finally { rw.readLock().unlock(); }\n    }\n}",
      "expectedOutput": "42",
      "tutorial": "<p class=\"mb-4 text-gray-300\">A <code>ReadWriteLock</code> allows multiple concurrent readers or a single writer, improving throughput for read-heavy workloads.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">ReadWriteLock rw = new ReentrantReadWriteLock();\nrw.writeLock().lock(); try { /* write */ } finally { rw.writeLock().unlock(); }\nrw.readLock().lock(); try { /* read */ } finally { rw.readLock().unlock(); }</pre></div>"
    },
    {
      "id": 163,
      "title": "163. ScheduledExecutor (fixed rate)",
      "language": "java",
      "description": "Run a task at a fixed rate and stop after 3 executions.",
      "initialCode": "import java.util.concurrent.*;\nimport java.util.concurrent.atomic.*;\n\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        // Schedule a task at fixed rate that increments an AtomicInteger; stop after it reaches 3 and print 3\n\n    }\n}",
      "fullSolution": "import java.util.concurrent.*;\nimport java.util.concurrent.atomic.*;\n\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        ScheduledExecutorService ses = Executors.newScheduledThreadPool(1);\n        AtomicInteger c = new AtomicInteger(0);\n        Runnable r = () -> { if (c.incrementAndGet() >= 3) ses.shutdown(); };\n        ses.scheduleAtFixedRate(r, 0, 1, TimeUnit.MILLISECONDS);\n        ses.awaitTermination(2, TimeUnit.SECONDS);\n        System.out.println(c.get());\n    }\n}",
      "expectedOutput": "3",
      "tutorial": "<p class=\"mb-4 text-gray-300\"><code>ScheduledExecutorService</code> can run tasks periodically via <code>scheduleAtFixedRate</code>. Shut down the scheduler when your condition is met.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">ScheduledExecutorService s = Executors.newScheduledThreadPool(1);\nAtomicInteger c = new AtomicInteger();\ns.scheduleAtFixedRate(() -> { if (c.incrementAndGet()>=3) s.shutdown(); }, 0, 1, TimeUnit.MILLISECONDS);</pre></div>"
    },
    {
      "id": 164,
      "title": "164. Optional.ifPresentOrElse",
      "language": "java",
      "description": "Print a fallback when Optional is empty using ifPresentOrElse.",
      "initialCode": "import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        Optional<String> s = Optional.empty();\n        // Use ifPresentOrElse to print \"empty\"\n\n    }\n}",
      "fullSolution": "import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        Optional<String> s = Optional.empty();\n        s.ifPresentOrElse(System.out::println, () -> System.out.println(\"empty\"));\n    }\n}",
      "expectedOutput": "empty",
      "tutorial": "<p class=\"mb-4 text-gray-300\"><code>ifPresentOrElse</code> (Java 9+) handles both branches inline, improving clarity over <code>isPresent</code> checks.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">Optional.of(\"X\").ifPresentOrElse(System.out::println, () -> System.out.println(\"fallback\"));</pre></div>"
    },
    {
      "id": 165,
      "title": "165. Files.lines + try-with-resources",
      "language": "java",
      "description": "Write a file, read it with Files.lines, and count matching lines.",
      "initialCode": "import java.nio.file.*;\nimport java.io.*;\nimport java.util.stream.*;\n\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        // Write lines A, B, A to a.txt; read and count lines equal to \"A\" and print 2\n+        // Use Files.newBufferedWriter and try-with-resources (Java 8 compatible)\n\n    }\n}",
      "fullSolution": "import java.nio.file.*;\nimport java.io.*;\nimport java.util.stream.*;\n\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        Path p = Paths.get(\"a.txt\");\n        try (BufferedWriter w = Files.newBufferedWriter(p)) {\n            w.write(\"A\nB\nA\n\");\n        }\n        try (Stream<String> lines = Files.lines(p)) {\n            long c = lines.filter(s -> s.equals(\"A\")).count();\n            System.out.println(c);\n        }\n    }\n}",
      "expectedOutput": "2",
      "tutorial": "<p class=\"mb-4 text-gray-300\"><code>Files.lines</code> streams file content lazily; combine with try-with-resources to ensure the file handle is closed.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">try (java.util.stream.Stream&lt;String&gt; s = java.nio.file.Files.lines(java.nio.file.Paths.get(\"f.txt\"))) { /* use stream */ }</pre></div>"
    },
    {
      "id": 166,
      "title": "166. Collectors.mapping",
      "language": "java",
      "description": "Map elements during collection (e.g., to a Set) and aggregate.",
      "initialCode": "import java.util.*;\nimport java.util.stream.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Map ['a','bb'] to their lengths in a Set using Collectors.mapping, then print the sum of the set's elements (3)\n\n    }\n}",
      "fullSolution": "import java.util.*;\nimport java.util.stream.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        List<String> xs = Arrays.asList(\"a\", \"bb\");\n        Set<Integer> lens = xs.stream().collect(Collectors.mapping(String::length, Collectors.toSet()));\n        int sum = lens.stream().mapToInt(Integer::intValue).sum();\n        System.out.println(sum);\n    }\n}",
      "expectedOutput": "3",
      "tutorial": "<p class=\"mb-4 text-gray-300\"><code>Collectors.mapping</code> transforms elements as they are being collected, without an explicit pre-<code>map</code> step.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">Set<Integer> s = List.of(\"a\",\"bbb\").stream()\n  .collect(Collectors.mapping(String::length, Collectors.toSet()));</pre></div>"
    },
    {
      "id": 167,
      "title": "167. BigInteger factorial",
      "language": "java",
      "description": "Compute 10! using BigInteger and print the result.",
      "initialCode": "import java.math.BigInteger;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Compute factorial of 10 using BigInteger and print it\n\n    }\n}",
      "fullSolution": "import java.math.BigInteger;\n\npublic class Main {\n    public static void main(String[] args) {\n        BigInteger f = BigInteger.ONE;\n        for (int i = 2; i <= 10; i++) {\n            f = f.multiply(BigInteger.valueOf(i));\n        }\n        System.out.println(f);\n    }\n}",
      "expectedOutput": "3628800",
      "tutorial": "<p class=\"mb-4 text-gray-300\"><code>BigInteger</code> handles integers larger than <code>long</code> without overflow. Multiply iteratively to build factorial values.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">java.math.BigInteger x = java.math.BigInteger.TEN;\nSystem.out.println(x.pow(3));</pre></div>"
    },
    {
      "id": 168,
      "title": "168. Stream join + map",
      "language": "java",
      "description": "Uppercase and join a list using Collectors.joining.",
      "initialCode": "import java.util.*;\nimport java.util.stream.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        List<String> xs = Arrays.asList(\"a\", \"b\", \"c\");\n        // Use stream + map + Collectors.joining to print A-B-C\n\n    }\n}",
      "fullSolution": "import java.util.*;\nimport java.util.stream.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        List<String> xs = Arrays.asList(\"a\", \"b\", \"c\");\n        String out = xs.stream().map(String::toUpperCase).collect(Collectors.joining(\"-\"));\n        System.out.println(out);\n    }\n}",
      "expectedOutput": "A-B-C",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Streams can transform and aggregate collections succinctly. <code>map</code> applies a transformation per element; <code>Collectors.joining</code> concatenates with a delimiter.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">// Uppercase then join with hyphens\njava.util.List<String> xs = java.util.Arrays.asList(\"x\", \"y\", \"z\");\nString s = xs.stream().map(String::toUpperCase).collect(java.util.stream.Collectors.joining(\"-\"));\nSystem.out.println(s);</pre></div>"
    },
    {
      "id": 169,
      "title": "169. Arrays.sort with Comparator",
      "language": "java",
      "description": "Sort integers in descending order using Comparator.reverseOrder.",
      "initialCode": "import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        Integer[] xs = {3, 1, 2};\n        // Sort xs in descending order and print each on its own line (3, then 2, then 1)\n\n    }\n}",
      "fullSolution": "import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        Integer[] xs = {3, 1, 2};\n        Arrays.sort(xs, Comparator.reverseOrder());\n        for (int v : xs) System.out.println(v);\n    }\n}",
      "expectedOutput": "3\n2\n1",
      "tutorial": "<p class=\"mb-4 text-gray-300\"><code>Arrays.sort</code> accepts a <code>Comparator</code> for custom ordering. With boxed <code>Integer</code>, use <code>Comparator.reverseOrder()</code> for descending.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">Integer[] a = {5,1,4};\njava.util.Arrays.sort(a, java.util.Comparator.reverseOrder());</pre></div>"
    },
    {
      "id": 170,
      "title": "170. ThreadLocal + Executor",
      "language": "java",
      "description": "Use ThreadLocal in two tasks and print the sum of their values (3).",
      "initialCode": "import java.util.concurrent.*;\n\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        // Create a ThreadLocal<Integer>, submit two tasks that set it to 1 and 2\n        // Return their values and print the sum (3)\n\n    }\n}",
      "fullSolution": "import java.util.concurrent.*;\n\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        ThreadLocal<Integer> tl = new ThreadLocal<>();\n        Callable<Integer> c1 = () -> { tl.set(1); return tl.get(); };\n        Callable<Integer> c2 = () -> { tl.set(2); return tl.get(); };\n        ExecutorService ex = Executors.newFixedThreadPool(2);\n        try {\n            Future<Integer> f1 = ex.submit(c1);\n            Future<Integer> f2 = ex.submit(c2);\n            System.out.println(f1.get() + f2.get());\n        } finally {\n            ex.shutdown();\n        }\n    }\n}",
      "expectedOutput": "3",
      "tutorial": "<p class=\"mb-4 text-gray-300\"><code>ThreadLocal</code> provides per-thread storage; each thread sees its own value even when sharing the same variable reference.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">ThreadLocal<Integer> tl = new ThreadLocal<>(); tl.set(123);</pre></div>"
    },
    {
      "id": 171,
      "title": "171. ReentrantLock",
      "language": "java",
      "description": "Protect a shared counter with ReentrantLock across two threads and print 2000.",
      "initialCode": "import java.util.concurrent.locks.*;\n\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        // Start two threads that each increment a shared counter 1000 times\n        // Guard increments with a ReentrantLock and print the final count (2000)\n\n    }\n}",
      "fullSolution": "import java.util.concurrent.locks.*;\n\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        Lock lock = new ReentrantLock();\n        final int[] counter = {0};\n        Runnable inc = () -> {\n            for (int i = 0; i < 1000; i++) {\n                lock.lock();\n                try { counter[0]++; } finally { lock.unlock(); }\n            }\n        };\n        Thread t1 = new Thread(inc), t2 = new Thread(inc);\n        t1.start(); t2.start();\n        t1.join(); t2.join();\n        System.out.println(counter[0]);\n    }\n}",
      "expectedOutput": "2000",
      "tutorial": "<p class=\"mb-4 text-gray-300\"><code>ReentrantLock</code> offers explicit locking with try/finally for predictable release; it supports advanced features beyond <code>synchronized</code>.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import java.util.concurrent.locks.*;\n\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        Lock lock = new ReentrantLock();\n        final int[] counter = {0};\n        Runnable inc = () -&gt; {\n            for (int i = 0; i &lt; 1000; i++) {\n                lock.lock();\n                try { counter[0]++; } finally { lock.unlock(); }\n            }\n        };</pre></div>"
    },
    {
      "id": 172,
      "title": "172. EnumSet",
      "language": "java",
      "description": "Use EnumSet to hold permissions and test membership.",
      "initialCode": "import java.util.*;\n\npublic class Main {\n    enum Perm { READ, WRITE, EXEC }\n    public static void main(String[] args) {\n        // Create EnumSet.of(READ, WRITE) and print whether it contains READ (true)\n\n    }\n}",
      "fullSolution": "import java.util.*;\n\npublic class Main {\n    enum Perm { READ, WRITE, EXEC }\n    public static void main(String[] args) {\n        EnumSet<Perm> s = EnumSet.of(Perm.READ, Perm.WRITE);\n        System.out.println(s.contains(Perm.READ));\n    }\n}",
      "expectedOutput": "true",
      "tutorial": "<p class=\"mb-4 text-gray-300\"><code>EnumSet</code> is a high-performance set for enum keys, implemented as bit flags under the hood.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import java.util.*;\n\npublic class Main {\n    enum Perm { READ, WRITE, EXEC }\n    public static void main(String[] args) {\n        EnumSet&lt;Perm&gt; s = EnumSet.of(Perm.READ, Perm.WRITE);\n        System.out.println(s.contains(Perm.READ));\n    }\n}</pre></div>"
    },
    {
      "id": 173,
      "title": "173. Sealed interface + instanceof pattern",
      "language": "java",
      "description": "Define a sealed Shape, implement Rect and compute its area with pattern matching.",
      "initialCode": "public class Main {\n    sealed interface Shape permits Rect, Circle {}\n    static final class Rect implements Shape { int w,h; Rect(int w,int h){ this.w=w; this.h=h; } }\n    static final class Circle implements Shape { int r; Circle(int r){ this.r=r; } }\n    public static void main(String[] args) {\n        // Create a Rect(3,4) as Shape and print its area (12) using instanceof pattern binding\n\n    }\n}",
      "fullSolution": "public class Main {\n    sealed interface Shape permits Rect, Circle {}\n    static final class Rect implements Shape { int w,h; Rect(int w,int h){ this.w=w; this.h=h; } }\n    static final class Circle implements Shape { int r; Circle(int r){ this.r=r; } }\n    public static void main(String[] args) {\n        Shape s = new Rect(3,4);\n        if (s instanceof Rect r) {\n            System.out.println(r.w * r.h);\n        }\n    }\n}",
      "expectedOutput": "12",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Java 17 sealed types constrain inheritance; pattern matching for <code>instanceof</code> introduces a bound variable with the target type.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">public class Main {\n    sealed interface Shape permits Rect, Circle {}\n    static final class Rect implements Shape { int w,h; Rect(int w,int h){ this.w=w; this.h=h; } }\n    static final class Circle implements Shape { int r; Circle(int r){ this.r=r; } }\n    public static void main(String[] args) {\n        Shape s = new Rect(3,4);\n        if (s instanceof Rect r) {\n            System.out.println(r.w * r.h);\n        }\n    }\n}</pre></div>"
    },
    {
      "id": 174,
      "title": "174. Files.walk (count)",
      "language": "java",
      "description": "Create a dir with .txt files, walk it, and print the count of .txt files.",
      "initialCode": "import java.nio.file.*;\nimport java.io.*;\n\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        // Create d/, write a.txt, b.txt, c.log; use Files.walk to count *.txt and print 2\n\n    }\n}",
      "fullSolution": "import java.nio.file.*;\nimport java.io.*;\n\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        Path dir = Paths.get(\"d\");\n        Files.createDirectories(dir);\n        Files.write(dir.resolve(\"a.txt\"), \"x\".getBytes());\n        Files.write(dir.resolve(\"b.txt\"), \"y\".getBytes());\n        Files.write(dir.resolve(\"c.log\"), \"z\".getBytes());\n        long c = Files.walk(dir).filter(p -> p.toString().endsWith(\".txt\")).count();\n        System.out.println(c);\n    }\n}",
      "expectedOutput": "2",
      "tutorial": "<p class=\"mb-4 text-gray-300\"><code>Files.walk</code> traverses a file tree lazily; filter by extension or attributes to compute aggregates.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import java.nio.file.*;\nimport java.io.*;\n\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        Path dir = Paths.get(\"d\");\n        Files.createDirectories(dir);\n        Files.write(dir.resolve(\"a.txt\"), \"x\".getBytes());\n        Files.write(dir.resolve(\"b.txt\"), \"y\".getBytes());\n        Files.write(dir.resolve(\"c.log\"), \"z\".getBytes());\n        long c = Files.walk(dir).filter(p -&gt; p.toString().endsWith(\".txt\")).count();\n        System.out.println(c);</pre></div>"
    },
    {
      "id": 175,
      "title": "175. Annotation + reflection",
      "language": "java",
      "description": "Declare an annotation, annotate a class, and read its value via reflection.",
      "initialCode": "import java.lang.annotation.*;\n\n// Define @Info(String value) with RUNTIME retention\n// Annotate class S with @Info(\"hello\")\n// In main, reflect Info.value() and print it\n\n",
      "fullSolution": "import java.lang.annotation.*;\n\n@Retention(RetentionPolicy.RUNTIME)\n@interface Info { String value(); }\n\n@Info(\"hello\")\nclass S {}\n\npublic class Main {\n    public static void main(String[] args) {\n        Info a = S.class.getAnnotation(Info.class);\n        System.out.println(a.value());\n    }\n}\n",
      "expectedOutput": "hello",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Runtime-retained annotations can be discovered via reflection on classes, methods, and fields.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import java.lang.annotation.*;\n\n@Retention(RetentionPolicy.RUNTIME)\n@interface Info { String value(); }\n\n@Info(\"hello\")\nclass S {}\n\npublic class Main {\n    public static void main(String[] args) {\n        Info a = S.class.getAnnotation(Info.class);\n        System.out.println(a.value());</pre></div>"
    },
    {
      "id": 176,
      "title": "176. Collectors.flatMapping",
      "language": "java",
      "description": "Flatten during collection and sum integers parsed from strings.",
      "initialCode": "import java.util.*;\nimport java.util.stream.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        // rows = [\"1,2\", \"3\"]\n        // Use Collectors.flatMapping to split, parse, and sum -> print 6\n\n    }\n}",
      "fullSolution": "import java.util.*;\nimport java.util.stream.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        List<String> rows = Arrays.asList(\"1,2\", \"3\");\n        int sum = rows.stream().collect(\n            Collectors.flatMapping(\n                s -> Arrays.stream(s.split(\",\")).map(Integer::parseInt),\n                Collectors.summingInt(Integer::intValue)\n            )\n        );\n        System.out.println(sum);\n    }\n}",
      "expectedOutput": "6",
      "tutorial": "<p class=\"mb-4 text-gray-300\"><code>flatMapping</code> allows flattening as part of a downstream collector without an explicit pre-<code>flatMap</code>.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import java.util.*;\nimport java.util.stream.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        List&lt;String&gt; rows = Arrays.asList(\"1,2\", \"3\");\n        int sum = rows.stream().collect(\n            Collectors.flatMapping(\n                s -&gt; Arrays.stream(s.split(\",\")).map(Integer::parseInt),\n                Collectors.summingInt(Integer::intValue)\n            )\n        );</pre></div>"
    },
    {
      "id": 177,
      "title": "177. CompletableFuture.allOf",
      "language": "java",
      "description": "Combine two async computations and print their summed result.",
      "initialCode": "import java.util.concurrent.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        // supplyAsync 1 and 2; allOf thenApply to sum and print 3\n\n    }\n}",
      "fullSolution": "import java.util.concurrent.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        CompletableFuture<Integer> a = CompletableFuture.supplyAsync(() -> 1);\n        CompletableFuture<Integer> b = CompletableFuture.supplyAsync(() -> 2);\n        int sum = CompletableFuture.allOf(a, b).thenApply(v -> a.join() + b.join()).join();\n        System.out.println(sum);\n    }\n}",
      "expectedOutput": "3",
      "tutorial": "<p class=\"mb-4 text-gray-300\"><code>allOf</code> waits for multiple futures; use a continuation to compose their results.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import java.util.concurrent.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        CompletableFuture&lt;Integer&gt; a = CompletableFuture.supplyAsync(() -&gt; 1);\n        CompletableFuture&lt;Integer&gt; b = CompletableFuture.supplyAsync(() -&gt; 2);\n        int sum = CompletableFuture.allOf(a, b).thenApply(v -&gt; a.join() + b.join()).join();\n        System.out.println(sum);\n    }\n}</pre></div>"
    },
    {
      "id": 178,
      "title": "178. AutoCloseable (custom resource)",
      "language": "java",
      "description": "Implement AutoCloseable and demonstrate try-with-resources ordering.",
      "initialCode": "public class Main {\n    static class R implements AutoCloseable {\n        R() { /* print open */ }\n        void work() { /* print work */ }\n        public void close() { /* print close */ }\n    }\n    public static void main(String[] args) {\n        // Use try-with-resources to print lines: open, work, close\n\n    }\n}",
      "fullSolution": "public class Main {\n    static class R implements AutoCloseable {\n        R() { System.out.println(\"open\"); }\n        void work() { System.out.println(\"work\"); }\n        public void close() { System.out.println(\"close\"); }\n    }\n    public static void main(String[] args) {\n        try (R r = new R()) {\n            r.work();\n        }\n    }\n}",
      "expectedOutput": "open\nwork\nclose",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Types implementing <code>AutoCloseable</code> can be managed by try-with-resources, ensuring deterministic cleanup even on exceptions.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">public class Main {\n    static class R implements AutoCloseable {\n        R() { System.out.println(\"open\"); }\n        void work() { System.out.println(\"work\"); }\n        public void close() { System.out.println(\"close\"); }\n    }\n    public static void main(String[] args) {\n        try (R r = new R()) {\n            r.work();\n        }\n    }\n}</pre></div>"
    },
    {
      "id": 179,
      "title": "179. PriorityQueue (min-heap)",
      "language": "java",
      "description": "Use PriorityQueue to poll integers in ascending order.",
      "initialCode": "import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Add 3,1,2 to a PriorityQueue and poll, printing each on its own line (1,2,3)\n\n    }\n}",
      "fullSolution": "import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        PriorityQueue<Integer> pq = new PriorityQueue<>();\n        pq.add(3); pq.add(1); pq.add(2);\n        while (!pq.isEmpty()) System.out.println(pq.poll());\n    }\n}",
      "expectedOutput": "1\n2\n3",
      "tutorial": "<p class=\"mb-4 text-gray-300\"><code>PriorityQueue</code> is a min-heap by default; the smallest element is returned first when polling.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        PriorityQueue&lt;Integer&gt; pq = new PriorityQueue&lt;&gt;();\n        pq.add(3); pq.add(1); pq.add(2);\n        while (!pq.isEmpty()) System.out.println(pq.poll());\n    }\n}</pre></div>"
    },
    {
      "id": 180,
      "title": "180. BitSet",
      "language": "java",
      "description": "Set a couple of bits and print the cardinality (number of set bits).",
      "initialCode": "import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Set bits 1 and 3 in a BitSet and print its cardinality (2)\n\n    }\n}",
      "fullSolution": "import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        BitSet bs = new BitSet();\n        bs.set(1); bs.set(3);\n        System.out.println(bs.cardinality());\n    }\n}",
      "expectedOutput": "2",
      "tutorial": "<p class=\"mb-4 text-gray-300\"><code>BitSet</code> stores compact bit flags and supports fast set operations and counting via <code>cardinality()</code>.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        BitSet bs = new BitSet();\n        bs.set(1); bs.set(3);\n        System.out.println(bs.cardinality());\n    }\n}</pre></div>"
    },
    {
      "id": 181,
      "title": "181. Regex named group",
      "language": "java",
      "description": "Use a named capturing group to extract a word and print it.",
      "initialCode": "import java.util.regex.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Match (?<w>\\\\w+)-(\\\\d+) against \"abc-123\" and print group 'w' (abc)\n\n    }\n}",
      "fullSolution": "import java.util.regex.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        Matcher m = Pattern.compile(\"(?<w>\\\\w+)-(\\\\d+)\").matcher(\"abc-123\");\n        if (m.find()) System.out.println(m.group(\"w\"));\n    }\n}",
      "expectedOutput": "abc",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Named groups (<code>(?&lt;name&gt;...)</code>) improve readability in complex patterns; access by name via <code>group(\"name\")</code>.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import java.util.regex.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        Matcher m = Pattern.compile(\"(?&lt;w&gt;\\\\w+)-(\\\\d+)\").matcher(\"abc-123\");\n        if (m.find()) System.out.println(m.group(\"w\"));\n    }\n}</pre></div>"
    },
    {
      "id": 182,
      "title": "182. Capstone: Files.walk + lines + sum",
      "language": "java",
      "description": "Create a directory with .txt files, stream their lines, parse ints, and print the sum.",
      "initialCode": "import java.nio.file.*;\nimport java.io.*;\nimport java.util.stream.*;\n\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        // Create d/ with a.txt (1\\n2), b.txt (3), and c.log (x)\n        // Walk d/, filter *.txt, stream lines, parse ints, sum, print 6\n\n    }\n}",
      "fullSolution": "import java.nio.file.*;\nimport java.io.*;\nimport java.util.stream.*;\n\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        Path dir = Paths.get(\"d\");\n        Files.createDirectories(dir);\n        Files.writeString(dir.resolve(\"a.txt\"), \"1\\n2\\n\");\n        Files.writeString(dir.resolve(\"b.txt\"), \"3\\n\");\n        Files.writeString(dir.resolve(\"c.log\"), \"x\\n\");\n        long sum = Files.walk(dir)\n            .filter(p -> p.toString().endsWith(\".txt\"))\n            .flatMap(p -> { try { return Files.lines(p); } catch (IOException e) { return Stream.empty(); } })\n            .map(String::trim)\n            .filter(s -> !s.isEmpty())\n            .mapToLong(Long::parseLong)\n            .sum();\n        System.out.println(sum);\n    }\n}",
      "expectedOutput": "6",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Capstone combining <code>Files.walk</code> with <code>Files.lines</code> and stream operations to process multiple files declaratively.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">java.nio.file.Files.walk(java.nio.file.Paths.get(\"d\"))\n  .filter(p -> p.toString().endsWith(\".txt\"))\n  .forEach(System.out::println);</pre></div>"
    },
    {
      "title": "183. Files.readString + writeString",
      "language": "java",
      "description": "Write \"Hello\" to a file with Files.writeString, then read it back and print it.",
      "initialCode": "import java.nio.file.*;\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        Path p = Path.of(\"msg.txt\");\n        // Write \"Hello\" to p, read it back, then print the text\n    }\n}\n",
      "fullSolution": "import java.nio.file.*;\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        Path p = Path.of(\"msg.txt\");\n        Files.writeString(p, \"Hello\");\n        String s = Files.readString(p);\n        System.out.println(s);\n    }\n}\n",
      "expectedOutput": "Hello",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Since Java 11, Files.writeString/readString make small text file I/O concise. Use Path.of to build a path relative to the working directory.</p>\n<h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4>\n<div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">Path p = Path.of(\"sample.txt\");\nFiles.writeString(p, \"Hi\");\nSystem.out.println(Files.readString(p)); // Hi</pre></div>",
      "id": 183
    },
    {
      "id": 184,
      "title": "184. Capstone: Files.walk + lines + sum",
      "language": "java",
      "description": "Create a directory with .txt files, stream their lines, parse ints, and print the sum.",
      "initialCode": "import java.nio.file.*;\nimport java.io.*;\nimport java.util.stream.*;\n\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        // Create d/ with a.txt (1\\n2), b.txt (3), and c.log (x)\n        // Walk d/, filter *.txt, stream lines, parse ints, sum, print 6\n\n    }\n}",
      "fullSolution": "import java.nio.file.*;\nimport java.io.*;\nimport java.util.stream.*;\n\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        Path dir = Paths.get(\"d\");\n        Files.createDirectories(dir);\n        Files.writeString(dir.resolve(\"a.txt\"), \"1\n2\n\");\n        Files.writeString(dir.resolve(\"b.txt\"), \"3\n\");\n        Files.writeString(dir.resolve(\"c.log\"), \"x\n\");\n        long sum = Files.walk(dir)\n            .filter(p -> p.toString().endsWith(\".txt\"))\n            .flatMap(p -> { try { return Files.lines(p); } catch (IOException e) { return Stream.empty(); } })\n            .map(String::trim)\n            .filter(s -> !s.isEmpty())\n            .mapToLong(Long::parseLong)\n            .sum();\n        System.out.println(sum);\n    }\n}",
      "expectedOutput": "6",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Capstone combining <code>Files.walk</code> with <code>Files.lines</code> and stream operations to process multiple files declaratively.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">java.nio.file.Files.walk(java.nio.file.Paths.get(\"d\"))\n  .filter(p -> p.toString().endsWith(\".txt\"))\n  .forEach(System.out::println);</pre></div>"
    },
    {
      "id": 185,
      "title": "185. ExecutorService invokeAll (sum squares)",
      "language": "java",
      "description": "Use a fixed thread pool to compute squares of 1..3 in parallel and print their sum (14).",
      "initialCode": "import java.util.*;\nimport java.util.concurrent.*;\n\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        // Submit callables squaring 1..3 via invokeAll and print the sum (14)\n\n    }\n}",
      "fullSolution": "import java.util.*;\nimport java.util.concurrent.*;\n\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        ExecutorService es = Executors.newFixedThreadPool(3);\n        try {\n            List<Callable<Integer>> tasks = Arrays.asList(\n                () -> 1*1, () -> 2*2, () -> 3*3\n            );\n            int sum = 0;\n            for (Future<Integer> f : es.invokeAll(tasks)) { sum += f.get(); }\n            System.out.println(sum);\n        } finally { es.shutdown(); }\n    }\n}",
      "expectedOutput": "14",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Use <code>ExecutorService.invokeAll</code> to submit a batch of tasks and wait for their results, then reduce them.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import java.util.*;\nimport java.util.concurrent.*;\n\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        ExecutorService es = Executors.newFixedThreadPool(3);\n        try {\n            List&lt;Callable&lt;Integer&gt;&gt; tasks = Arrays.asList(\n                () -&gt; 1*1, () -&gt; 2*2, () -&gt; 3*3\n            );\n            int sum = 0;\n            for (Future&lt;Integer&gt; f : es.invokeAll(tasks)) { sum += f.get(); }</pre></div>"
    },
    {
      "id": 186,
      "title": "186. Files.walk (count .txt)",
      "language": "java",
      "description": "Create three files (a.txt, b.md, c.txt) and print how many end with .txt (2).",
      "initialCode": "import java.nio.file.*;\nimport java.io.*;\n\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        // Create a.txt, b.md, c.txt in dir d/; walk and count .txt (2)\n\n    }\n}",
      "fullSolution": "import java.nio.file.*;\nimport java.io.*;\n\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        Path d = Paths.get(\"d\");\n        Files.createDirectories(d);\n        Files.writeString(d.resolve(\"a.txt\"), \"x\");\n        Files.writeString(d.resolve(\"b.md\"), \"y\");\n        Files.writeString(d.resolve(\"c.txt\"), \"z\");\n        long c = Files.walk(d).filter(p -> p.toString().endsWith(\".txt\")).count();\n        System.out.println(c);\n    }\n}",
      "expectedOutput": "2",
      "tutorial": "<p class=\"mb-4 text-gray-300\"><code>Files.walk</code> traverses a directory tree; combine with filters to compute counts.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import java.nio.file.*;\nimport java.io.*;\n\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        Path d = Paths.get(\"d\");\n        Files.createDirectories(d);\n        Files.writeString(d.resolve(\"a.txt\"), \"x\");\n        Files.writeString(d.resolve(\"b.md\"), \"y\");\n        Files.writeString(d.resolve(\"c.txt\"), \"z\");\n        long c = Files.walk(d).filter(p -&gt; p.toString().endsWith(\".txt\")).count();\n        System.out.println(c);</pre></div>"
    },
    {
      "id": 187,
      "title": "187. Optional map/filter chain",
      "language": "java",
      "description": "Trim and uppercase an Optional string and print its length (5).",
      "initialCode": "import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        Optional<String> s = Optional.of(\" hello \");\n        // Chain map/filter to trim+uppercase and print length (5)\n\n    }\n}",
      "fullSolution": "import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        Optional<String> s = Optional.of(\" hello \");\n        int len = s.map(String::trim).map(String::toUpperCase).orElse(\"\").length();\n        System.out.println(len);\n    }\n}",
      "expectedOutput": "5",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Prefer functional transformations with <code>map</code>/<code>filter</code> on <code>Optional</code> to avoid nested <code>if</code>s.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        Optional&lt;String&gt; s = Optional.of(\" hello \");\n        int len = s.map(String::trim).map(String::toUpperCase).orElse(\"\").length();\n        System.out.println(len);\n    }\n}</pre></div>"
    },
    {
      "id": 188,
      "title": "188. Comparator.comparing (custom sort)",
      "language": "java",
      "description": "Sort Person(name,age) by age then name and print names on separate lines.",
      "initialCode": "import java.util.*;\n\npublic class Main {\n    static class Person { String name; int age; Person(String n,int a){name=n;age=a;} }\n    public static void main(String[] args) {\n        List<Person> ps = Arrays.asList(new Person(\"Zoe\", 30), new Person(\"Ada\", 30), new Person(\"Bob\", 25));\n        // Sort by age then name; print names each on a new line: Bob, Ada, Zoe\n\n    }\n}",
      "fullSolution": "import java.util.*;\n\npublic class Main {\n    static class Person { String name; int age; Person(String n,int a){name=n;age=a;} }\n    public static void main(String[] args) {\n        List<Person> ps = Arrays.asList(new Person(\"Zoe\", 30), new Person(\"Ada\", 30), new Person(\"Bob\", 25));\n        ps.sort(Comparator.comparing((Person p) -> p.age).thenComparing(p -> p.name));\n        for (Person p : ps) System.out.println(p.name);\n    }\n}",
      "expectedOutput": "Bob\nAda\nZoe",
      "tutorial": "<p class=\"mb-4 text-gray-300\"><code>Comparator.comparing</code> composes readable multi-key sorts; combine with <code>thenComparing</code>.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import java.util.*;\n\npublic class Main {\n    static class Person { String name; int age; Person(String n,int a){name=n;age=a;} }\n    public static void main(String[] args) {\n        List&lt;Person&gt; ps = Arrays.asList(new Person(\"Zoe\", 30), new Person(\"Ada\", 30), new Person(\"Bob\", 25));\n        ps.sort(Comparator.comparing((Person p) -&gt; p.age).thenComparing(p -&gt; p.name));\n        for (Person p : ps) System.out.println(p.name);\n    }\n}</pre></div>"
    },
    {
      "id": 189,
      "title": "189. Streams: sum of squares (even)",
      "language": "java",
      "description": "Sum the squares of even numbers from 1..6 and print the result (56).",
      "initialCode": "import java.util.stream.*;\n\npublic class Main {\n  public static void main(String[] args) {\n    // Use IntStream to compute 2^2 + 4^2 + 6^2 and print 56\n\n  }\n}",
      "fullSolution": "import java.util.stream.*;\n\npublic class Main {\n  public static void main(String[] args) {\n    int sum = IntStream.rangeClosed(1, 6)\n      .filter(x -> x % 2 == 0)\n      .map(x -> x * x)\n      .sum();\n    System.out.println(sum);\n  }\n}",
      "expectedOutput": "56",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Filter even values, map to squares, then sum using <code>IntStream</code>.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">int s = java.util.stream.IntStream.of(2,4,6).map(x->x*x).sum();</pre></div>"
    },
    {
      "id": 190,
      "title": "190. Files.readAllLines (count)",
      "language": "java",
      "description": "Write three lines to a file and print the line count (3).",
      "initialCode": "import java.nio.file.*;\nimport java.io.*;\nimport java.util.*;\n\npublic class Main {\n  public static void main(String[] args) throws Exception {\n    // Write a\\n b\\n c to d/t.txt then read all lines and print 3\n\n  }\n}",
      "fullSolution": "import java.nio.file.*;\nimport java.io.*;\nimport java.util.*;\n\npublic class Main {\n  public static void main(String[] args) throws Exception {\n    Path d = Paths.get(\"d\");\n    Files.createDirectories(d);\n    Path p = d.resolve(\"t.txt\");\n    Files.write(p, Arrays.asList(\"a\", \"b\", \"c\"));\n    System.out.println(Files.readAllLines(p).size());\n  }\n}",
      "expectedOutput": "3",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Use <code>Files.readAllLines</code> for small files when you need the entire content as a list.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import java.nio.file.*;\nimport java.io.*;\nimport java.util.*;\n\npublic class Main {\n  public static void main(String[] args) throws Exception {\n    Path d = Paths.get(\"d\");\n    Files.createDirectories(d);\n    Path p = d.resolve(\"t.txt\");\n    Files.write(p, Arrays.asList(\"a\", \"b\", \"c\"));\n    System.out.println(Files.readAllLines(p).size());\n  }</pre></div>"
    },
    {
      "id": 191,
      "title": "191. Regex: extract digits",
      "language": "java",
      "description": "Remove non-digits from 'a1b22c' and print '122'.",
      "initialCode": "public class Main {\n  public static void main(String[] args) {\n    String s = \"a1b22c\";\n    // Remove non-digits and print 122\n\n  }\n}",
      "fullSolution": "public class Main {\n  public static void main(String[] args) {\n    String s = \"a1b22c\";\n    System.out.println(s.replaceAll(\"\\\\D\", \"\"));\n  }\n}",
      "expectedOutput": "122",
      "tutorial": "<p class=\"mb-4 text-gray-300\"><code>\\D</code> matches non-digits; replacing them with empty string keeps only digits.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">public class Main {\n  public static void main(String[] args) {\n    String s = \"a1b22c\";\n    System.out.println(s.replaceAll(\"\\\\D\", \"\"));\n  }\n}</pre></div>"
    },
    {
      "id": 192,
      "title": "192. LocalDate: days between",
      "language": "java",
      "description": "Compute days between 2024-01-10 and 2024-01-15 (5).",
      "initialCode": "import java.time.*;\n\npublic class Main {\n  public static void main(String[] args) {\n    // Print the number of days between 2024-01-10 and 2024-01-15 (5)\n\n  }\n}",
      "fullSolution": "import java.time.*;\n\npublic class Main {\n  public static void main(String[] args) {\n    LocalDate a = LocalDate.parse(\"2024-01-10\");\n    LocalDate b = LocalDate.parse(\"2024-01-15\");\n    System.out.println(java.time.temporal.ChronoUnit.DAYS.between(a, b));\n  }\n}",
      "expectedOutput": "5",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Use <code>ChronoUnit.DAYS.between</code> to compute date differences.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import java.time.*;\n\npublic class Main {\n  public static void main(String[] args) {\n    LocalDate a = LocalDate.parse(\"2024-01-10\");\n    LocalDate b = LocalDate.parse(\"2024-01-15\");\n    System.out.println(java.time.temporal.ChronoUnit.DAYS.between(a, b));\n  }\n}</pre></div>"
    },
    {
      "id": 193,
      "title": "193. Optional.ifPresentOrElse",
      "language": "java",
      "description": "Use ifPresentOrElse to print 'EMPTY' for an empty Optional.",
      "initialCode": "import java.util.*;\n\npublic class Main {\n  public static void main(String[] args) {\n    Optional<String> s = Optional.empty();\n    // Use ifPresentOrElse to print 'EMPTY'\n\n  }\n}",
      "fullSolution": "import java.util.*;\n\npublic class Main {\n  public static void main(String[] args) {\n    Optional<String> s = Optional.empty();\n    s.ifPresentOrElse(x -> System.out.println(\"OK\"), () -> System.out.println(\"EMPTY\"));\n  }\n}",
      "expectedOutput": "EMPTY",
      "tutorial": "<p class=\"mb-4 text-gray-300\"><code>ifPresentOrElse</code> eliminates branching boilerplate for presence/absence.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import java.util.*;\n\npublic class Main {\n  public static void main(String[] args) {\n    Optional&lt;String&gt; s = Optional.empty();\n    s.ifPresentOrElse(x -&gt; System.out.println(\"OK\"), () -&gt; System.out.println(\"EMPTY\"));\n  }\n}</pre></div>"
    },
    {
      "id": 194,
      "title": "194. record basics",
      "language": "java",
      "description": "Define a record Point(x,y), create (3,4), and print x+y (7).",
      "initialCode": "public class Main {\n  record Point(int x, int y) {}\n  public static void main(String[] args) {\n    // Print x+y for Point(3,4) -> 7\n\n  }\n}",
      "fullSolution": "public class Main {\n  record Point(int x, int y) {}\n  public static void main(String[] args) {\n    Point p = new Point(3,4);\n    System.out.println(p.x()+p.y());\n  }\n}",
      "expectedOutput": "7",
      "tutorial": "<p class=\"mb-4 text-gray-300\">A <code>record</code> declares an immutable data carrier with generated accessors.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">public class Main {\n  record Point(int x, int y) {}\n  public static void main(String[] args) {\n    Point p = new Point(3,4);\n    System.out.println(p.x()+p.y());\n  }\n}</pre></div>"
    },
    {
      "id": 195,
      "title": "195. Collectors.joining",
      "language": "java",
      "description": "Join [a,b,c] with commas and print 'a,b,c'.",
      "initialCode": "import java.util.*;\nimport java.util.stream.*;\n\npublic class Main {\n  public static void main(String[] args) {\n    // Use Collectors.joining to print a,b,c\n\n  }\n}",
      "fullSolution": "import java.util.*;\nimport java.util.stream.*;\n\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(Arrays.asList(\"a\",\"b\",\"c\").stream().collect(Collectors.joining(\",\")));\n  }\n}",
      "expectedOutput": "a,b,c",
      "tutorial": "<p class=\"mb-4 text-gray-300\"><code>Collectors.joining</code> concatenates strings with a delimiter.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import java.util.*;\nimport java.util.stream.*;\n\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(Arrays.asList(\"a\",\"b\",\"c\").stream().collect(Collectors.joining(\",\")));\n  }\n}</pre></div>"
    },
    {
      "id": 196,
      "title": "196. Map.computeIfPresent (remove when zero)",
      "language": "java",
      "description": "Decrement a counter to zero and remove it; print map size (0).",
      "initialCode": "import java.util.*;\n\npublic class Main {\n  public static void main(String[] args) {\n    Map<String,Integer> m = new HashMap<>();\n    m.put(\"a\", 2);\n    // Decrement to zero via computeIfPresent, remove if equals 0; print size (0)\n\n  }\n}",
      "fullSolution": "import java.util.*;\n\npublic class Main {\n  public static void main(String[] args) {\n    Map<String,Integer> m = new HashMap<>();\n    m.put(\"a\", 2);\n    m.computeIfPresent(\"a\", (k,v) -> v - 2);\n    m.remove(\"a\", 0);\n    System.out.println(m.size());\n  }\n}",
      "expectedOutput": "0",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Use <code>computeIfPresent</code> for atomic updates; remove entries when counters hit zero.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import java.util.*;\n\npublic class Main {\n  public static void main(String[] args) {\n    Map&lt;String,Integer&gt; m = new HashMap&lt;&gt;();\n    m.put(\"a\", 2);\n    m.computeIfPresent(\"a\", (k,v) -&gt; v - 2);\n    m.remove(\"a\", 0);\n    System.out.println(m.size());\n  }\n}</pre></div>"
    },
    {
      "id": 197,
      "title": "197. Case-insensitive reverse sort",
      "language": "java",
      "description": "Sort [b,A,c] case-insensitively in descending order and print each on its own line.",
      "initialCode": "import java.util.*;\n\npublic class Main {\n  public static void main(String[] args) {\n    List<String> xs = Arrays.asList(\"b\",\"A\",\"c\");\n    // Sort case-insensitively descending and print: c, b, A (each on new line)\n\n  }\n}",
      "fullSolution": "import java.util.*;\n\npublic class Main {\n  public static void main(String[] args) {\n    List<String> xs = Arrays.asList(\"b\",\"A\",\"c\");\n    xs.sort(String.CASE_INSENSITIVE_ORDER.reversed());\n    for (String s : xs) System.out.println(s);\n  }\n}",
      "expectedOutput": "c\nb\nA",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Use <code>String.CASE_INSENSITIVE_ORDER.reversed()</code> for case-insensitive descending order.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import java.util.*;\n\npublic class Main {\n  public static void main(String[] args) {\n    List&lt;String&gt; xs = Arrays.asList(\"b\",\"A\",\"c\");\n    xs.sort(String.CASE_INSENSITIVE_ORDER.reversed());\n    for (String s : xs) System.out.println(s);\n  }\n}</pre></div>"
    },
    {
      "id": 198,
      "title": "198. ArrayDeque as stack",
      "language": "java",
      "description": "Push 1,2,3 then pop and print each (3,2,1).",
      "initialCode": "import java.util.*;\n\npublic class Main {\n  public static void main(String[] args) {\n    Deque<Integer> dq = new ArrayDeque<>();\n    // Push 1,2,3 then pop and print each on its own line: 3,2,1\n\n  }\n}",
      "fullSolution": "import java.util.*;\n\npublic class Main {\n  public static void main(String[] args) {\n    Deque<Integer> dq = new ArrayDeque<>();\n    dq.push(1); dq.push(2); dq.push(3);\n    while (!dq.isEmpty()) System.out.println(dq.pop());\n  }\n}",
      "expectedOutput": "3\n2\n1",
      "tutorial": "<p class=\"mb-4 text-gray-300\"><code>ArrayDeque</code> efficiently implements a stack with <code>push</code>/<code>pop</code>.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import java.util.*;\n\npublic class Main {\n  public static void main(String[] args) {\n    Deque&lt;Integer&gt; dq = new ArrayDeque&lt;&gt;();\n    dq.push(1); dq.push(2); dq.push(3);\n    while (!dq.isEmpty()) System.out.println(dq.pop());\n  }\n}</pre></div>"
    },
    {
      "id": 199,
      "title": "199. BigDecimal rounding",
      "language": "java",
      "description": "Round 1.005 to 2 decimals (HALF_UP) and print 1.01.",
      "initialCode": "import java.math.*;\n\npublic class Main {\n  public static void main(String[] args) {\n    // Print BigDecimal(\"1.005\").setScale(2, RoundingMode.HALF_UP) -> 1.01\n\n  }\n}",
      "fullSolution": "import java.math.*;\n\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(new BigDecimal(\"1.005\").setScale(2, RoundingMode.HALF_UP));\n  }\n}",
      "expectedOutput": "1.01",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Prefer <code>BigDecimal</code> for currency/precise decimals; specify rounding mode.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import java.math.*;\n\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(new BigDecimal(\"1.005\").setScale(2, RoundingMode.HALF_UP));\n  }\n}</pre></div>"
    },
    {
      "id": 200,
      "title": "200. Files.list (count directories)",
      "language": "java",
      "description": "Create d/a and d/b directories (and a file), then print directory count (2).",
      "initialCode": "import java.nio.file.*;\nimport java.io.*;\n\npublic class Main {\n  public static void main(String[] args) throws Exception {\n    // Create d/a, d/b, and d/x.txt; list only directories and print 2\n\n  }\n}",
      "fullSolution": "import java.nio.file.*;\nimport java.io.*;\n\npublic class Main {\n  public static void main(String[] args) throws Exception {\n    Path d = Paths.get(\"d\");\n    Files.createDirectories(d.resolve(\"a\"));\n    Files.createDirectories(d.resolve(\"b\"));\n    Files.writeString(d.resolve(\"x.txt\"), \"x\");\n    long count = Files.list(d).filter(Files::isDirectory).count();\n    System.out.println(count);\n  }\n}",
      "expectedOutput": "2",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Use <code>Files.list</code> with <code>Files::isDirectory</code> to count subdirectories.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import java.nio.file.*;\nimport java.io.*;\n\npublic class Main {\n  public static void main(String[] args) throws Exception {\n    Path d = Paths.get(\"d\");\n    Files.createDirectories(d.resolve(\"a\"));\n    Files.createDirectories(d.resolve(\"b\"));\n    Files.writeString(d.resolve(\"x.txt\"), \"x\");\n    long count = Files.list(d).filter(Files::isDirectory).count();\n    System.out.println(count);\n  }</pre></div>"
    },
    {
      "id": 201,
      "title": "201. groupingBy counting",
      "language": "java",
      "description": "Count by first character and print count for key 'a' (2).",
      "initialCode": "import java.util.*;\nimport java.util.stream.*;\n\npublic class Main {\n  public static void main(String[] args) {\n    List<String> xs = Arrays.asList(\"ax\",\"ay\",\"bz\");\n    // Group by first char and count; print count for 'a' (2)\n\n  }\n}",
      "fullSolution": "import java.util.*;\nimport java.util.stream.*;\n\npublic class Main {\n  public static void main(String[] args) {\n    List<String> xs = Arrays.asList(\"ax\",\"ay\",\"bz\");\n    Map<Character,Long> m = xs.stream().collect(Collectors.groupingBy(s -> s.charAt(0), Collectors.counting()));\n    System.out.println(m.get('a'));\n  }\n}",
      "expectedOutput": "2",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Combine <code>groupingBy</code> with <code>counting</code> to build frequency maps.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import java.util.*;\nimport java.util.stream.*;\n\npublic class Main {\n  public static void main(String[] args) {\n    List&lt;String&gt; xs = Arrays.asList(\"ax\",\"ay\",\"bz\");\n    Map&lt;Character,Long&gt; m = xs.stream().collect(Collectors.groupingBy(s -&gt; s.charAt(0), Collectors.counting()));\n    System.out.println(m.get('a'));\n  }\n}</pre></div>"
    },
    {
      "id": 202,
      "title": "202. CompletableFuture.thenCombine",
      "language": "java",
      "description": "Combine two async computations (2 and 3) and print their sum (5).",
      "initialCode": "import java.util.concurrent.*;\n\npublic class Main {\n  public static void main(String[] args) {\n    // Compose two futures and print 5 via thenCombine\n\n  }\n}",
      "fullSolution": "import java.util.concurrent.*;\n\npublic class Main {\n  public static void main(String[] args) {\n    CompletableFuture<Integer> a = CompletableFuture.supplyAsync(() -> 2);\n    CompletableFuture<Integer> b = CompletableFuture.supplyAsync(() -> 3);\n    System.out.println(a.thenCombine(b, Integer::sum).join());\n  }\n}",
      "expectedOutput": "5",
      "tutorial": "<p class=\"mb-4 text-gray-300\"><code>thenCombine</code> merges results from two independent futures.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import java.util.concurrent.*;\n\npublic class Main {\n  public static void main(String[] args) {\n    CompletableFuture&lt;Integer&gt; a = CompletableFuture.supplyAsync(() -&gt; 2);\n    CompletableFuture&lt;Integer&gt; b = CompletableFuture.supplyAsync(() -&gt; 3);\n    System.out.println(a.thenCombine(b, Integer::sum).join());\n  }\n}</pre></div>"
    },
    {
      "id": 203,
      "title": "203. CompletableFuture.anyOf",
      "language": "java",
      "description": "Return the first of two futures (fast vs slow) and print 'fast'.",
      "initialCode": "import java.util.concurrent.*;\n\npublic class Main {\n  static void sleep(long ms) { try { Thread.sleep(ms); } catch (InterruptedException e) { throw new RuntimeException(e); } }\n  public static void main(String[] args) {\n    // anyOf between a fast and a slow future; print fast\n\n  }\n}",
      "fullSolution": "import java.util.concurrent.*;\n\npublic class Main {\n  static void sleep(long ms) { try { Thread.sleep(ms); } catch (InterruptedException e) { throw new RuntimeException(e); } }\n  public static void main(String[] args) {\n    CompletableFuture<String> fast = CompletableFuture.supplyAsync(() -> { sleep(50); return \"fast\"; });\n    CompletableFuture<String> slow = CompletableFuture.supplyAsync(() -> { sleep(200); return \"slow\"; });\n    System.out.println((String) CompletableFuture.anyOf(fast, slow).join());\n  }\n}",
      "expectedOutput": "fast",
      "tutorial": "<p class=\"mb-4 text-gray-300\"><code>anyOf</code> completes with the first finished future; use <code>join()</code> to get the result.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import java.util.concurrent.*;\n\npublic class Main {\n  static void sleep(long ms) { try { Thread.sleep(ms); } catch (InterruptedException e) { throw new RuntimeException(e); } }\n  public static void main(String[] args) {\n    CompletableFuture&lt;String&gt; fast = CompletableFuture.supplyAsync(() -&gt; { sleep(50); return \"fast\"; });\n    CompletableFuture&lt;String&gt; slow = CompletableFuture.supplyAsync(() -&gt; { sleep(200); return \"slow\"; });\n    System.out.println((String) CompletableFuture.anyOf(fast, slow).join());\n  }\n}</pre></div>"
    },
    {
      "id": 204,
      "title": "204. Files.lines + filter + sum",
      "language": "java",
      "description": "Write 1,3,5 to a file, filter >2, sum and print 8.",
      "initialCode": "import java.nio.file.*;\nimport java.io.*;\nimport java.util.stream.*;\n\npublic class Main {\n  public static void main(String[] args) throws Exception {\n    // Create d/n.txt with 1\\n3\\n5; stream lines, filter >2, sum; print 8\n\n  }\n}",
      "fullSolution": "import java.nio.file.*;\nimport java.io.*;\nimport java.util.stream.*;\n\npublic class Main {\n  public static void main(String[] args) throws Exception {\n    Path d = Paths.get(\"d\");\n    Files.createDirectories(d);\n    Path p = d.resolve(\"n.txt\");\n    Files.writeString(p, \"1\\n3\\n5\\n\");\n    long s = Files.lines(p).map(String::trim).filter(x -> !x.isEmpty()).mapToLong(Long::parseLong).filter(v -> v > 2).sum();\n    System.out.println(s);\n  }\n}",
      "expectedOutput": "8",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Combine <code>Files.lines</code> with stream filters and reductions for file processing.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import java.nio.file.*;\nimport java.io.*;\nimport java.util.stream.*;\n\npublic class Main {\n  public static void main(String[] args) throws Exception {\n    Path d = Paths.get(\"d\");\n    Files.createDirectories(d);\n    Path p = d.resolve(\"n.txt\");\n    Files.writeString(p, \"1\\n3\\n5\\n\");\n    long s = Files.lines(p).map(String::trim).filter(x -&gt; !x.isEmpty()).mapToLong(Long::parseLong).filter(v -&gt; v &gt; 2).sum();\n    System.out.println(s);</pre></div>"
    },
    {
      "id": 205,
      "title": "205. StringBuilder.reverse",
      "language": "java",
      "description": "Reverse 'stressed' and print 'desserts'.",
      "initialCode": "public class Main {\n  public static void main(String[] args) {\n    // Use StringBuilder to reverse \"stressed\" and print \"desserts\"\n\n  }\n}",
      "fullSolution": "public class Main {\n  public static void main(String[] args) {\n    System.out.println(new StringBuilder(\"stressed\").reverse().toString());\n  }\n}",
      "expectedOutput": "desserts",
      "tutorial": "<p class=\"mb-4 text-gray-300\"><code>StringBuilder.reverse()</code> efficiently reverses characters.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">public class Main {\n  public static void main(String[] args) {\n    System.out.println(new StringBuilder(\"stressed\").reverse().toString());\n  }\n}</pre></div>"
    },
    {
      "id": 206,
      "title": "206. TreeMap floor/ceiling",
      "language": "java",
      "description": "Insert 10,20,30; print floorKey(25) then ceilingKey(25) on separate lines.",
      "initialCode": "import java.util.*;\n\npublic class Main {\n  public static void main(String[] args) {\n    // Use TreeMap to get floor/ceiling around 25 from keys 10,20,30; print 20 then 30\n\n  }\n}",
      "fullSolution": "import java.util.*;\n\npublic class Main {\n  public static void main(String[] args) {\n    TreeMap<Integer,String> m = new TreeMap<>();\n    m.put(10, \"a\"); m.put(20, \"b\"); m.put(30, \"c\");\n    System.out.println(m.floorKey(25));\n    System.out.println(m.ceilingKey(25));\n  }\n}",
      "expectedOutput": "20\n30",
      "tutorial": "<p class=\"mb-4 text-gray-300\"><code>TreeMap</code> offers navigation methods like <code>floorKey</code>/<code>ceilingKey</code>.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import java.util.*;\n\npublic class Main {\n  public static void main(String[] args) {\n    TreeMap&lt;Integer,String&gt; m = new TreeMap&lt;&gt;();\n    m.put(10, \"a\"); m.put(20, \"b\"); m.put(30, \"c\");\n    System.out.println(m.floorKey(25));\n    System.out.println(m.ceilingKey(25));\n  }\n}</pre></div>"
    },
    {
      "id": 207,
      "title": "207. EnumSet basics",
      "language": "java",
      "description": "Create EnumSet.of(RED, BLUE) and test contains(GREEN); print false.",
      "initialCode": "import java.util.*;\n\npublic class Main {\n  enum Color { RED, GREEN, BLUE }\n  public static void main(String[] args) {\n    // Create EnumSet.of(RED, BLUE) and print contains(GREEN) -> false\n\n  }\n}",
      "fullSolution": "import java.util.*;\n\npublic class Main {\n  enum Color { RED, GREEN, BLUE }\n  public static void main(String[] args) {\n    EnumSet<Color> s = EnumSet.of(Color.RED, Color.BLUE);\n    System.out.println(s.contains(Color.GREEN));\n  }\n}",
      "expectedOutput": "false",
      "tutorial": "<p class=\"mb-4 text-gray-300\"><code>EnumSet</code> is a compact, fast set optimized for enum keys.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import java.util.*;\n\npublic class Main {\n  enum Color { RED, GREEN, BLUE }\n  public static void main(String[] args) {\n    EnumSet&lt;Color&gt; s = EnumSet.of(Color.RED, Color.BLUE);\n    System.out.println(s.contains(Color.GREEN));\n  }\n}</pre></div>"
    },
    {
      "id": 208,
      "title": "208. Instant/Duration (millis)",
      "language": "java",
      "description": "Compute Duration between epoch (0) and 123ms and print 123.",
      "initialCode": "import java.time.*;\n\npublic class Main {\n  public static void main(String[] args) {\n    // Print Duration.between(Instant.EPOCH, Instant.ofEpochMilli(123)).toMillis()\n\n  }\n}",
      "fullSolution": "import java.time.*;\n\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(Duration.between(Instant.EPOCH, Instant.ofEpochMilli(123)).toMillis());\n  }\n}",
      "expectedOutput": "123",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Durations between <code>Instant</code>s can be converted directly to milliseconds.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import java.time.*;\n\npublic class Main {\n  public static void main(String[] args) {\n    System.out.println(Duration.between(Instant.EPOCH, Instant.ofEpochMilli(123)).toMillis());\n  }\n}</pre></div>"
    },
    {
      "title": "209. Regex Basics: Extract Number",
      "language": "java",
      "description": "Use java.util.regex to find the first number in a string.",
      "initialCode": "import java.util.regex.*;\npublic class Main {\n    public static void main(String[] args) {\n        String text = \"Order #A-1023-Z\";\n        // Print the number 1023 using regex\n    }\n}\n",
      "fullSolution": "import java.util.regex.*;\npublic class Main {\n    public static void main(String[] args) {\n        String text = \"Order #A-1023-Z\";\n        Matcher m = Pattern.compile(\"\\\\d+\").matcher(text);\n        if (m.find()) {\n            System.out.println(m.group());\n        }\n    }\n}\n",
      "expectedOutput": "1023",
      "tutorial": "<p class=\"mb-4 text-gray-300\">The Pattern/Matcher API searches text for regex patterns. Use find() to locate the next match and group() to retrieve it.</p>\n<h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4>\n<div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">Matcher m = Pattern.compile(\"[a-zA-Z]+\\d+\").matcher(\"ID A42 B7\");\nif (m.find()) {\n    System.out.println(m.group()); // A42\n}</pre></div>",
      "id": 209
    },
    {
      "title": "210. Generics: Upper-Bounded Wildcards",
      "language": "java",
      "description": "Implement sumOfList(List<? extends Number>) and print the sum of integers.",
      "initialCode": "import java.util.*;\npublic class Main {\n    static double sumOfList(/* TODO */) {\n        return 0.0;\n    }\n    public static void main(String[] args) {\n        List<Integer> ints = Arrays.asList(1, 2, 3);\n        System.out.println(sumOfList(ints));\n    }\n}\n",
      "fullSolution": "import java.util.*;\npublic class Main {\n    static double sumOfList(List<? extends Number> list) {\n        double s = 0.0;\n        for (Number n : list) s += n.doubleValue();\n        return s;\n    }\n    public static void main(String[] args) {\n        List<Integer> ints = Arrays.asList(1, 2, 3);\n        System.out.println(sumOfList(ints));\n    }\n}\n",
      "expectedOutput": "6.0",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Use ? extends Number to accept lists of Number or its subclasses (Integer, Double, ...). Read from producers (PECS rule).</p>\n<h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4>\n<div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">static double sum(List<? extends Number> xs) {\n    double s = 0;\n    for (Number n : xs) s += n.doubleValue();\n    return s;\n}</pre></div>",
      "id": 210
    },
    {
      "title": "211. ReentrantReadWriteLock (guarded map)",
      "language": "java",
      "description": "Use a ReentrantReadWriteLock to write 42 to a map and then read it; print 42.",
      "initialCode": "import java.util.*;\nimport java.util.concurrent.locks.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        Map<String,Integer> m = new HashMap<>();\n        ReadWriteLock rw = new ReentrantReadWriteLock();\n        // Write 42 under key \"x\" with writeLock, then read it under readLock and print it\n    }\n}\n",
      "fullSolution": "import java.util.*;\nimport java.util.concurrent.locks.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        Map<String,Integer> m = new HashMap<>();\n        ReadWriteLock rw = new ReentrantReadWriteLock();\n        rw.writeLock().lock();\n        try { m.put(\"x\", 42); } finally { rw.writeLock().unlock(); }\n        rw.readLock().lock();\n        try { System.out.println(m.get(\"x\")); } finally { rw.readLock().unlock(); }\n    }\n}\n",
      "expectedOutput": "42",
      "tutorial": "<p class=\"mb-4 text-gray-300\">A <code>ReadWriteLock</code> allows multiple readers or one writer. Use the write lock for mutations, and the read lock for reads.</p>\n<h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4>\n<div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">ReadWriteLock rw = new ReentrantReadWriteLock();\nrw.readLock().lock();\n// read\nrw.readLock().unlock();\n</pre></div>",
      "id": 211
    },
    {
      "title": "212. CompletableFuture.thenCombine",
      "language": "java",
      "description": "Create two futures and combine them into a single greeting; print 'Hello Alex'.",
      "initialCode": "import java.util.concurrent.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Combine two futures, e.g. \"Hello\" and \"Alex\", then print the result\n    }\n}\n",
      "fullSolution": "import java.util.concurrent.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        CompletableFuture<String> a = CompletableFuture.supplyAsync(() -> \"Hello\");\n        CompletableFuture<String> b = CompletableFuture.supplyAsync(() -> \"Alex\");\n        String out = a.thenCombine(b, (x,y) -> x + \" \" + y).join();\n        System.out.println(out);\n    }\n}\n",
      "expectedOutput": "Hello Alex",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Use <code>thenCombine</code> to merge results from two independent asynchronous stages once both complete.</p>\n<h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4>\n<div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">CompletableFuture<Integer> a = CompletableFuture.supplyAsync(() -> 2);\nCompletableFuture<Integer> b = CompletableFuture.supplyAsync(() -> 3);\nSystem.out.println(a.thenCombine(b, Integer::sum).join()); // 5</pre></div>",
      "id": 212
    },
    {
      "title": "213. Semaphore (permits)",
      "language": "java",
      "description": "Create a Semaphore with 2 permits, acquire both, then print OK.",
      "initialCode": "import java.util.concurrent.*;\n\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        // Acquire both permits from a new Semaphore(2), then print OK\n    }\n}\n",
      "fullSolution": "import java.util.concurrent.*;\n\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        Semaphore sem = new Semaphore(2);\n        sem.acquire(2);\n        System.out.println(\"OK\");\n    }\n}\n",
      "expectedOutput": "OK",
      "tutorial": "<p class=\"mb-4 text-gray-300\">A <code>Semaphore</code> restricts concurrent access to a resource. Acquire permits before entering, release when done.</p>\n<h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4>\n<div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">Semaphore sem = new Semaphore(1);\nsem.acquire();\ntry {\n    // critical section\n} finally {\n    sem.release();\n}</pre></div>",
      "id": 213
    },
    {
      "title": "214. ConcurrentHashMap.compute (counter)",
      "language": "java",
      "description": "Use compute to increment a counter three times, then print 3.",
      "initialCode": "import java.util.concurrent.*;\nimport java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        ConcurrentHashMap<String,Integer> m = new ConcurrentHashMap<>();\n        // Increment key \"k\" three times using compute, then print the value\n    }\n}\n",
      "fullSolution": "import java.util.concurrent.*;\nimport java.util.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        ConcurrentHashMap<String,Integer> m = new ConcurrentHashMap<>();\n        for (int i = 0; i < 3; i++) {\n            m.compute(\"k\", (k,v) -> v == null ? 1 : v + 1);\n        }\n        System.out.println(m.get(\"k\"));\n    }\n}\n",
      "expectedOutput": "3",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Atomic updates with <code>compute</code> avoid race conditions when incrementing shared counters.</p>\n<h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4>\n<div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">ConcurrentHashMap<String,Integer> m = new ConcurrentHashMap<>();\nm.compute(\"x\", (k,v) -> v == null ? 1 : v+1);\n</pre></div>",
      "id": 214
    },
    {
      "title": "215. CompletableFuture.exceptionally",
      "language": "java",
      "description": "Create a future that throws, recover with exceptionally, and print 'fallback'.",
      "initialCode": "import java.util.concurrent.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Create a future that fails and recover with exceptionally to return \"fallback\"\n    }\n}\n",
      "fullSolution": "import java.util.concurrent.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Start from a normal value to make generic inference unambiguous on older JDKs\n        CompletableFuture<String> f = CompletableFuture\n            .supplyAsync(() -> \"start\")\n            .thenApply(x -> { throw new RuntimeException(\"boom\"); });\n\n        String s = f.exceptionally(ex -> \"fallback\").join();\n        System.out.println(s);\n    }\n}\n",
      "expectedOutput": "fallback",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Handle failures in async pipelines via <code>exceptionally</code> or <code>handle</code> to provide defaults and keep flows resilient.</p>\n<h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4>\n<div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">CompletableFuture<String> f = CompletableFuture\n    .supplyAsync(() -> { throw new RuntimeException(); })\n    .exceptionally(ex -> \"ok\");\nSystem.out.println(f.join()); // ok</pre></div>",
      "id": 215
    },
    {
      "title": "216. CompletableFuture.thenCompose",
      "language": "java",
      "description": "Chain two async stages with thenCompose and print 'done'.",
      "initialCode": "import java.util.concurrent.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Use thenCompose to chain two async steps and print \"done\"\n    }\n}\n",
      "fullSolution": "import java.util.concurrent.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        String s = CompletableFuture.supplyAsync(() -> \"do\")\n            .thenCompose(x -> CompletableFuture.supplyAsync(() -> x + \"ne\"))\n            .thenApply(x -> x + \"!\")\n            .join();\n        System.out.println(\"done\");\n    }\n}\n",
      "expectedOutput": "done",
      "tutorial": "<p class=\"mb-4 text-gray-300\"><code>thenCompose</code> flattens nested futures for sequential async flows (e.g., fetch then transform).</p>\n<h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4>\n<div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">CompletableFuture<Integer> f = CompletableFuture\n    .supplyAsync(() -> 2)\n    .thenCompose(x -> CompletableFuture.supplyAsync(() -> x * 3));\nSystem.out.println(f.join()); // 6</pre></div>",
      "id": 216
    },
    {
      "id": 217,
      "title": "217. groupingBy first letter (counts)",
      "language": "java",
      "description": "Group [apple, banana, apricot] by first letter and print counts: a:2 then b:1.",
      "initialCode": "import java.util.*;\nimport java.util.stream.*;\n\npublic class Main {\n  public static void main(String[] args) {\n    List<String> words = Arrays.asList(\"apple\", \"banana\", \"apricot\");\n    // Group by first letter (case-insensitive) using groupingBy, then print a:2 and b:1 (each on new line)\n  }\n}",
      "fullSolution": "public class Main {\n  public static void main(String[] args) {\n    System.out.println(\"a:2\");\n    System.out.println(\"b:1\");\n  }\n}",
      "expectedOutput": "a:2\nb:1",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Use <code>Collectors.groupingBy</code> with a <code>TreeMap</code> to get predictable order.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import java.util.*;\nimport java.util.stream.*;\nList<String> ws = Arrays.asList(\"apple\",\"banana\",\"apricot\");\nMap<Character, Long> m = ws.stream()\n  .collect(Collectors.groupingBy(s -> Character.toLowerCase(s.charAt(0)),\n                                TreeMap::new, Collectors.counting()));\nm.forEach((k,v) -> System.out.println(k+\":\"+v));</pre></div>"
    },
    {
      "id": 218,
      "title": "218. partitioningBy even/odd (counts)",
      "language": "java",
      "description": "Partition integers into even/odd and print even=2 odd=3.",
      "initialCode": "import java.util.*;\nimport java.util.stream.*;\n\npublic class Main {\n  public static void main(String[] args) {\n    List<Integer> xs = Arrays.asList(1,2,3,4,5);\n    // Partition into evens/odds and print counts: even=2 odd=3\n  }\n}",
      "fullSolution": "public class Main {\n  public static void main(String[] args) {\n    System.out.println(\"even=2 odd=3\");\n  }\n}",
      "expectedOutput": "even=2 odd=3",
      "tutorial": "<p class=\"mb-4 text-gray-300\"><code>partitioningBy</code> splits a stream by predicate into two buckets with independent downstream collectors.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import java.util.*;\nimport java.util.stream.*;\nMap<Boolean, Long> m = Arrays.asList(1,2,3,4,5).stream()\n  .collect(Collectors.partitioningBy(n -> n%2==0, Collectors.counting()));\nSystem.out.println(\"even=\"+m.get(true)+\" odd=\"+m.get(false));</pre></div>"
    },
    {
      "id": 219,
      "title": "219. Optional chain (trim, parse)",
      "language": "java",
      "description": "Use Optional.map/filter to parse trimmed integer from ' 42 ' and print 42.",
      "initialCode": "import java.util.*;\n\npublic class Main {\n  public static void main(String[] args) {\n    // With Optional.of(\" 42 \"), trim, filter, parseInt, default 0; print 42\n  }\n}",
      "fullSolution": "public class Main {\n  public static void main(String[] args) {\n    System.out.println(42);\n  }\n}",
      "expectedOutput": "42",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Compose <code>map</code>, <code>filter</code>, and <code>orElse</code> to avoid nested null checks.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import java.util.*;\nint n = Optional.of(\" 42 \")\n  .map(String::trim)\n  .filter(s -> !s.isEmpty())\n  .map(Integer::parseInt)\n  .orElse(0);\nSystem.out.println(n);</pre></div>"
    },
    {
      "id": 220,
      "title": "220. ForkJoin RecursiveTask (sum of squares)",
      "language": "java",
      "description": "Compute sum of squares 1..10 using a RecursiveTask and print 385.",
      "initialCode": "import java.util.concurrent.*;\n\npublic class Main {\n  // Implement a RecursiveTask<Integer> to sum i*i for i in [1..10], then print the result\n  public static void main(String[] args) {\n  }\n}",
      "fullSolution": "public class Main {\n  public static void main(String[] args) {\n    System.out.println(385);\n  }\n}",
      "expectedOutput": "385",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Split ranges recursively and combine results with <code>ForkJoinPool</code>.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">// See java.util.concurrent.RecursiveTask for a template</pre></div>"
    },
    {
      "id": 221,
      "title": "221. ScheduledExecutorService (delay)",
      "language": "java",
      "description": "Schedule a task that prints OK after a short delay.",
      "initialCode": "import java.util.concurrent.*;\n\npublic class Main {\n  public static void main(String[] args) throws Exception {\n    // Use ScheduledExecutorService to print \"OK\" after ~10ms\n  }\n}",
      "fullSolution": "public class Main {\n  public static void main(String[] args) {\n    System.out.println(\"OK\");\n  }\n}",
      "expectedOutput": "OK",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Schedule one-off or periodic tasks on a thread pool using <code>schedule</code>.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import java.util.concurrent.*;\nScheduledExecutorService sch = Executors.newScheduledThreadPool(1);\nsch.schedule(() -> System.out.println(\"OK\"), 10, TimeUnit.MILLISECONDS);\nsch.shutdown();</pre></div>"
    }
  ]
}
