{
  "mode": "replace",
  "lessons": [
    {
      "id": 1,
      "title": "1. Hello, World!",
      "language": "python",
      "description": "The classic first step. Print exactly Hello, World!",
      "initialCode": "# Your code here. Print \"Hello, World!\"\n\n",
      "fullSolution": "print(\"Hello, World!\")\n",
      "expectedOutput": "Hello, World!",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Use the built-in print() function to write text to the console. Strings must be quoted.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">print(\"Hello there!\")\nprint(42)</pre></div>"
    },
    {
      "id": 2,
      "title": "2. Variables & Data Types",
      "language": "python",
      "description": "Create a variable named my_number with value 42 and print it.",
      "initialCode": "# Declare my_number = 42 then print it\n\n",
      "fullSolution": "my_number = 42\nprint(my_number)\n",
      "expectedOutput": "42",
      "tutorial": "<p class=\"mb-4 text-gray-300\">A variable is a named reference to a value. Python infers types at runtime (dynamic typing).</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">my_number = 42\nname = \"Alice\"\npi = 3.14\nis_active = True\nprint(name, my_number)</pre></div>"
    },
    {
      "id": 3,
      "title": "3. While Loops",
      "language": "python",
      "description": "Use a while loop to print numbers 1 through 5, each on a new line.",
      "initialCode": "i = 1\n# Print 1..5 using while\n\n",
      "fullSolution": "i = 1\nwhile i <= 5:\n    print(i)\n    i += 1\n",
      "expectedOutput": "1\n2\n3\n4\n5",
      "tutorial": "<p class=\"mb-4 text-gray-300\">A while loop repeats while a condition remains True. Be sure the condition eventually becomes False to avoid infinite loops.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">i = 1\nwhile i <= 3:\n    print(i)\n    i += 1</pre></div>"
    },
    {
      "id": 4,
      "title": "4. For Loops",
      "language": "python",
      "description": "Use a for loop to print numbers 0 to 4, each on a new line.",
      "initialCode": "# Loop 0..4 with range(5) and print\n\n",
      "fullSolution": "for i in range(5):\n    print(i)\n",
      "expectedOutput": "0\n1\n2\n3\n4",
      "tutorial": "<p class=\"mb-4 text-gray-300\">for iterates directly over items or over a range of numbers. range(n) yields 0..n-1.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">for i in range(3):\n    print(i)</pre></div>"
    },
    {
      "id": 5,
      "title": "5. Lists Basics",
      "language": "python",
      "description": "Create a list of integers and print the second element.",
      "initialCode": "# Build [10,20,30,40,50] and print index 1\n\n",
      "fullSolution": "numbers = [10, 20, 30, 40, 50]\nprint(numbers[1])\n",
      "expectedOutput": "20",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Lists are ordered, zero-indexed, and mutable. Access by index and modify with methods like append() and pop().</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">nums = [10, 20, 30]\nprint(nums[1])  # 20\nnums.append(40)\nprint(nums)</pre></div>"
    },
    {
      "id": 6,
      "title": "6. Functions",
      "language": "python",
      "description": "Define a function greet(name) that prints Hello, <name>! and call it with 'Alice'.",
      "initialCode": "# Define greet(name) then call greet('Alice')\n\n",
      "fullSolution": "def greet(name):\n    print(f\"Hello, {name}!\")\n\ngreet('Alice')\n",
      "expectedOutput": "Hello, Alice!",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Define functions with def. Parameters are local names; return sends a value back to the caller.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">def greet(name):\n    return f\"Hello, {name}!\"\n\nprint(greet(\"World\"))</pre></div>"
    },
    {
      "id": 7,
      "title": "7. If / Else",
      "language": "python",
      "description": "Given x = 7, print Odd if x is odd, otherwise Even.",
      "initialCode": "x = 7\n# print Even or Odd\n\n",
      "fullSolution": "x = 7\nif x % 2 == 0:\n    print('Even')\nelse:\n    print('Odd')\n",
      "expectedOutput": "Odd",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Use if/elif/else to branch on conditions. Use % (modulo) to check divisibility.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">x = 7\nif x % 2 == 0:\n    print(\"Even\")\nelse:\n    print(\"Odd\")</pre></div>"
    },
    {
      "id": 8,
      "title": "8. Sum with range()",
      "language": "python",
      "description": "Compute and print the sum of numbers from 1 to 5.",
      "initialCode": "# Print sum 1..5\n\n",
      "fullSolution": "print(sum(range(1, 6)))\n",
      "expectedOutput": "15",
      "tutorial": "<p class=\"mb-4 text-gray-300\">sum() adds items of any iterable of numbers. Combine with range() for sequences of integers.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">total = sum(range(1, 6))\nprint(total)  # 15</pre></div>"
    },
    {
      "id": 9,
      "title": "9. Strings & f-Strings",
      "language": "python",
      "description": "Use an f-string to print 'Hello, Alice!'.",
      "initialCode": "name = 'Alice'\n# print Hello, Alice!\n\n",
      "fullSolution": "name = 'Alice'\nprint(f'Hello, {name}!')\n",
      "expectedOutput": "Hello, Alice!",
      "tutorial": "<p class=\"mb-4 text-gray-300\">f-strings embed expressions inside string literals using {name}. They are concise and readable.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">name = 'Alice'\nprint(f'Hello, {name}!')</pre></div>"
    },
    {
      "id": 10,
      "title": "10. Dictionaries",
      "language": "python",
      "description": "Create a dictionary of capital cities and print the capital of Germany.",
      "initialCode": "# Build dict and print capital_cities['Germany']\n\n",
      "fullSolution": "capital_cities = {\n    'England': 'London',\n    'Germany': 'Berlin',\n    'Japan': 'Tokyo'\n}\nprint(capital_cities['Germany'])\n",
      "expectedOutput": "Berlin",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Dictionaries store key/value pairs. Access values by key; add new keys by assignment.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">capitals = {\"England\": \"London\", \"Germany\": \"Berlin\"}\nprint(capitals[\"Germany\"])\ncapitals[\"Japan\"] = \"Tokyo\"</pre></div>"
    },
    {
      "id": 11,
      "title": "11. Boolean Logic",
      "language": "python",
      "description": "Given flags, print Access Granted if is_admin is True and user is active.",
      "initialCode": "is_admin = True\nis_active = True\n# print Access Granted if both True else Access Denied\n\n",
      "fullSolution": "is_admin = True\nis_active = True\nif is_admin and is_active:\n    print('Access Granted')\nelse:\n    print('Access Denied')\n",
      "expectedOutput": "Access Granted",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Combine logical conditions with and / or / not. Parentheses improve readability.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">is_admin = True\nis_active = True\nif is_admin and is_active:\n    print(\"Access Granted\")\nelse:\n    print(\"Access Denied\")</pre></div>"
    },
    {
      "id": 12,
      "title": "12. For-Each Over a List",
      "language": "python",
      "description": "Loop over names and print each one.",
      "initialCode": "names = ['Ana', 'Bo', 'Cy']\n# Print each on a new line\n\n",
      "fullSolution": "names = ['Ana', 'Bo', 'Cy']\nfor n in names:\n    print(n)\n",
      "expectedOutput": "Ana\nBo\nCy",
      "tutorial": "<p class=\"mb-4 text-gray-300\">for iterates directly over items or over a range of numbers. range(n) yields 0..n-1.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">for i in range(3):\n    print(i)</pre></div>"
    },
    {
      "id": 13,
      "title": "13. List Methods",
      "language": "python",
      "description": "Append 4 to the list and then pop it; print the final list.",
      "initialCode": "nums = [1, 2, 3]\n# Append then pop, print nums\n\n",
      "fullSolution": "nums = [1, 2, 3]\nnums.append(4)\nnums.pop()\nprint(nums)\n",
      "expectedOutput": "[1, 2, 3]",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Lists are ordered, zero-indexed, and mutable. Access by index and modify with methods like append() and pop().</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">nums = [10, 20, 30]\nprint(nums[1])  # 20\nnums.append(40)\nprint(nums)</pre></div>"
    },
    {
      "id": 14,
      "title": "14. String Methods",
      "language": "python",
      "description": "Make the string lowercase, then uppercase, printing each on its own line.",
      "initialCode": "s = 'Python'\n# Print lower then upper\n\n",
      "fullSolution": "s = 'Python'\nprint(s.lower())\nprint(s.upper())\n",
      "expectedOutput": "python\nPYTHON",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Common string methods: lower(), upper(), strip(), replace(), split(). They return new strings (immutable).</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">s = 'Python'\nprint(s.lower())\nprint(s.upper())</pre></div>"
    },
    {
      "id": 15,
      "title": "15. Continue in Loops",
      "language": "python",
      "description": "Print only odd numbers from 0..9 using continue.",
      "initialCode": "# Use continue to skip evens\n\n",
      "fullSolution": "for i in range(10):\n    if i % 2 == 0:\n        continue\n    print(i)\n",
      "expectedOutput": "1\n3\n5\n7\n9",
      "tutorial": "<p class=\"mb-4 text-gray-300\">continue skips the rest of the current loop iteration and moves on to the next.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">for i in range(10):\n    if i % 2 == 0:\n        continue\n    print(i)  # prints odds</pre></div>"
    },
    {
      "id": 16,
      "title": "16. Break in Loops",
      "language": "python",
      "description": "Loop from 0 and stop when i reaches 3. Print each number before breaking.",
      "initialCode": "# Break when i == 3\n\n",
      "fullSolution": "for i in range(10):\n    if i == 3:\n        break\n    print(i)\n",
      "expectedOutput": "0\n1\n2",
      "tutorial": "<p class=\"mb-4 text-gray-300\">break exits the nearest loop immediately.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">for i in range(10):\n    if i == 3:\n        break\n    print(i)  # 0,1,2</pre></div>"
    },
    {
      "id": 17,
      "title": "17. Max in a List",
      "language": "python",
      "description": "Find and print the maximum value in a list.",
      "initialCode": "numbers = [1, 44, 7, 99, 23, 42]\n# Print max\n\n",
      "fullSolution": "numbers = [1, 44, 7, 99, 23, 42]\nprint(max(numbers))\n",
      "expectedOutput": "99",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Built-ins like max(), min(), and sum() work with lists and other iterables of numbers.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">numbers = [1, 44, 7, 99, 23]\nprint(max(numbers))</pre></div>"
    },
    {
      "id": 18,
      "title": "18. Functions with Parameters",
      "language": "python",
      "description": "Define add(a, b) and print the result of add(3, 4).",
      "initialCode": "# Define add(a,b) -> a+b and print add(3,4)\n\n",
      "fullSolution": "def add(a, b):\n    return a + b\n\nprint(add(3, 4))\n",
      "expectedOutput": "7",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Functions can accept parameters and return computed results.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">def add(a, b):\n    return a + b\n\nprint(add(3, 4))  # 7</pre></div>"
    },
    {
      "id": 19,
      "title": "19. Classes & Methods",
      "language": "python",
      "description": "Create a Dog class with a bark() method that prints 'Woof!' and call it.",
      "initialCode": "# Define class Dog with bark() and call it\n\n",
      "fullSolution": "class Dog:\n    def bark(self):\n        print('Woof!')\n\nDog().bark()\n",
      "expectedOutput": "Woof!",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Define classes with methods. The first parameter of instance methods is conventionally named self and refers to the instance.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">class Dog:\n    def bark(self):\n        print('Woof!')\n\nDog().bark()</pre></div>"
    },
    {
      "id": 20,
      "title": "20. Inheritance",
      "language": "python",
      "description": "Create Animal -> Dog. Override speak() in Dog to print 'Woof!' and call it.",
      "initialCode": "# Define Animal.speak and Dog(Animal).speak printing Woof!\n\n",
      "fullSolution": "class Animal:\n    def speak(self):\n        pass\n\nclass Dog(Animal):\n    def speak(self):\n        print('Woof!')\n\nDog().speak()\n",
      "expectedOutput": "Woof!",
      "tutorial": "<p class=\"mb-4 text-gray-300\">A subclass inherits from a parent class and can override methods. Use super() to call the parent implementation when needed.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">class Animal:\n    def speak(self):\n        return \"...\"\n\nclass Dog(Animal):\n    def speak(self):\n        return \"Woof!\"\n\nprint(Dog().speak())</pre></div>"
    },
    {
      "id": 21,
      "title": "21. Enums",
      "language": "python",
      "description": "Create an enum Color with RED, GREEN, BLUE and print 'RED'.",
      "initialCode": "# Define enum Color and print Color.RED.name\n\n",
      "fullSolution": "from enum import Enum\n\nclass Color(Enum):\n    RED = 1\n    GREEN = 2\n    BLUE = 3\n\nprint(Color.RED.name)\n",
      "expectedOutput": "RED",
      "tutorial": "<p class=\"mb-4 text-gray-300\">The enum module lets you define named constants. Access by EnumName.MEMBER.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from enum import Enum\nclass Color(Enum):\n    RED = 1\n    GREEN = 2\n    BLUE = 3\n\nprint(Color.RED.name)  # \"RED\"</pre></div>"
    },
    {
      "id": 22,
      "title": "22. Slicing",
      "language": "python",
      "description": "Print the last three elements of the list each on a new line.",
      "initialCode": "nums = [1,2,3,4,5]\n# Print the last three with slicing\n\n",
      "fullSolution": "nums = [1,2,3,4,5]\nfor n in nums[-3:]:\n    print(n)\n",
      "expectedOutput": "3\n4\n5",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Slicing returns a sub-sequence: seq[start:end:step]. Negative indexes count from the end.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">nums = [1,2,3,4,5]\nprint(nums[-3:])  # last three</pre></div>"
    },
    {
      "id": 23,
      "title": "23. Iterate Dict (keys)",
      "language": "python",
      "description": "Use a for-loop to print all keys of the dictionary (one per line).",
      "initialCode": "m = {'England':'London','Germany':'Berlin','Japan':'Tokyo'}\n# Print each key on its own line\n\n",
      "fullSolution": "m = {'England':'London','Germany':'Berlin','Japan':'Tokyo'}\nfor k in m.keys():\n    print(k)\n",
      "expectedOutput": "England\nGermany\nJapan",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Iterate dict keys, values, or items with .keys(), .values(), .items(). The default iterates keys.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">person = {\"name\":\"Ada\",\"city\":\"London\"}\nfor k in person:\n    print(k)</pre></div>"
    },
    {
      "id": 24,
      "title": "24. Average of a List",
      "language": "python",
      "description": "Compute the average of [2, 4, 6, 8] and print it as a float.",
      "initialCode": "# Average of [2,4,6,8]\n\n",
      "fullSolution": "nums = [2,4,6,8]\nprint(sum(nums)/len(nums))\n",
      "expectedOutput": "5.0",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Compute an average by dividing the sum by the count. Convert to float if needed for decimal results.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">nums = [2,4,6,8]\nprint(sum(nums)/len(nums))  # 5.0</pre></div>"
    },
    {
      "id": 25,
      "title": "25. FizzBuzz (1..15)",
      "language": "python",
      "description": "Print numbers from 1 to 15 with Fizz/Buzz rules.",
      "initialCode": "# Implement FizzBuzz 1..15\n\n",
      "fullSolution": "for i in range(1, 16):\n    if i % 15 == 0:\n        print('FizzBuzz')\n    elif i % 3 == 0:\n        print('Fizz')\n    elif i % 5 == 0:\n        print('Buzz')\n    else:\n        print(i)\n",
      "expectedOutput": "1\n2\nFizz\n4\nBuzz\nFizz\n7\n8\nFizz\nBuzz\n11\nFizz\n13\n14\nFizzBuzz",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Use modulo to test divisibility by 3 and 5. Check 15 first to handle both.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">for i in range(1, 16):\n    if i % 15 == 0: print(\"FizzBuzz\")\n    elif i % 3 == 0: print(\"Fizz\")\n    elif i % 5 == 0: print(\"Buzz\")\n    else: print(i)</pre></div>"
    },
    {
      "id": 26,
      "title": "26. List Comprehensions",
      "language": "python",
      "description": "Build squares 0..4 and print the list.",
      "initialCode": "# squares = [i*i for i in range(5)] then print\n\n",
      "fullSolution": "squares = [i*i for i in range(5)]\nprint(squares)\n",
      "expectedOutput": "[0, 1, 4, 9, 16]",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Lists are ordered, zero-indexed, and mutable. Access by index and modify with methods like append() and pop().</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">nums = [10, 20, 30]\nprint(nums[1])  # 20\nnums.append(40)\nprint(nums)</pre></div>"
    },
    {
      "id": 27,
      "title": "27. Lambda/map/filter",
      "language": "python",
      "description": "Double [1,2,3] using map+lambda; print.",
      "initialCode": "# map(lambda x: x*2, nums)\n\n",
      "fullSolution": "nums = [1,2,3]\nprint(list(map(lambda x: x*2, nums)))\n",
      "expectedOutput": "[2, 4, 6]",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Use lambda for small anonymous functions. map() transforms; filter() keeps items where predicate is True.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">nums = [1,2,3]\ndoubled = list(map(lambda x: x*2, nums))\nevens = list(filter(lambda x: x%2==0, nums))\nprint(doubled)\nprint(evens)</pre></div>"
    },
    {
      "id": 28,
      "title": "28. Math Module",
      "language": "python",
      "description": "Print: Max: 42 and Sqrt: 8.0",
      "initialCode": "# Use max and math.sqrt\n\n",
      "fullSolution": "import math\nprint('Max:', max(25, 42))\nprint('Sqrt:', math.sqrt(64))\n",
      "expectedOutput": "Max: 42\nSqrt: 8.0",
      "tutorial": "<p class=\"mb-4 text-gray-300\">The math module provides functions like sqrt, floor, ceil, and constants like pi.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import math\nprint(\"Sqrt:\", math.sqrt(64))\nprint(\"Pi:\", math.pi)</pre></div>"
    },
    {
      "id": 29,
      "title": "29. String Join",
      "language": "python",
      "description": "Join ['Python','is','efficient!'] with spaces.",
      "initialCode": "# ' '.join(list)\n\n",
      "fullSolution": "print(' '.join(['Python','is','efficient!']))\n",
      "expectedOutput": "Python is efficient!",
      "tutorial": "<p class=\"mb-4 text-gray-300\">\" \".join(list_of_strings) concatenates with a separator. Remember join is a string method, not on lists.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">words = ['Python','is','efficient!']\nprint(' '.join(words))</pre></div>"
    },
    {
      "id": 30,
      "title": "30. super() in Constructors",
      "language": "python",
      "description": "Call parent __init__ and print both messages.",
      "initialCode": "class Animal:\n    def __init__(self, name):\n        print(f'Animal constructor called for: {name}')\n\nclass Dog(Animal):\n    def __init__(self, name):\n        # call parent with super()\n        \n        print('Dog constructor called.')\n\nDog('Fido')\n",
      "fullSolution": "class Animal:\n    def __init__(self, name):\n        print(f'Animal constructor called for: {name}')\n\nclass Dog(Animal):\n    def __init__(self, name):\n        super().__init__(name)\n        print('Dog constructor called.')\n\nDog('Fido')\n",
      "expectedOutput": "Animal constructor called for: Fido\nDog constructor called.",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Inside a subclass constructor, call super().__init__(...) to run parent initialization.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">class A:\n    def __init__(self):\n        print('A init')\nclass B(A):\n    def __init__(self):\n        super().__init__()\n        print('B init')\nB()</pre></div>"
    },
    {
      "id": 31,
      "title": "31. Properties (@property)",
      "language": "python",
      "description": "Use @property to expose a computed full_name; print it.",
      "initialCode": "class Person:\n    def __init__(self, first, last):\n        self.first = first\n        self.last = last\n    # add property full_name returning '<first> <last>'\n\n# print Person('Ada','Lovelace').full_name\n",
      "fullSolution": "class Person:\n    def __init__(self, first, last):\n        self.first = first\n        self.last = last\n    @property\n    def full_name(self):\n        return f\"{self.first} {self.last}\"\n\nprint(Person('Ada','Lovelace').full_name)\n",
      "expectedOutput": "Ada Lovelace",
      "tutorial": "<p class=\"mb-4 text-gray-300\">@property turns a method into a computed attribute accessed without parentheses.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">class Person:\n    def __init__(self, first, last):\n        self.first, self.last = first, last\n    @property\n    def full_name(self):\n        return f'{self.first} {self.last}'\nprint(Person('Ada','Lovelace').full_name)</pre></div>"
    },
    {
      "id": 32,
      "title": "32. @staticmethod",
      "language": "python",
      "description": "Add a static method cube(x) and print cube(3).",
      "initialCode": "class MathUtil:\n    # add staticmethod cube(x)\n\nprint(MathUtil.cube(3))\n",
      "fullSolution": "class MathUtil:\n    @staticmethod\n    def cube(x):\n        return x**3\n\nprint(MathUtil.cube(3))\n",
      "expectedOutput": "27",
      "tutorial": "<p class=\"mb-4 text-gray-300\">@staticmethod belongs to the class namespace and does not receive self or cls.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">class Math:\n    @staticmethod\n    def cube(x): return x**3\nprint(Math.cube(3))</pre></div>"
    },
    {
      "id": 33,
      "title": "33. @classmethod",
      "language": "python",
      "description": "Track created instances with a class counter; print 2 after creating two.",
      "initialCode": "class Counter:\n    total = 0\n    # implement classmethod create() that increments total and returns an instance\n\n# create two then print Counter.total\n",
      "fullSolution": "class Counter:\n    total = 0\n    def __init__(self):\n        pass\n    @classmethod\n    def create(cls):\n        cls.total += 1\n        return cls()\n\nCounter.create()\nCounter.create()\nprint(Counter.total)\n",
      "expectedOutput": "2",
      "tutorial": "<p class=\"mb-4 text-gray-300\">@classmethod receives the class (cls) as the first argument and is useful for alternative constructors.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">class C:\n    total = 0\n    @classmethod\n    def create(cls):\n        cls.total += 1\n        return cls()\nC.create(); C.create(); print(C.total)</pre></div>"
    },
    {
      "id": 34,
      "title": "34. Tuple Unpacking",
      "language": "python",
      "description": "Unpack (1,2,3) into a,b,c and print a and c on separate lines.",
      "initialCode": "# Unpack then print a and c\n\n",
      "fullSolution": "a,b,c = (1,2,3)\nprint(a)\nprint(c)\n",
      "expectedOutput": "1\n3",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Unpack iterables on the left-hand side to bind multiple names at once.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">a,b,c = (1,2,3)\nprint(a)\nprint(c)</pre></div>"
    },
    {
      "id": 35,
      "title": "35. Set Operations",
      "language": "python",
      "description": "Create sets and print union then intersection.",
      "initialCode": "# union then intersection\n\n",
      "fullSolution": "A={1,2,3}\nB={3,4}\nprint(A|B)\nprint(A&B)\n",
      "expectedOutput": "{1, 2, 3, 4}\n{3}",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Sets store unique elements and support union (|), intersection (&), and difference (-).</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">A={1,2,3}; B={3,4}\nprint(A|B)\nprint(A&B)</pre></div>"
    },
    {
      "id": 36,
      "title": "36. Try/Except",
      "language": "python",
      "description": "Catch ZeroDivisionError and print message.",
      "initialCode": "# try dividing by zero, catch and print message\n\n",
      "fullSolution": "try:\n    1/0\nexcept ZeroDivisionError:\n    print('Oops! Division by zero')\n",
      "expectedOutput": "Oops! Division by zero",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Wrap risky code in try/except. Catch specific exceptions first to handle them appropriately.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">try:\n    1/0\nexcept ZeroDivisionError:\n    print('Oops! Division by zero')</pre></div>"
    },
    {
      "id": 37,
      "title": "37. Else and Finally",
      "language": "python",
      "description": "Demonstrate try/except/else/finally; print 4 then Done.",
      "initialCode": "# compute 2+2 and print result in else, always print Done in finally\n\n",
      "fullSolution": "try:\n    r=2+2\nexcept Exception:\n    print('Error')\nelse:\n    print(r)\nfinally:\n    print('Done')\n",
      "expectedOutput": "4\nDone",
      "tutorial": "<p class=\"mb-4 text-gray-300\">In try/except, the else block runs if no exception occurred; finally always runs, success or failure.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">try:\n    r = 2+2\nexcept Exception:\n    print(\"Error\")\nelse:\n    print(r)\nfinally:\n    print(\"Done\")</pre></div>"
    },
    {
      "id": 38,
      "title": "38. Raise Exceptions",
      "language": "python",
      "description": "Raise ValueError for negative; catch and print Invalid.",
      "initialCode": "# define check(x) that raises ValueError for x<0; call with -1\n\n",
      "fullSolution": "def check(x):\n    if x<0:\n        raise ValueError('neg')\n\ntry:\n    check(-1)\nexcept ValueError:\n    print('Invalid')\n",
      "expectedOutput": "Invalid",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Wrap risky code in try/except. Catch specific exceptions first to handle them appropriately.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">try:\n    1/0\nexcept ZeroDivisionError:\n    print('Oops! Division by zero')</pre></div>"
    },
    {
      "id": 39,
      "title": "39. File I/O (write/read)",
      "language": "python",
      "description": "Write 'hello file' then read it back and print.",
      "initialCode": "# write to data.txt then read and print\n\n",
      "fullSolution": "with open('data.txt','w') as f:\n    f.write('hello file')\nwith open('data.txt') as f:\n    print(f.read())\n",
      "expectedOutput": "hello file",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Use with open(...) as f to read/write files safely. Files are closed automatically.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">with open('demo.txt','w') as f:\n    f.write('hello')\nwith open('demo.txt') as f:\n    print(f.read())</pre></div>"
    },
    {
      "id": 40,
      "title": "40. Context Managers",
      "language": "python",
      "description": "Use with to write then read two lines and print them.",
      "initialCode": "# write A and B lines to notes.txt, then read and print\n\n",
      "fullSolution": "with open('notes.txt','w') as f:\n    f.write('A\\nB')\nwith open('notes.txt') as f:\n    print(f.read())\n",
      "expectedOutput": "A\nB",
      "tutorial": "<p class=\"mb-4 text-gray-300\">with manages resources that need setup/teardown (file handles, locks, network connections).</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from contextlib import contextmanager\n@contextmanager\ndef tag(name):\n    print(f'<{name}>'); yield; print(f'</{name}>')\nwith tag('b'):\n    print('bold')</pre></div>"
    },
    {
      "id": 41,
      "title": "41. Sorting",
      "language": "python",
      "description": "Sort the list [3,1,2] ascending and print it.",
      "initialCode": "# sort then print\n\n",
      "fullSolution": "nums=[3,1,2]\nnums.sort()\nprint(nums)\n",
      "expectedOutput": "[1, 2, 3]",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Use sorted(iterable) for a new sorted list, or list.sort() to sort in place. key= controls the sort field.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">print(sorted([3,1,2]))  # [1,2,3]</pre></div>"
    },
    {
      "id": 42,
      "title": "42. Dict Comprehensions",
      "language": "python",
      "description": "Create a dict mapping numbers 1..3 to their squares and print it.",
      "initialCode": "# squares dict 1..3\n\n",
      "fullSolution": "print({i:i*i for i in range(1,4)})\n",
      "expectedOutput": "{1: 1, 2: 4, 3: 9}",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Dict comprehensions create dictionaries concisely: {k:v for k,v in ...}.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">{n: n*n for n in range(1,4)}</pre></div>"
    },
    {
      "id": 43,
      "title": "43. Generators",
      "language": "python",
      "description": "Create a generator that yields 1..3 and print each value.",
      "initialCode": "# define gen() yielding 1,2,3 then iterate\n\n",
      "fullSolution": "def gen():\n    yield 1\n    yield 2\n    yield 3\nfor x in gen():\n    print(x)\n",
      "expectedOutput": "1\n2\n3",
      "tutorial": "<p class=\"mb-4 text-gray-300\">yield produces a sequence lazily. Iterate over the generator like any iterable.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">def gen():\n    yield 1; yield 2; yield 3\nfor x in gen():\n    print(x)</pre></div>"
    },
    {
      "id": 44,
      "title": "44. JSON Basics",
      "language": "python",
      "description": "Parse a JSON string and print the value of name.",
      "initialCode": "# Use json.loads on the string to parse and print the name\n\n",
      "fullSolution": "import json\ns = '{\"name\": \"Ada\"}'\nobj = json.loads(s)\nprint(obj[\"name\"])\n",
      "expectedOutput": "Ada",
      "tutorial": "<p class=\"mb-4 text-gray-300\">json.loads parses a JSON string into Python objects; json.dumps serializes Python objects to JSON strings.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import json\ns = \"{\"name\": \"Ada\"}\"\nobj = json.loads(s)\nprint(obj[\"name\"])</pre></div>"
    },
    {
      "id": 45,
      "title": "45. Regular Expressions",
      "language": "python",
      "description": "Extract all digits from 'a1b2c3' and print each on a new line.",
      "initialCode": "# re.findall to get digits then print\n\n",
      "fullSolution": "import re\nfor d in re.findall(r'\\\\d','a1b2c3'):\n    print(d)\n",
      "expectedOutput": "1\n2\n3",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Use the re module for regular expressions. \\d matches digits; groups capture substrings for later use.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import re\nprint(re.findall(r'\\\\d', 'a1b2c3'))\n# Groups:\nm = re.search(r'^Hello\\s+(\\\\w+)$', 'Hello World')\nprint(m.group(1))  # World</pre></div>"
    },
    {
      "id": 46,
      "title": "46. enumerate()",
      "language": "python",
      "description": "Use enumerate to print index and value for ['a','b','c'].",
      "initialCode": "# print 0:a 1:b 2:c on new lines\n\n",
      "fullSolution": "for i,v in enumerate(['a','b','c']):\n    print(f'{i}:{v}')\n",
      "expectedOutput": "0:a\n1:b\n2:c",
      "tutorial": "<p class=\"mb-4 text-gray-300\">The enum module lets you define named constants. Access by EnumName.MEMBER.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from enum import Enum\nclass Color(Enum):\n    RED = 1\n    GREEN = 2\n    BLUE = 3\n\nprint(Color.RED.name)  # \"RED\"</pre></div>"
    },
    {
      "id": 47,
      "title": "47. Set Comprehension",
      "language": "python",
      "description": "Build a set of even numbers from 0..6 and print it.",
      "initialCode": "# even set 0..6\n\n",
      "fullSolution": "print({n for n in range(7) if n%2==0})\n",
      "expectedOutput": "{0, 2, 4, 6}",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Set comprehensions build sets; braces {} with an expression and optional condition.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">{n for n in range(7) if n % 2 == 0}</pre></div>"
    },
    {
      "id": 48,
      "title": "48. Regex Groups",
      "language": "python",
      "description": "Capture the word after 'Hello' in 'Hello World' and print it.",
      "initialCode": "# re.search group capture\n\n",
      "fullSolution": "import re\nm = re.search(r'^Hello\\s+(\\w+)$', 'Hello World')\nprint(m.group(1))\n",
      "expectedOutput": "World",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Use the re module for regular expressions. \\d matches digits; groups capture substrings for later use.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import re\nprint(re.findall(r'\\\\d', 'a1b2c3'))\n# Groups:\nm = re.search(r'^Hello\\s+(\\\\w+)$', 'Hello World')\nprint(m.group(1))  # World</pre></div>"
    },
    {
      "id": 49,
      "title": "49. isinstance()",
      "language": "python",
      "description": "Check if value is an int, a str, and an object; print three booleans on new lines.",
      "initialCode": "# x=5 then print the three checks\n\n",
      "fullSolution": "x=5\nprint(isinstance(x,int))\nprint(isinstance(x,str))\nprint(isinstance(x,object))\n",
      "expectedOutput": "True\nFalse\nTrue",
      "tutorial": "<p class=\"mb-4 text-gray-300\">isinstance(obj, type) checks an object's type (including subclass relationships).</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">x = 5\nprint(isinstance(x, int))\nprint(isinstance(x, str))\nprint(isinstance(x, object))</pre></div>"
    },
    {
      "id": 50,
      "title": "50. Course Review",
      "language": "python",
      "description": "Combine classes, lists, loops, and math: compute the average score of students.",
      "initialCode": "class Student:\n    def __init__(self, name, score):\n        self.name=name\n        self.score=score\n\nstudents=[Student('Alice',90),Student('Bob',80),Student('Charlie',100)]\n# compute and print average\n\n",
      "fullSolution": "class Student:\n    def __init__(self, name, score):\n        self.name=name\n        self.score=score\n\nstudents=[Student('Alice',90),Student('Bob',80),Student('Charlie',100)]\nprint(sum(s.score for s in students)/len(students))\n",
      "expectedOutput": "90.0",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Combine multiple concepts: classes, loops, and aggregations. Think in steps: represent data, iterate, and compute.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">class Student:\n    def __init__(self, name, score):\n        self.name, self.score = name, score\nstudents=[Student('A',90), Student('B',80)]\nprint(sum(s.score for s in students)/len(students))</pre></div>"
    },
    {
      "id": 51,
      "title": "51. Lambda + map",
      "language": "python",
      "description": "Use map with a lambda to double each number and print each on a new line.",
      "initialCode": "nums = [1,2,3]\n# Use map + lambda to double each and print each on a new line\n\n",
      "fullSolution": "nums = [1,2,3]\nfor x in map(lambda n: n*2, nums):\n    print(x)\n",
      "expectedOutput": "2\n4\n6",
      "tutorial": "<p class=\"mb-4 text-gray-300\">`map()` applies a function to every item of an iterable. Combine it with a `lambda` for concise transformations.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">nums = [1, 2, 3]\ndoubled = list(map(lambda x: x * 2, nums))\nprint(doubled) # [2, 4, 6]</pre></div>"
    },
    {
      "id": 52,
      "title": "52. Filter Evens",
      "language": "python",
      "description": "Filter even numbers from 0..6 and print each on a new line.",
      "initialCode": "nums = list(range(7))\n# Keep evens using filter + lambda and print each\n\n",
      "fullSolution": "nums = list(range(7))\nfor x in filter(lambda n: n % 2 == 0, nums):\n    print(x)\n",
      "expectedOutput": "0\n2\n4\n6",
      "tutorial": "<p class=\"mb-4 text-gray-300\">`filter()` creates an iterator from elements of an iterable for which a function returns true. It is often used with a `lambda` for the condition.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">nums = [1, 2, 3, 4]\nevens = list(filter(lambda x: x % 2 == 0, nums))\nprint(evens) # [2, 4]</pre></div>"
    },
    {
      "id": 53,
      "title": "53. zip() Pairs",
      "language": "python",
      "description": "Zip two lists and print pairs as N-letter on separate lines.",
      "initialCode": "a=[1,2,3]\nb=['a','b','c']\n# Print 1-a, 2-b, 3-c each on new lines\n\n",
      "fullSolution": "a=[1,2,3]\nb=['a','b','c']\nfor i,ch in zip(a,b):\n    print(f'{i}-{ch}')\n",
      "expectedOutput": "1-a\n2-b\n3-c",
      "tutorial": "<p class=\"mb-4 text-gray-300\">`zip()` aggregates elements from two or more iterables, creating an iterator that generates tuples of corresponding elements.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">nums = [1, 2]\nlets = [\"a\", \"b\"]\nprint(list(zip(nums, lets))) # [(1, \"a\"), (2, \"b\")]</pre></div>"
    },
    {
      "id": 54,
      "title": "54. Sort by Length",
      "language": "python",
      "description": "Sort words by length ascending and print each on a new line.",
      "initialCode": "words=['pear','fig','apple']\n# Sort by length (ascending) and print\n\n",
      "fullSolution": "words=['pear','fig','apple']\nfor w in sorted(words, key=len):\n    print(w)\n",
      "expectedOutput": "fig\npear\napple",
      "tutorial": "<p class=\"mb-4 text-gray-300\">The `sorted()` function can take a `key` argument. Provide `len` to sort an iterable of strings by their length.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">words = [\"pear\", \"fig\", \"apple\"]\nprint(sorted(words, key=len)) # ['fig', 'pear', 'apple']</pre></div>"
    },
    {
      "id": 55,
      "title": "55. Sort Dicts",
      "language": "python",
      "description": "Sort a list of dicts by age and print names in order.",
      "initialCode": "people=[{'name':'Bob','age':30},{'name':'Alice','age':25},{'name':'Eve','age':35}]\n# Sort by 'age' ascending and print names\n\n",
      "fullSolution": "people=[{'name':'Bob','age':30},{'name':'Alice','age':25},{'name':'Eve','age':35}]\nfor p in sorted(people, key=lambda x: x['age']):\n    print(p['name'])\n",
      "expectedOutput": "Alice\nBob\nEve",
      "tutorial": "<p class=\"mb-4 text-gray-300\">To sort a list of dictionaries, use a `lambda` function as the key to specify which dictionary value to sort by.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">people = [{'name': 'Bob', 'age': 30}, {'name': 'Alice', 'age': 25}]\nprint(sorted(people, key=lambda p: p['age']))</pre></div>"
    },
    {
      "id": 56,
      "title": "56. Extended Unpacking",
      "language": "python",
      "description": "Unpack first and last values, ignoring the middle.",
      "initialCode": "data=[1,2,3,4]\n# Unpack to a and b (first/last) then print a and b on new lines\n\n",
      "fullSolution": "data=[1,2,3,4]\na,*_,b = data\nprint(a)\nprint(b)\n",
      "expectedOutput": "1\n4",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Use an asterisk `*` to capture multiple items into a list during unpacking. This is often used to get the first/last items.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">nums = [1, 2, 3, 4]\nfirst, *middle, last = nums\nprint(first, last) # 1 4\nprint(middle) # [2, 3]</pre></div>"
    },
    {
      "id": 57,
      "title": "57. Closures",
      "language": "python",
      "description": "Return a function that adds a captured value and use it.",
      "initialCode": "def make_adder(n):\n    # return a function that adds n\n    pass\n\nadd5 = make_adder(5)\nprint(add5(10))\n",
      "fullSolution": "def make_adder(n):\n    def add(x):\n        return x + n\n    return add\n\nadd5 = make_adder(5)\nprint(add5(10))\n",
      "expectedOutput": "15",
      "tutorial": "<p class=\"mb-4 text-gray-300\">A closure is a function that remembers variables from the enclosing scope even after that scope has finished executing.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">def make_adder(n):\n    def adder(x):\n        return x + n\n    return adder\n\nadd_five = make_adder(5)\nprint(add_five(10)) # 15</pre></div>"
    },
    {
      "id": 58,
      "title": "58. Decorators",
      "language": "python",
      "description": "Write a decorator that uppercases a function's return value.",
      "initialCode": "# Implement @uppercase and decorate greet so it prints HELLO WORLD\n\n",
      "fullSolution": "def uppercase(fn):\n    def wrapper(*args, **kwargs):\n        return fn(*args, **kwargs).upper()\n    return wrapper\n\n@uppercase\ndef greet(name):\n    return f'hello {name}'\n\nprint(greet('world'))\n",
      "expectedOutput": "HELLO WORLD",
      "tutorial": "<p class=\"mb-4 text-gray-300\">A decorator is a function that takes another function as an argument, adds some functionality, and returns another function.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">def my_decorator(func):\n    def wrapper():\n        print(\"Something is happening before the function is called.\")\n        func()\n        print(\"Something is happening after the function is called.\")\n    return wrapper\n\n@my_decorator\ndef say_whee():\n    print(\"Whee!\")\n\nsay_whee()</pre></div>"
    },
    {
      "id": 59,
      "title": "59. Dataclasses",
      "language": "python",
      "description": "Define a simple dataclass and print its fields.",
      "initialCode": "from dataclasses import dataclass\n# Define Person(name:str, age:int) and print \"Ada:42\"\n\n",
      "fullSolution": "from dataclasses import dataclass\n\n@dataclass\nclass Person:\n    name: str\n    age: int\n\np = Person('Ada', 42)\nprint(f'{p.name}:{p.age}')\n",
      "expectedOutput": "Ada:42",
      "tutorial": "<p class=\"mb-4 text-gray-300\">A variable is a named reference to a value. Python infers types at runtime (dynamic typing).</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">my_number = 42\nname = \"Alice\"\npi = 3.14\nis_active = True\nprint(name, my_number)</pre></div>"
    },
    {
      "id": 60,
      "title": "60. @property",
      "language": "python",
      "description": "Create a computed property for rectangle area.",
      "initialCode": "class Rect:\n    def __init__(self, w, h):\n        self.w, self.h = w, h\n    # Define property area returning w*h\n\nr = Rect(4,5)\nprint(r.area)\n",
      "fullSolution": "class Rect:\n    def __init__(self, w, h):\n        self.w, self.h = w, h\n    @property\n    def area(self):\n        return self.w * self.h\n\nr = Rect(4,5)\nprint(r.area)\n",
      "expectedOutput": "20",
      "tutorial": "<p class=\"mb-4 text-gray-300\">@property turns a method into a computed attribute accessed without parentheses.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">class Person:\n    def __init__(self, first, last):\n        self.first, self.last = first, last\n    @property\n    def full_name(self):\n        return f'{self.first} {self.last}'\nprint(Person('Ada','Lovelace').full_name)</pre></div>"
    },
    {
      "id": 61,
      "title": "61. Type Hints",
      "language": "python",
      "description": "Add type hints to a simple function and call it.",
      "initialCode": "# Define add(a:int,b:int)->int and print add(3,4)\n\n",
      "fullSolution": "def add(a: int, b: int) -> int:\n    return a + b\n\nprint(add(3,4))\n",
      "expectedOutput": "7",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Type hints are a way to statically indicate the type of a value in your Python code. They are not enforced at runtime but can be checked by tools like mypy.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">def greet(name: str) -> str:\n    return \"Hello, \" + name\n\nprint(greet(\"World\"))</pre></div>"
    },
    {
      "id": 62,
      "title": "62. itertools.chain",
      "language": "python",
      "description": "Concatenate iterables lazily and print all values.",
      "initialCode": "import itertools\n# Chain [1,2] and [3,4] and print each\n\n",
      "fullSolution": "import itertools\nfor x in itertools.chain([1,2],[3,4]):\n    print(x)\n",
      "expectedOutput": "1\n2\n3\n4",
      "tutorial": "<p class=\"mb-4 text-gray-300\">`itertools.chain()` takes several iterables as arguments and returns a single iterator that produces the contents of all of them as if they came from a single sequence.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import itertools\n\nfor i in itertools.chain([1, 2], [\"a\", \"b\"]):\n    print(i)</pre></div>"
    },
    {
      "id": 63,
      "title": "63. groupby Counts",
      "language": "python",
      "description": "Group words by first letter and count.",
      "initialCode": "import itertools\nwords=['ant','ape','bat']\n# Print a:2 then b:1 (group by first letter)\n\n",
      "fullSolution": "import itertools\nwords=['ant','ape','bat']\nfor key, grp in itertools.groupby(sorted(words, key=lambda w: w[0]), key=lambda w: w[0]):\n    count = sum(1 for _ in grp)\n    print(f'{key}:{count}')\n",
      "expectedOutput": "a:2\nb:1",
      "tutorial": "<p class=\"mb-4 text-gray-300\">`itertools.groupby()` makes an iterator that returns consecutive keys and groups from the iterable. The input needs to be sorted on the same key function.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from itertools import groupby\n\nfor key, group in groupby(\"AAABBC\"): # Works on strings too\n    print(f'{key}: {list(group)}')</pre></div>"
    },
    {
      "id": 64,
      "title": "64. Counter",
      "language": "python",
      "description": "Use Counter to count letters in a word (preserve first-seen order).",
      "initialCode": "from collections import Counter\n# Count letters in 'banana' and print b:1, a:3, n:2 on new lines\n\n",
      "fullSolution": "from collections import Counter\nfor k,v in Counter('banana').items():\n    print(f'{k}:{v}')\n",
      "expectedOutput": "b:1\na:3\nn:2",
      "tutorial": "<p class=\"mb-4 text-gray-300\">`collections.Counter` is a dict subclass for counting hashable objects. It is an unordered collection where elements are stored as dictionary keys and their counts are stored as dictionary values.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from collections import Counter\n\nc = Counter(\"gallahad\")\nprint(c) # Counter({'a': 3, 'l': 2, 'g': 1, 'h': 1, 'd': 1})</pre></div>"
    },
    {
      "id": 65,
      "title": "65. defaultdict",
      "language": "python",
      "description": "Group values by key without pre-initializing lists.",
      "initialCode": "from collections import defaultdict\n# Append two reds and print the red count (2)\n\n",
      "fullSolution": "from collections import defaultdict\nd = defaultdict(list)\nd['red'].append('apple')\nd['blue'].append('sky')\nd['red'].append('cherry')\nprint(len(d['red']))\n",
      "expectedOutput": "2",
      "tutorial": "<p class=\"mb-4 text-gray-300\">`collections.defaultdict` is a subclass of `dict` that calls a factory function to supply missing values.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from collections import defaultdict\n\nd = defaultdict(int) # 0 is the default for int()\nprint(d[\"missing_key\"]) # prints 0</pre></div>"
    },
    {
      "id": 66,
      "title": "66. deque",
      "language": "python",
      "description": "Use deque for fast appends/pops on both ends.",
      "initialCode": "from collections import deque\n# Start with [1,2], appendleft(0), append(3), print list(d)\n\n",
      "fullSolution": "from collections import deque\nd = deque([1,2])\nd.appendleft(0)\nd.append(3)\nprint(list(d))\n",
      "expectedOutput": "[0, 1, 2, 3]",
      "tutorial": "<p class=\"mb-4 text-gray-300\">`collections.deque` is a list-like container with fast appends and pops on either end.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from collections import deque\n\nd = deque([\"task2\", \"task3\"])\nd.appendleft(\"task1\")\nd.append(\"task4\")\nprint(d.popleft()) # task1</pre></div>"
    },
    {
      "id": 67,
      "title": "67. namedtuple",
      "language": "python",
      "description": "Create a lightweight tuple-like object with named fields.",
      "initialCode": "from collections import namedtuple\n# Define Point(x,y) and print sum of (2,3)\n\n",
      "fullSolution": "from collections import namedtuple\nPoint = namedtuple('Point', 'x y')\np = Point(2,3)\nprint(p.x + p.y)\n",
      "expectedOutput": "5",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Unpack iterables on the left-hand side to bind multiple names at once.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">a,b,c = (1,2,3)\nprint(a)\nprint(c)</pre></div>"
    },
    {
      "id": 68,
      "title": "68. contextmanager",
      "language": "python",
      "description": "Implement a simple context manager using @contextmanager.",
      "initialCode": "from contextlib import contextmanager\n# Print enter, work, exit in order using a context manager\n\n",
      "fullSolution": "from contextlib import contextmanager\n@contextmanager\ndef myctx():\n    print('enter')\n    try:\n        yield\n    finally:\n        print('exit')\n\nwith myctx():\n    print('work')\n",
      "expectedOutput": "enter\nwork\nexit",
      "tutorial": "<p class=\"mb-4 text-gray-300\">The `@contextmanager` decorator lets you build a context manager from a simple generator function, automatically handling the `__enter__` and `__exit__` parts.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from contextlib import contextmanager\n\n@contextmanager\ndef managed_resource(*args, **kwds):\n    print(\"Acquiring resource\")\n    yield\n    print(\"Releasing resource\")\n\nwith managed_resource():\n    print(\"Doing work\")</pre></div>"
    },
    {
      "id": 69,
      "title": "69. suppress",
      "language": "python",
      "description": "Ignore specific exceptions and continue.",
      "initialCode": "from contextlib import suppress\n# Suppress ZeroDivisionError then print kept\n\n",
      "fullSolution": "from contextlib import suppress\nwith suppress(ZeroDivisionError):\n    1/0\nprint('kept')\n",
      "expectedOutput": "kept",
      "tutorial": "<p class=\"mb-4 text-gray-300\">`contextlib.suppress` is a context manager to selectively ignore specified exceptions.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from contextlib import suppress\n\nwith suppress(FileNotFoundError):\n    with open(\"non_existent_file.txt\") as f:\n        print(\"This will not print\")\n\nprint(\"Program continues without crashing\")</pre></div>"
    },
    {
      "id": 70,
      "title": "70. pathlib",
      "language": "python",
      "description": "Write then read a small text file using pathlib.",
      "initialCode": "from pathlib import Path\n# Write 'hi' to note.txt then read and print it\n\n",
      "fullSolution": "from pathlib import Path\np = Path('note.txt')\np.write_text('hi')\nprint(p.read_text())\n",
      "expectedOutput": "hi",
      "tutorial": "<p class=\"mb-4 text-gray-300\">The `pathlib` module offers classes representing filesystem paths with semantics appropriate for different operating systems.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from pathlib import Path\n\np = Path(\"my_file.txt\")\np.write_text(\"Hello from pathlib!\")\nprint(p.read_text())</pre></div>"
    },
    {
      "id": 71,
      "title": "71. JSON dumps",
      "language": "python",
      "description": "Serialize a dict to a compact JSON string.",
      "initialCode": "import json\n# Dump {'a':1,'b':2} without spaces and print\n\n",
      "fullSolution": "import json\ns = json.dumps({'a':1,'b':2}, separators=(',',':'))\nprint(s)\n",
      "expectedOutput": "{\"a\":1,\"b\":2}",
      "tutorial": "<p class=\"mb-4 text-gray-300\">`json.dumps()` serializes a Python object to a JSON formatted `str`.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import json\n\ndata = {\"name\": \"John\", \"age\": 30}\njson_string = json.dumps(data, indent=2)\nprint(json_string)</pre></div>"
    },
    {
      "id": 72,
      "title": "72. CSV write/read",
      "language": "python",
      "description": "Write a tiny CSV then read it back and print a value.",
      "initialCode": "import csv\n# Write rows ['x','y'] and ['1','2'] to data.csv, read and print 2\n\n",
      "fullSolution": "import csv\nwith open('data.csv','w', newline='') as f:\n    w = csv.writer(f)\n    w.writerow(['x','y'])\n    w.writerow(['1','2'])\nwith open('data.csv') as f:\n    r = csv.reader(f)\n    header = next(r)\n    row = next(r)\n    print(row[1])\n",
      "expectedOutput": "2",
      "tutorial": "<p class=\"mb-4 text-gray-300\">The `csv` module implements classes to read and write tabular data in CSV format.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import csv, io\n\noutput = io.StringIO()\nwriter = csv.writer(output)\nwriter.writerow([\"name\", \"age\"])\nwriter.writerow([\"Alice\", 25])\nprint(output.getvalue())</pre></div>"
    },
    {
      "id": 73,
      "title": "73. Regex Substitution",
      "language": "python",
      "description": "Replace all digits with # and print the result.",
      "initialCode": "import re\n# Replace digits in 'a1b2' with '#' and print\n\n",
      "fullSolution": "import re\nprint(re.sub(r'\\\\d', '#', 'a1b2'))\n",
      "expectedOutput": "a#b#",
      "tutorial": "<p class=\"mb-4 text-gray-300\">`re.sub()` returns the string obtained by replacing the leftmost non-overlapping occurrences of pattern in string by the replacement `repl`.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import re\n\nprint(re.sub(r\"\\d+\", \"#\", \"There are 12 apples and 34 oranges.\"))</pre></div>"
    },
    {
      "id": 74,
      "title": "74. datetime Format",
      "language": "python",
      "description": "Parse an ISO date and print a different format.",
      "initialCode": "from datetime import datetime\n# Parse '2023-01-02' and print '2023/01/02'\n\n",
      "fullSolution": "from datetime import datetime\nd = datetime.fromisoformat('2023-01-02')\nprint(d.strftime('%Y/%m/%d'))\n",
      "expectedOutput": "2023/01/02",
      "tutorial": "<p class=\"mb-4 text-gray-300\">The `datetime` module supplies classes for manipulating dates and times.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from datetime import datetime\n\nnow = datetime.now()\nprint(now.strftime(\"%Y-%m-%d %H:%M:%S\"))</pre></div>"
    },
    {
      "id": 75,
      "title": "75. Logging",
      "language": "python",
      "description": "Configure logging to print a simple INFO message.",
      "initialCode": "import logging\n# Configure to print 'INFO:Ready' and log it\n\n",
      "fullSolution": "import logging\nlogging.basicConfig(level=logging.INFO, format='%(levelname)s:%(message)s')\nlogging.info('Ready')\n",
      "expectedOutput": "INFO:Ready",
      "tutorial": "<p class=\"mb-4 text-gray-300\">The `logging` module defines functions and classes which implement a flexible event logging system for applications and libraries.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import logging\n\nlogging.basicConfig(level=logging.INFO)\nlogging.info(\"This is an info message.\")</pre></div>"
    },
    {
      "id": 76,
      "title": "76. *args",
      "language": "python",
      "description": "Use *args to accept a variable number of arguments.",
      "initialCode": "# Define f(*args) printing len(args); call f(1,2,3)\n\n",
      "fullSolution": "def f(*args):\n    print(len(args))\n\nf(1,2,3)\n",
      "expectedOutput": "3",
      "tutorial": "<p class=\"mb-4 text-gray-300\">The special syntax `*args` in function definitions is used to pass a variable number of non-keyword arguments to a function.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">def my_sum(*numbers):\n    return sum(numbers)\n\nprint(my_sum(1, 2, 3, 4)) # 10</pre></div>"
    },
    {
      "id": 77,
      "title": "77. functools.partial",
      "language": "python",
      "description": "Create a function with one argument pre-filled.",
      "initialCode": "from functools import partial\n# Make add5 so add5(7) == 12 and print it\n\n",
      "fullSolution": "from functools import partial\n\ndef add(a,b):\n    return a+b\n\nadd5 = partial(add, 5)\nprint(add5(7))\n",
      "expectedOutput": "12",
      "tutorial": "<p class=\"mb-4 text-gray-300\">`functools.partial` allows you to \"freeze\" some portion of a function's arguments and/or keywords, resulting in a new object with a simplified signature.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from functools import partial\n\nbasetwo = partial(int, base=2)\nprint(basetwo(\"10010\")) # 18</pre></div>"
    },
    {
      "id": 78,
      "title": "78. lru_cache",
      "language": "python",
      "description": "Memoize an expensive function and reuse results.",
      "initialCode": "from functools import lru_cache\n# Memoize fib and print fib(10)\n\n",
      "fullSolution": "from functools import lru_cache\n\n@lru_cache(maxsize=None)\ndef fib(n):\n    return n if n<2 else fib(n-1)+fib(n-2)\n\nprint(fib(10))\n",
      "expectedOutput": "55",
      "tutorial": "<p class=\"mb-4 text-gray-300\">`functools.lru_cache` is a decorator to wrap a function with a memoizing callable that saves up to the `maxsize` most recent calls.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from functools import lru_cache\n\n@lru_cache(maxsize=None)\ndef fib(n):\n    if n < 2: return n\n    return fib(n-1) + fib(n-2)\n\nprint(fib(10)) # 55</pre></div>"
    },
    {
      "id": 79,
      "title": "79. Custom Ordering (__lt__)",
      "language": "python",
      "description": "Implement __lt__ to make a class sortable.",
      "initialCode": "# Define Box with value and __lt__ then sort [3,1,2] boxes and print values\n\n",
      "fullSolution": "class Box:\n    def __init__(self, v):\n        self.v = v\n    def __lt__(self, other):\n        return self.v < other.v\n\nboxes = [Box(3), Box(1), Box(2)]\nfor b in sorted(boxes):\n    print(b.v)\n",
      "expectedOutput": "1\n2\n3",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Implementing the `__lt__` (less than) rich comparison method allows instances of your class to be sorted naturally.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">class Person:\n    def __init__(self, name, age):\n        self.name, self.age = name, age\n    def __lt__(self, other):\n        return self.age < other.age\n\np1 = Person(\"Alice\", 25)\np2 = Person(\"Bob\", 30)\nprint(p1 < p2) # True</pre></div>"
    },
    {
      "id": 80,
      "title": "80. __str__",
      "language": "python",
      "description": "Customize string representation for a class.",
      "initialCode": "# Make Person print as Person(Alice)\n\n",
      "fullSolution": "class Person:\n    def __init__(self, name):\n        self.name = name\n    def __str__(self):\n        return f'Person({self.name})'\n\nprint(Person('Alice'))\n",
      "expectedOutput": "Person(Alice)",
      "tutorial": "<p class=\"mb-4 text-gray-300\">The `__str__` method should return a \"user-friendly\" string representation of the object, which is what `print()` and `str()` will display.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">class Person:\n    def __init__(self, name):\n        self.name = name\n    def __str__(self):\n        return f\"Person: {self.name}\"\n\nprint(Person(\"Alice\"))</pre></div>"
    },
    {
      "id": 81,
      "title": "81. Ordered Dataclass",
      "language": "python",
      "description": "Make dataclass orderable and compare two instances.",
      "initialCode": "from dataclasses import dataclass\n# Make Item(order=True) and print Item(5) < Item(7)\n\n",
      "fullSolution": "from dataclasses import dataclass\n\n@dataclass(order=True)\nclass Item:\n    price: int\n\nprint(Item(5) < Item(7))\n",
      "expectedOutput": "True",
      "tutorial": "<p class=\"mb-4 text-gray-300\">A variable is a named reference to a value. Python infers types at runtime (dynamic typing).</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">my_number = 42\nname = \"Alice\"\npi = 3.14\nis_active = True\nprint(name, my_number)</pre></div>"
    },
    {
      "id": 82,
      "title": "82. itertools.product",
      "language": "python",
      "description": "Cartesian product of two lists.",
      "initialCode": "import itertools\n# Print 1a,1b,2a,2b each on new lines\n\n",
      "fullSolution": "import itertools\nfor a,b in itertools.product([1,2], ['a','b']):\n    print(f'{a}{b}')\n",
      "expectedOutput": "1a\n1b\n2a\n2b",
      "tutorial": "<p class=\"mb-4 text-gray-300\">`itertools.product()` provides the cartesian product of input iterables.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import itertools\n\nfor p in itertools.product(\"AB\", \"12\"):\n    print(\"\".join(p)) # A1, A2, B1, B2</pre></div>"
    },
    {
      "id": 83,
      "title": "83. permutations",
      "language": "python",
      "description": "Generate all length-2 permutations of 'abc'.",
      "initialCode": "import itertools\n# Print: ab, ac, ba, bc, ca, cb (each on new line)\n\n",
      "fullSolution": "import itertools\nfor a,b in itertools.permutations('abc', 2):\n    print(a+b)\n",
      "expectedOutput": "ab\nac\nba\nbc\nca\ncb",
      "tutorial": "<p class=\"mb-4 text-gray-300\">`itertools.permutations()` returns successive r-length permutations of elements in an iterable.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import itertools\n\nprint(list(itertools.permutations(\"ABC\", 2)))</pre></div>"
    },
    {
      "id": 84,
      "title": "84. accumulate",
      "language": "python",
      "description": "Produce running totals and print them.",
      "initialCode": "import itertools\n# Accumulate sums over [1,2,3] and print each\n\n",
      "fullSolution": "import itertools\nfor x in itertools.accumulate([1,2,3]):\n    print(x)\n",
      "expectedOutput": "1\n3\n6",
      "tutorial": "<p class=\"mb-4 text-gray-300\">`itertools.accumulate()` makes an iterator that returns accumulated sums, or accumulated results of other binary functions.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import itertools\n\nprint(list(itertools.accumulate([1, 2, 3, 4]))) # [1, 3, 6, 10]</pre></div>"
    },
    {
      "id": 85,
      "title": "85. Exception Chaining",
      "language": "python",
      "description": "Raise from another exception and show the cause type.",
      "initialCode": "# Print ValueError by raising RuntimeError from ValueError\n\n",
      "fullSolution": "try:\n    try:\n        raise ValueError('x')\n    except ValueError as e:\n        raise RuntimeError('wrap') from e\nexcept Exception as e:\n    print(type(e.__cause__).__name__)\n",
      "expectedOutput": "ValueError",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Wrap risky code in try/except. Catch specific exceptions first to handle them appropriately.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">try:\n    1/0\nexcept ZeroDivisionError:\n    print('Oops! Division by zero')</pre></div>"
    },
    {
      "id": 86,
      "title": "86. threading + Lock",
      "language": "python",
      "description": "Use two threads to append values safely, then sum.",
      "initialCode": "import threading\n# Start two threads appending 1 and 2 (with a lock) then print the sum 3\n\n",
      "fullSolution": "import threading\nlock = threading.Lock()\nvals = []\n\ndef add(v):\n    with lock:\n        vals.append(v)\n\nt1 = threading.Thread(target=add, args=(1,))\nt2 = threading.Thread(target=add, args=(2,))\nt1.start(); t2.start(); t1.join(); t2.join()\nprint(sum(vals))\n",
      "expectedOutput": "3",
      "tutorial": "<p class=\"mb-4 text-gray-300\">The `threading` module provides a way to create and manage threads. A `Lock` is a synchronization primitive that is not owned by a particular thread when locked.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import threading\n\nlock = threading.Lock()\n\ndef critical_section():\n    with lock:\n        print(\"Critical section accessed\")\n\ncritical_section()</pre></div>"
    },
    {
      "id": 87,
      "title": "87. ThreadPoolExecutor",
      "language": "python",
      "description": "Submit tasks and collect results in order.",
      "initialCode": "from concurrent.futures import ThreadPoolExecutor\n# Submit squares 1..3 and print results 1,4,9 on new lines\n\n",
      "fullSolution": "from concurrent.futures import ThreadPoolExecutor\nwith ThreadPoolExecutor(max_workers=3) as ex:\n    futs = [ex.submit(lambda x: x*x, i) for i in (1,2,3)]\n    for f in futs:\n        print(f.result())\n",
      "expectedOutput": "1\n4\n9",
      "tutorial": "<p class=\"mb-4 text-gray-300\">`concurrent.futures.ThreadPoolExecutor` provides a high-level interface for asynchronously executing callables in a pool of threads.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from concurrent.futures import ThreadPoolExecutor\n\nwith ThreadPoolExecutor(max_workers=1) as executor:\n    future = executor.submit(pow, 2, 5)\n    print(future.result()) # 32</pre></div>"
    },
    {
      "id": 88,
      "title": "88. asyncio.gather",
      "language": "python",
      "description": "Run async tasks concurrently and print results.",
      "initialCode": "import asyncio\n# Define async f(x)->2*x; gather for 1,2,3 and print results\n\n",
      "fullSolution": "import asyncio\nasync def f(x):\n    return 2*x\nasync def main():\n    res = await asyncio.gather(f(1), f(2), f(3))\n    for v in res:\n        print(v)\nasyncio.run(main())\n",
      "expectedOutput": "2\n4\n6",
      "tutorial": "<p class=\"mb-4 text-gray-300\">`asyncio` is a library to write concurrent code using the `async/await` syntax. `asyncio.gather` runs awaitable objects concurrently.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import asyncio\n\nasync def main():\n    print(await asyncio.gather(asyncio.sleep(1, result=\"Done\")))\n\nasyncio.run(main())</pre></div>"
    },
    {
      "id": 89,
      "title": "89. glob",
      "language": "python",
      "description": "Create files and match them with glob pattern.",
      "initialCode": "import glob\n# Create a.txt and b.txt then glob and print names sorted\n\n",
      "fullSolution": "import glob\nopen('a.txt','w').close()\nopen('b.txt','w').close()\nfor name in sorted(glob.glob('*.txt')):\n    print(name)\n",
      "expectedOutput": "a.txt\nb.txt",
      "tutorial": "<p class=\"mb-4 text-gray-300\">The `glob` module finds all the pathnames matching a specified pattern according to the rules used by the Unix shell.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import glob\n\n# This example won't run here, but shows the concept.\n# open(\"a.txt\", \"w\"); open(\"b.log\", \"w\")\n# print(glob.glob(\"*.txt\")) # ['a.txt']</pre></div>"
    },
    {
      "id": 90,
      "title": "90. decimal",
      "language": "python",
      "description": "Exact decimal arithmetic for financial values.",
      "initialCode": "from decimal import Decimal\n# Print Decimal('0.1')+Decimal('0.2')\n\n",
      "fullSolution": "from decimal import Decimal\nprint(Decimal('0.1') + Decimal('0.2'))\n",
      "expectedOutput": "0.3",
      "tutorial": "<p class=\"mb-4 text-gray-300\">The `decimal` module provides a `Decimal` datatype for decimal floating-point arithmetic, which is useful for financial applications.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from decimal import Decimal\n\nprint(Decimal(\"0.1\") + Decimal(\"0.2\")) # 0.3</pre></div>"
    },
    {
      "id": 91,
      "title": "91. fractions",
      "language": "python",
      "description": "Do rational arithmetic with exact fractions.",
      "initialCode": "from fractions import Fraction\n# Print Fraction(1,3)+Fraction(1,6)\n\n",
      "fullSolution": "from fractions import Fraction\nprint(Fraction(1,3) + Fraction(1,6))\n",
      "expectedOutput": "1/2",
      "tutorial": "<p class=\"mb-4 text-gray-300\">The `fractions` module provides support for rational number arithmetic.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from fractions import Fraction\n\nprint(Fraction(1, 3) + Fraction(1, 3)) # 2/3</pre></div>"
    },
    {
      "id": 92,
      "title": "92. bisect_left",
      "language": "python",
      "description": "Binary search for insertion position.",
      "initialCode": "import bisect\n# Find insertion index of 3 in [1,2,4,5] using bisect_left and print\n\n",
      "fullSolution": "import bisect\nprint(bisect.bisect_left([1,2,4,5], 3))\n",
      "expectedOutput": "2",
      "tutorial": "<p class=\"mb-4 text-gray-300\">The `bisect` module provides support for maintaining a list in sorted order without having to sort the list after each insertion.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import bisect\n\nitems = [1, 2, 4]\nbisect.insort(items, 3)\nprint(items) # [1, 2, 3, 4]</pre></div>"
    },
    {
      "id": 93,
      "title": "93. heapq",
      "language": "python",
      "description": "Use a min-heap to pop the smallest item.",
      "initialCode": "import heapq\n# Push 3,1,2; pop and print the smallest\n\n",
      "fullSolution": "import heapq\nh=[]\nheapq.heappush(h,3); heapq.heappush(h,1); heapq.heappush(h,2)\nprint(heapq.heappop(h))\n",
      "expectedOutput": "1",
      "tutorial": "<p class=\"mb-4 text-gray-300\">The `heapq` module provides an implementation of the min-heap queue algorithm.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import heapq\n\nh = [3, 1, 4, 1, 5, 9, 2]\nheapq.heapify(h)\nprint(heapq.heappop(h)) # 1</pre></div>"
    },
    {
      "id": 94,
      "title": "94. statistics.mean",
      "language": "python",
      "description": "Compute the mean of a small list.",
      "initialCode": "import statistics\n# Print mean of [1,2,3]\n\n",
      "fullSolution": "import statistics\nprint(statistics.mean([1,2,3]))\n",
      "expectedOutput": "2",
      "tutorial": "<p class=\"mb-4 text-gray-300\">The `statistics` module provides functions for calculating mathematical statistics of numeric data.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import statistics\n\nprint(statistics.mean([1, 2, 3, 4, 4])) # 2.8</pre></div>"
    },
    {
      "id": 95,
      "title": "95. Slice Assignment",
      "language": "python",
      "description": "Replace a slice of a list in-place.",
      "initialCode": "letters=['a','b','c']\n# Replace letters[1:3] with ['X'] then print letters\n\n",
      "fullSolution": "letters=['a','b','c']\nletters[1:3] = ['X']\nprint(letters)\n",
      "expectedOutput": "['a', 'X']",
      "tutorial": "<p class=\"mb-4 text-gray-300\">You can assign to a slice of a list to replace, remove, or insert elements.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">a = [1, 2, 3, 4]\na[1:3] = [8, 9, 10]\nprint(a) # [1, 8, 9, 10, 4]</pre></div>"
    },
    {
      "id": 96,
      "title": "96. OrderedDict",
      "language": "python",
      "description": "Preserve insertion order of keys explicitly.",
      "initialCode": "from collections import OrderedDict\n# Create OrderedDict and print keys in order b then a\n\n",
      "fullSolution": "from collections import OrderedDict\nd = OrderedDict([('b',2),('a',1)])\nfor k in d.keys():\n    print(k)\n",
      "expectedOutput": "b\na",
      "tutorial": "<p class=\"mb-4 text-gray-300\">`collections.OrderedDict` is a dict subclass that remembers the order that keys were first inserted. (Note: standard dicts in Python 3.7+ also preserve insertion order.)</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from collections import OrderedDict\n\nd = OrderedDict.fromkeys(\"abcde\")\nd.move_to_end(\"b\")\nprint(\"\".join(d.keys())) # acdeb</pre></div>"
    },
    {
      "id": 97,
      "title": "97. frozenset",
      "language": "python",
      "description": "Use an immutable set and test membership.",
      "initialCode": "# Create frozenset({1,2,3}) and print if 2 in it\n\n",
      "fullSolution": "s = frozenset({1,2,3})\nprint(2 in s)\n",
      "expectedOutput": "True",
      "tutorial": "<p class=\"mb-4 text-gray-300\">`frozenset` is an immutable version of `set`. Since it is hashable, it can be used as a dictionary key or as an element of another set.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">fs = frozenset([1, 2, 3])\n# fs.add(4) would raise an AttributeError</pre></div>"
    },
    {
      "id": 98,
      "title": "98. Sort by Last Char",
      "language": "python",
      "description": "Sort words by their last character in descending order.",
      "initialCode": "words=['ab','ba','aa']\n# Sort by last char descending and print each on new lines\n\n",
      "fullSolution": "words=['ab','ba','aa']\nfor w in sorted(words, key=lambda s: s[-1], reverse=True):\n    print(w)\n",
      "expectedOutput": "ab\nba\naa",
      "tutorial": "<p class=\"mb-4 text-gray-300\">You can provide a `lambda` to the `key` argument of `sorted` to implement custom sorting logic, such as sorting by the last character of a string.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">words = [\"apple\", \"fig\", \"banana\"]\nprint(sorted(words, key=lambda w: w[-1]))</pre></div>"
    },
    {
      "id": 99,
      "title": "99. Custom Iterator",
      "language": "python",
      "description": "Implement a simple iterator that yields 1..3.",
      "initialCode": "# Make a class that implements __iter__ and __next__ to yield 1,2,3 then StopIteration\n\n",
      "fullSolution": "class OneToThree:\n    def __init__(self):\n        self.cur = 1\n    def __iter__(self):\n        return self\n    def __next__(self):\n        if self.cur <= 3:\n            v = self.cur\n            self.cur += 1\n            return v\n        raise StopIteration\n\nfor x in OneToThree():\n    print(x)\n",
      "expectedOutput": "1\n2\n3",
      "tutorial": "<p class=\"mb-4 text-gray-300\">To create a custom iterator, a class needs to implement the `__iter__()` and `__next__()` methods.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">class UpToThree:\n    def __init__(self):\n        self.count = 1\n    def __iter__(self):\n        return self\n    def __next__(self):\n        if self.count > 3: raise StopIteration\n        val = self.count\n        self.count += 1\n        return val\n\nprint(list(UpToThree())) # [1, 2, 3]</pre></div>"
    },
    {
      "id": 100,
      "title": "100. Capstone: Top Student",
      "language": "python",
      "description": "Parse JSON of students and print the top-scoring student's name.",
      "initialCode": "import json\n# Given the JSON string s below, parse it and print the top student's name\n# by score.\n\ns = '[{\"name\":\"Alice\",\"score\":90},{\"name\":\"Bob\",\"score\":80},{\"name\":\"Charlie\",\"score\":100}]'\n# Your code here\n\n",
      "fullSolution": "import json\ns = '[{\"name\":\"Alice\",\"score\":90},{\"name\":\"Bob\",\"score\":80},{\"name\":\"Charlie\",\"score\":100}]'\nstudents = json.loads(s)\nprint(max(students, key=lambda d: d['score'])['name'])\n",
      "expectedOutput": "Charlie",
      "tutorial": "<p class=\"mb-4 text-gray-300\">This capstone combines several concepts: JSON parsing, finding the maximum item in a list of dictionaries using a lambda function as the key.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import json\ns = '[{\"name\":\"Alice\",\"score\":90},{\"name\":\"Charlie\",\"score\":100}]'\nstudents = json.loads(s)\nrichest = max(students, key=lambda s: s[\"score\"])\nprint(richest[\"name\"]) # Charlie</pre></div>"
    }
  ]
}