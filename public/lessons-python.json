{
  "mode": "replace",
  "lessons": [
    {
      "id": 1,
      "title": "1. Hello, World!",
      "language": "python",
      "description": "The classic first step. Print exactly Hello, World!",
      "initialCode": "# Your code here. Print \"Hello, World!\"\n\n",
      "fullSolution": "print(\"Hello, World!\")\n",
      "expectedOutput": "Hello, World!",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Use the built-in print() function to write text to the console. Strings must be quoted.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">print(\"Hello there!\")\nprint(42)</pre></div>",
      "tags": [
        "Beginner",
        "Basics",
        "Functions"
      ]
    },
    {
      "id": 2,
      "title": "2. Variables & Data Types",
      "language": "python",
      "description": "Create a variable named my_number with value 42 and print it.",
      "initialCode": "# Declare my_number = 42 then print it\n\n",
      "fullSolution": "my_number = 42\nprint(my_number)\n",
      "expectedOutput": "42",
      "tutorial": "<p class=\"mb-4 text-gray-300\">A variable is a named reference to a value. Python infers types at runtime (dynamic typing).</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">my_number = 42\nname = \"Alice\"\npi = 3.14\nis_active = True\nprint(name, my_number)</pre></div>",
      "tags": [
        "Beginner",
        "Basics",
        "Type System"
      ]
    },
    {
      "title": "3. Arithmetic & Assignment",
      "language": "python",
      "description": "Update the balance by adding the deposit and subtracting the withdrawal, then print the result.",
      "initialCode": "balance = 50\ndeposit = 25\nwithdrawal = 10\n\n# Use arithmetic (+= and -=) to update balance, then print it\n\n",
      "fullSolution": "balance = 50\ndeposit = 25\nwithdrawal = 10\n\nbalance += deposit\nbalance -= withdrawal\nprint(balance)\n",
      "expectedOutput": "65",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Use +, -, *, and / for basic arithmetic. Compound assignment like <code>+=</code> updates a variable in-place without rewriting the variable name.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">total = 10\ntotal += 5  # same as total = total + 5\ntotal -= 2\nprint(total)</pre></div><p class=\"mt-4 text-gray-300\">This pattern is the key to counters such as <code>i += 1</code> that you'll use in loops.</p>",
      "id": 3,
      "tags": [
        "Beginner",
        "Basics",
        "Control Flow"
      ]
    },
    {
      "title": "4. Comparison Operators",
      "language": "python",
      "description": "Compare the score to the passing score to build a boolean named is_passing, then print it.",
      "initialCode": "score = 82\npassing_score = 70\n\n# Create a boolean is_passing using a comparison, then print it\n\n",
      "fullSolution": "score = 82\npassing_score = 70\n\nis_passing = score >= passing_score\nprint(is_passing)\n",
      "expectedOutput": "True",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Comparison operators (<code>&gt;</code>, <code>&gt;=</code>, <code>&lt;</code>, <code>&lt;=</code>, <code>==</code>, <code>!=</code>) evaluate to booleans.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">temperature = 72\nis_warm = temperature &gt;= 70\nprint(is_warm)  # True</pre></div><p class=\"mt-4 text-gray-300\">Knowing these results lets you build the conditions that power <code>if</code> statements and loops.</p>",
      "id": 4,
      "tags": [
        "Beginner",
        "Basics",
        "Control Flow"
      ]
    },
    {
      "id": 5,
      "title": "5. While Loops",
      "language": "python",
      "description": "Use a while loop to print numbers 1 through 5, each on a new line.",
      "initialCode": "i = 1\n# Print 1..5 using while\n\n",
      "fullSolution": "i = 1\nwhile i <= 5:\n    print(i)\n    i += 1\n",
      "expectedOutput": "1\n2\n3\n4\n5",
      "tutorial": "<p class=\"mb-4 text-gray-300\">A while loop repeats while a condition remains True. Be sure the condition eventually becomes False to avoid infinite loops.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">i = 1\nwhile i <= 3:\n    print(i)\n    i += 1</pre></div>",
      "tags": [
        "Beginner",
        "Basics",
        "Control Flow"
      ]
    },
    {
      "id": 6,
      "title": "6. For Loops",
      "language": "python",
      "description": "Use a for loop to print numbers 0 to 4, each on a new line.",
      "initialCode": "# Loop 0..4 with range(5) and print\n\n",
      "fullSolution": "for i in range(5):\n    print(i)\n",
      "expectedOutput": "0\n1\n2\n3\n4",
      "tutorial": "<p class=\"mb-4 text-gray-300\">for iterates directly over items or over a range of numbers. range(n) yields 0..n-1.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">for i in range(3):\n    print(i)</pre></div>",
      "tags": [
        "Beginner",
        "Basics",
        "Control Flow",
        "Generators"
      ]
    },
    {
      "id": 7,
      "title": "7. Lists Basics",
      "language": "python",
      "description": "Create a list of integers and print the second element.",
      "initialCode": "# Build [10,20,30,40,50] and print index 1\n\n",
      "fullSolution": "numbers = [10, 20, 30, 40, 50]\nprint(numbers[1])\n",
      "expectedOutput": "20",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Lists are ordered, zero-indexed, and mutable. Access by index and modify with methods like append() and pop().</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">nums = [10, 20, 30]\nprint(nums[1])  # 20\nnums.append(40)\nprint(nums)</pre></div>",
      "tags": [
        "Beginner",
        "Basics",
        "Collections"
      ]
    },
    {
      "id": 8,
      "title": "8. Functions",
      "language": "python",
      "description": "Define a function greet(name) that prints Hello, <name>! and call it with 'Alice'.",
      "initialCode": "# Define greet(name) then call greet('Alice')\n\n",
      "fullSolution": "def greet(name):\n    print(f\"Hello, {name}!\")\n\ngreet('Alice')\n",
      "expectedOutput": "Hello, Alice!",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Define functions with def. Parameters are local names; return sends a value back to the caller.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">def greet(name):\n    return f\"Hello, {name}!\"\n\nprint(greet(\"World\"))</pre></div>",
      "tags": [
        "Beginner",
        "Basics",
        "Functions"
      ]
    },
    {
      "title": "9. Functions that Return",
      "language": "python",
      "description": "Write a function area(width, height) that returns the product and print the result for 3 and 5.",
      "initialCode": "def area(width, height):\n    # Return the product of width and height\n    \n\nprint(area(3, 5))\n",
      "fullSolution": "def area(width, height):\n    return width * height\n\nprint(area(3, 5))\n",
      "expectedOutput": "15",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Use <code>return</code> to send a value back to the caller. Once Python hits a return statement, the function exits immediately.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">def double(n):\n    return n * 2\n\nresult = double(10)\nprint(result)</pre></div>",
      "id": 9,
      "tags": [
        "Beginner",
        "Basics",
        "Control Flow",
        "Functions"
      ]
    },
    {
      "id": 10,
      "title": "10. If / Else",
      "language": "python",
      "description": "Given x = 7, print Odd if x is odd, otherwise Even.",
      "initialCode": "x = 7\n# print Even or Odd\n\n",
      "fullSolution": "x = 7\nif x % 2 == 0:\n    print('Even')\nelse:\n    print('Odd')\n",
      "expectedOutput": "Odd",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Use if/elif/else to branch on conditions. Use % (modulo) to check divisibility.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">x = 7\nif x % 2 == 0:\n    print(\"Even\")\nelse:\n    print(\"Odd\")</pre></div>",
      "tags": [
        "Beginner",
        "Basics",
        "Control Flow"
      ]
    },
    {
      "title": "11. Compound Conditions",
      "language": "python",
      "description": "Use if/elif/else with and/or to print the right weather message for given temperature and rain values.",
      "initialCode": "temperature = 72\nis_raining = False\n\n# Print \"Perfect\" if warm and not raining\n# Print \"Grab an umbrella\" if raining\n# Otherwise print \"Stay warm\"\n",
      "fullSolution": "temperature = 72\nis_raining = False\n\nif temperature >= 70 and not is_raining:\n    print('Perfect')\nelif is_raining:\n    print('Grab an umbrella')\nelse:\n    print('Stay warm')\n",
      "expectedOutput": "Perfect",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Combine conditions with <code>and</code> / <code>or</code> to express multiple requirements at once. Evaluate the most specific case first.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">score = 88\nlate = False\nif score >= 90 and not late:\n    print('A')\nelif score >= 80:\n    print('B')\nelse:\n    print('Keep practicing')</pre></div>",
      "id": 11,
      "tags": [
        "Beginner",
        "Basics",
        "Control Flow"
      ]
    },
    {
      "id": 12,
      "title": "12. Sum with range()",
      "language": "python",
      "description": "Compute and print the sum of numbers from 1 to 5.",
      "initialCode": "# Print sum 1..5\n\n",
      "fullSolution": "print(sum(range(1, 6)))\n",
      "expectedOutput": "15",
      "tutorial": "<p class=\"mb-4 text-gray-300\">sum() adds items of any iterable of numbers. Combine with range() for sequences of integers.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">total = sum(range(1, 6))\nprint(total)  # 15</pre></div>",
      "tags": [
        "Beginner",
        "Basics",
        "Control Flow",
        "Generators"
      ]
    },
    {
      "id": 13,
      "title": "13. Strings & f-Strings",
      "language": "python",
      "description": "Use an f-string to print 'Hello, Alice!'.",
      "initialCode": "name = 'Alice'\n# print Hello, Alice!\n\n",
      "fullSolution": "name = 'Alice'\nprint(f'Hello, {name}!')\n",
      "expectedOutput": "Hello, Alice!",
      "tutorial": "<p class=\"mb-4 text-gray-300\">f-strings embed expressions inside string literals using {name}. They are concise and readable.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">name = 'Alice'\nprint(f'Hello, {name}!')</pre></div>",
      "tags": [
        "Beginner",
        "Basics",
        "Strings",
        "Type System"
      ]
    },
    {
      "title": "14. List Indexing & len()",
      "language": "python",
      "description": "Given a list of numbers, print the first element, the last element, and the list length (each on its own line).",
      "initialCode": "numbers = [4, 8, 15, 16, 23, 42]\n\n# Print first item, last item, then the length (one per line)\n\n",
      "fullSolution": "numbers = [4, 8, 15, 16, 23, 42]\n\nprint(numbers[0])\nprint(numbers[-1])\nprint(len(numbers))\n",
      "expectedOutput": "4\n42\n6",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Lists are zero-indexed. Negative indexes like <code>-1</code> reach from the end. <code>len()</code> tells you how many items are inside.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">values = [10, 20, 30]\nprint(values[0])  # 10\nprint(values[-1]) # 30\nprint(len(values)) # 3</pre></div>",
      "id": 14,
      "tags": [
        "Beginner",
        "Basics",
        "Collections"
      ]
    },
    {
      "id": 15,
      "title": "15. Dictionaries",
      "language": "python",
      "description": "Create a dictionary of capital cities and print the capital of Germany.",
      "initialCode": "# Build dict and print capital_cities['Germany']\n\n",
      "fullSolution": "capital_cities = {\n    'England': 'London',\n    'Germany': 'Berlin',\n    'Japan': 'Tokyo'\n}\nprint(capital_cities['Germany'])\n",
      "expectedOutput": "Berlin",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Dictionaries store key/value pairs. Access values by key; add new keys by assignment.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">capitals = {\"England\": \"London\", \"Germany\": \"Berlin\"}\nprint(capitals[\"Germany\"])\ncapitals[\"Japan\"] = \"Tokyo\"</pre></div>",
      "tags": [
        "Beginner",
        "Basics",
        "Collections"
      ]
    },
    {
      "title": "16. Dictionary Updates",
      "language": "python",
      "description": "Update profile data by adding a city and appending a new skill, then print them.",
      "initialCode": "profile = {\"name\": \"Ada\", \"level\": \"beginner\", \"skills\": [\"Python\"]}\n\n# Add a 'city' key with value 'London'\n# Append 'Git' to the skills list\n# Print profile['city'] then ', '.join(profile['skills'])\n",
      "fullSolution": "profile = {\"name\": \"Ada\", \"level\": \"beginner\", \"skills\": [\"Python\"]}\n\nprofile['city'] = 'London'\nprofile['skills'].append('Git')\n\nprint(profile['city'])\nprint(', '.join(profile['skills']))\n",
      "expectedOutput": "London\nPython, Git",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Dictionaries let you add or update keys on the fly. Values can be complex objects like lists, so you can mutate nested data too.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">user = {'name': 'Sam'}\nuser['role'] = 'admin'\nuser.setdefault('tags', [])\nuser['tags'].append('active')\nprint(user)</pre></div>",
      "id": 16,
      "tags": [
        "Beginner",
        "Tooling",
        "Basics",
        "Strings",
        "Collections"
      ]
    },
    {
      "id": 17,
      "title": "17. Boolean Logic",
      "language": "python",
      "description": "Given flags, print Access Granted if is_admin is True and user is active.",
      "initialCode": "is_admin = True\nis_active = True\n# print Access Granted if both True else Access Denied\n\n",
      "fullSolution": "is_admin = True\nis_active = True\nif is_admin and is_active:\n    print('Access Granted')\nelse:\n    print('Access Denied')\n",
      "expectedOutput": "Access Granted",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Combine logical conditions with and / or / not. Parentheses improve readability.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">is_admin = True\nis_active = True\nif is_admin and is_active:\n    print(\"Access Granted\")\nelse:\n    print(\"Access Denied\")</pre></div>",
      "tags": [
        "Beginner",
        "Basics",
        "Control Flow",
        "CLI"
      ]
    },
    {
      "id": 18,
      "title": "18. For-Each Over a List",
      "language": "python",
      "description": "Loop over names and print each one.",
      "initialCode": "names = ['Ana', 'Bo', 'Cy']\n# Print each on a new line\n\n",
      "fullSolution": "names = ['Ana', 'Bo', 'Cy']\nfor n in names:\n    print(n)\n",
      "expectedOutput": "Ana\nBo\nCy",
      "tutorial": "<p class=\"mb-4 text-gray-300\">for iterates directly over items or over a range of numbers. range(n) yields 0..n-1.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">for i in range(3):\n    print(i)</pre></div>",
      "tags": [
        "Beginner",
        "Basics",
        "Control Flow",
        "Collections",
        "Generators"
      ]
    },
    {
      "id": 19,
      "title": "19. List Methods",
      "language": "python",
      "description": "Append 4 to the list and then pop it; print the final list.",
      "initialCode": "nums = [1, 2, 3]\n# Append then pop, print nums\n\n",
      "fullSolution": "nums = [1, 2, 3]\nnums.append(4)\nnums.pop()\nprint(nums)\n",
      "expectedOutput": "[1, 2, 3]",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Lists are ordered, zero-indexed, and mutable. Access by index and modify with methods like append() and pop().</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">nums = [10, 20, 30]\nprint(nums[1])  # 20\nnums.append(40)\nprint(nums)</pre></div>",
      "tags": [
        "Beginner",
        "Basics",
        "Collections"
      ]
    },
    {
      "id": 20,
      "title": "20. String Methods",
      "language": "python",
      "description": "Make the string lowercase, then uppercase, printing each on its own line.",
      "initialCode": "s = 'Python'\n# Print lower then upper\n\n",
      "fullSolution": "s = 'Python'\nprint(s.lower())\nprint(s.upper())\n",
      "expectedOutput": "python\nPYTHON",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Common string methods: lower(), upper(), strip(), replace(), split(). They return new strings (immutable).</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">s = 'Python'\nprint(s.lower())\nprint(s.upper())</pre></div>",
      "tags": [
        "Beginner",
        "Basics",
        "Strings"
      ]
    },
    {
      "title": "21. Loop Accumulator Patterns",
      "language": "python",
      "description": "Use a for loop to compute the total and maximum score from the list, then print both (total first, max second).",
      "initialCode": "scores = [10, 12, 8, 15, 7]\n\n# Track a running total and highest value, then print them\n\n",
      "fullSolution": "scores = [10, 12, 8, 15, 7]\n\ntotal = 0\nhighest = scores[0]\nfor score in scores:\n    total += score\n    if score > highest:\n        highest = score\n\nprint(total)\nprint(highest)\n",
      "expectedOutput": "52\n15",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Many loops maintain state between iterations: counters (<code>total += ...</code>), extremum trackers, and flags. Initialize before the loop and update inside.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">nums = [3, 6, 2]\ntotal = 0\nsmallest = nums[0]\nfor n in nums:\n    total += n\n    if n < smallest:\n        smallest = n\nprint(total)   # 11\nprint(smallest) # 2</pre></div>",
      "id": 21,
      "tags": [
        "Beginner",
        "Basics",
        "Control Flow",
        "Collections",
        "CLI"
      ]
    },
    {
      "id": 22,
      "title": "22. Continue in Loops",
      "language": "python",
      "description": "Print only odd numbers from 0..9 using continue.",
      "initialCode": "# Use continue to skip evens\n\n",
      "fullSolution": "for i in range(10):\n    if i % 2 == 0:\n        continue\n    print(i)\n",
      "expectedOutput": "1\n3\n5\n7\n9",
      "tutorial": "<p class=\"mb-4 text-gray-300\">continue skips the rest of the current loop iteration and moves on to the next.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">for i in range(10):\n    if i % 2 == 0:\n        continue\n    print(i)  # prints odds</pre></div>",
      "tags": [
        "Beginner",
        "Basics",
        "Control Flow"
      ]
    },
    {
      "id": 23,
      "title": "23. Break in Loops",
      "language": "python",
      "description": "Loop from 0 and stop when i reaches 3. Print each number before breaking.",
      "initialCode": "# Break when i == 3\n\n",
      "fullSolution": "for i in range(10):\n    if i == 3:\n        break\n    print(i)\n",
      "expectedOutput": "0\n1\n2",
      "tutorial": "<p class=\"mb-4 text-gray-300\">break exits the nearest loop immediately.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">for i in range(10):\n    if i == 3:\n        break\n    print(i)  # 0,1,2</pre></div>",
      "tags": [
        "Beginner",
        "Basics",
        "Control Flow"
      ]
    },
    {
      "id": 24,
      "title": "24. Max in a List",
      "language": "python",
      "description": "Find and print the maximum value in a list.",
      "initialCode": "numbers = [1, 44, 7, 99, 23, 42]\n# Print max\n\n",
      "fullSolution": "numbers = [1, 44, 7, 99, 23, 42]\nprint(max(numbers))\n",
      "expectedOutput": "99",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Built-ins like max(), min(), and sum() work with lists and other iterables of numbers.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">numbers = [1, 44, 7, 99, 23]\nprint(max(numbers))</pre></div>",
      "tags": [
        "Beginner",
        "Basics",
        "Collections",
        "Generators"
      ]
    },
    {
      "id": 25,
      "title": "25. Functions with Parameters",
      "language": "python",
      "description": "Define add(a, b) and print the result of add(3, 4).",
      "initialCode": "# Define add(a,b) -> a+b and print add(3,4)\n\n",
      "fullSolution": "def add(a, b):\n    return a + b\n\nprint(add(3, 4))\n",
      "expectedOutput": "7",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Functions can accept parameters and return computed results.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">def add(a, b):\n    return a + b\n\nprint(add(3, 4))  # 7</pre></div>",
      "tags": [
        "Beginner",
        "Basics",
        "Functions"
      ]
    },
    {
      "title": "26. Default Arguments",
      "language": "python",
      "description": "Define greet(name, role='student') returning 'Hello, <name> the <role>!' then call it with and without the role.",
      "initialCode": "def greet(name, role='student'):\n    # Build the string using name and role\n    pass\n\nprint(greet('Ada'))\nprint(greet('Grace', 'mentor'))\n",
      "fullSolution": "def greet(name, role='student'):\n    return f\"Hello, {name} the {role}!\"\n\nprint(greet('Ada'))\nprint(greet('Grace', 'mentor'))\n",
      "expectedOutput": "Hello, Ada the student!\nHello, Grace the mentor!",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Default parameters supply fallback values so callers can omit common arguments. You can still override them with positional or keyword arguments.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">def connect(host, port=5432):\n    return f\"Connecting to {host}:{port}\"\n\nprint(connect('db.local'))\nprint(connect('db.local', 5433))</pre></div>",
      "id": 26,
      "tags": [
        "Beginner",
        "Basics",
        "Functions"
      ]
    },
    {
      "title": "27. __init__ and Instance Attributes",
      "language": "python",
      "description": "Finish the Counter class so __init__ stores the starting value and increment() adds 1. After creating Counter(5) and calling increment(), print the value.",
      "initialCode": "class Counter:\n    # Define __init__ to store starting value in self.value\n    def increment(self):\n        self.value += 1\n\ncounter = Counter(5)\ncounter.increment()\nprint(counter.value)\n",
      "fullSolution": "class Counter:\n    def __init__(self, start):\n        self.value = start\n\n    def increment(self):\n        self.value += 1\n\ncounter = Counter(5)\ncounter.increment()\nprint(counter.value)\n",
      "expectedOutput": "6",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Use <code>__init__</code> to initialize per-instance data on <code>self</code>. Every method receives <code>self</code> so you can read or update that state later.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">class BankAccount:\n    def __init__(self, balance):\n        self.balance = balance\n\n    def deposit(self, amount):\n        self.balance += amount\n\nacct = BankAccount(100)\nacct.deposit(25)\nprint(acct.balance)  # 125</pre></div>",
      "id": 27,
      "tags": [
        "Beginner",
        "Basics",
        "Functions",
        "OOP"
      ]
    },
    {
      "id": 28,
      "title": "28. Classes & Methods",
      "language": "python",
      "description": "Create a Dog class with a bark() method that prints 'Woof!' and call it.",
      "initialCode": "# Define class Dog with bark() and call it\n\n",
      "fullSolution": "class Dog:\n    def bark(self):\n        print('Woof!')\n\nDog().bark()\n",
      "expectedOutput": "Woof!",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Define classes with methods. The first parameter of instance methods is conventionally named self and refers to the instance.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">class Dog:\n    def bark(self):\n        print('Woof!')\n\nDog().bark()</pre></div>",
      "tags": [
        "Beginner",
        "Basics",
        "Functions",
        "OOP"
      ]
    },
    {
      "title": "29. Class vs Instance Attributes",
      "language": "python",
      "description": "Adjust the Player class so a class-level team name applies to all players, while each player tracks an individual score.",
      "initialCode": "class Player:\n    team = 'Blue'\n\n    def __init__(self, name):\n        # Store name and set starting score to 0\n        pass\n\nplayer1 = Player('Kai')\nplayer2 = Player('Zoe')\n\nplayer1.score += 10\nPlayer.team = 'Red'\n\nprint(Player.team)\nprint(player1.score)\nprint(player2.score)\n",
      "fullSolution": "class Player:\n    team = 'Blue'\n\n    def __init__(self, name):\n        self.name = name\n        self.score = 0\n\nplayer1 = Player('Kai')\nplayer2 = Player('Zoe')\n\nplayer1.score += 10\nPlayer.team = 'Red'\n\nprint(Player.team)\nprint(player1.score)\nprint(player2.score)\n",
      "expectedOutput": "Red\n10\n0",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Class attributes are shared across every instance, while instance attributes live on each object individually. Update class-wide data through the class, not <code>self</code>.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">class Robot:\n    population = 0\n    def __init__(self, name):\n        Robot.population += 1\n        self.name = name\n\nprint(Robot.population)</pre></div>",
      "id": 29,
      "tags": [
        "Beginner",
        "Basics",
        "Control Flow",
        "Functions",
        "Collections"
      ]
    },
    {
      "id": 30,
      "title": "30. Inheritance",
      "language": "python",
      "description": "Create Animal -> Dog. Override speak() in Dog to print 'Woof!' and call it.",
      "initialCode": "# Define Animal.speak and Dog(Animal).speak printing Woof!\n\n",
      "fullSolution": "class Animal:\n    def speak(self):\n        pass\n\nclass Dog(Animal):\n    def speak(self):\n        print('Woof!')\n\nDog().speak()\n",
      "expectedOutput": "Woof!",
      "tutorial": "<p class=\"mb-4 text-gray-300\">A subclass inherits from a parent class and can override methods. Use super() to call the parent implementation when needed.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">class Animal:\n    def speak(self):\n        return \"...\"\n\nclass Dog(Animal):\n    def speak(self):\n        return \"Woof!\"\n\nprint(Dog().speak())</pre></div>",
      "tags": [
        "Beginner",
        "Basics",
        "Functions",
        "OOP"
      ]
    },
    {
      "id": 31,
      "title": "31. Enums",
      "language": "python",
      "description": "Create an enum Color with RED, GREEN, BLUE and print 'RED'.",
      "initialCode": "# Define enum Color and print Color.RED.name\n\n",
      "fullSolution": "from enum import Enum\n\nclass Color(Enum):\n    RED = 1\n    GREEN = 2\n    BLUE = 3\n\nprint(Color.RED.name)\n",
      "expectedOutput": "RED",
      "tutorial": "<p class=\"mb-4 text-gray-300\">The enum module lets you define named constants. Access by EnumName.MEMBER.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from enum import Enum\nclass Color(Enum):\n    RED = 1\n    GREEN = 2\n    BLUE = 3\n\nprint(Color.RED.name)  # \"RED\"</pre></div>",
      "tags": [
        "Beginner",
        "Basics",
        "OOP"
      ]
    },
    {
      "id": 32,
      "title": "32. Slicing",
      "language": "python",
      "description": "Print the last three elements of the list each on a new line.",
      "initialCode": "nums = [1,2,3,4,5]\n# Print the last three with slicing\n\n",
      "fullSolution": "nums = [1,2,3,4,5]\nfor n in nums[-3:]:\n    print(n)\n",
      "expectedOutput": "3\n4\n5",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Slicing returns a sub-sequence: seq[start:end:step]. Negative indexes count from the end.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">nums = [1,2,3,4,5]\nprint(nums[-3:])  # last three</pre></div>",
      "tags": [
        "Beginner",
        "Basics",
        "Control Flow",
        "Collections"
      ]
    },
    {
      "id": 33,
      "title": "33. Iterate Dict (keys)",
      "language": "python",
      "description": "Use a for-loop to print all keys of the dictionary (one per line).",
      "initialCode": "m = {'England':'London','Germany':'Berlin','Japan':'Tokyo'}\n# Print each key on its own line\n\n",
      "fullSolution": "m = {'England':'London','Germany':'Berlin','Japan':'Tokyo'}\nfor k in m.keys():\n    print(k)\n",
      "expectedOutput": "England\nGermany\nJapan",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Iterate dict keys, values, or items with .keys(), .values(), .items(). The default iterates keys.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">person = {\"name\":\"Ada\",\"city\":\"London\"}\nfor k in person:\n    print(k)</pre></div>",
      "tags": [
        "Beginner",
        "Basics",
        "Control Flow",
        "Collections"
      ]
    },
    {
      "id": 34,
      "title": "34. Average of a List",
      "language": "python",
      "description": "Compute the average of [2, 4, 6, 8] and print it as a float.",
      "initialCode": "# Average of [2,4,6,8]\n\n",
      "fullSolution": "nums = [2,4,6,8]\nprint(sum(nums)/len(nums))\n",
      "expectedOutput": "5.0",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Compute an average by dividing the sum by the count. Convert to float if needed for decimal results.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">nums = [2,4,6,8]\nprint(sum(nums)/len(nums))  # 5.0</pre></div>",
      "tags": [
        "Beginner",
        "Basics",
        "Control Flow",
        "Collections",
        "Math and Stats"
      ]
    },
    {
      "id": 35,
      "title": "35. FizzBuzz (1..15)",
      "language": "python",
      "description": "Print numbers from 1 to 15 with Fizz/Buzz rules.",
      "initialCode": "# Implement FizzBuzz 1..15\n\n",
      "fullSolution": "for i in range(1, 16):\n    if i % 15 == 0:\n        print('FizzBuzz')\n    elif i % 3 == 0:\n        print('Fizz')\n    elif i % 5 == 0:\n        print('Buzz')\n    else:\n        print(i)\n",
      "expectedOutput": "1\n2\nFizz\n4\nBuzz\nFizz\n7\n8\nFizz\nBuzz\n11\nFizz\n13\n14\nFizzBuzz",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Use modulo to test divisibility by 3 and 5. Check 15 first to handle both.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">for i in range(1, 16):\n    if i % 15 == 0: print(\"FizzBuzz\")\n    elif i % 3 == 0: print(\"Fizz\")\n    elif i % 5 == 0: print(\"Buzz\")\n    else: print(i)</pre></div>",
      "tags": [
        "Beginner",
        "Basics",
        "Control Flow"
      ]
    },
    {
      "id": 36,
      "title": "36. List Comprehensions",
      "language": "python",
      "description": "Build squares 0..4 and print the list.",
      "initialCode": "# squares = [i*i for i in range(5)] then print\n\n",
      "fullSolution": "squares = [i*i for i in range(5)]\nprint(squares)\n",
      "expectedOutput": "[0, 1, 4, 9, 16]",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Lists are ordered, zero-indexed, and mutable. Access by index and modify with methods like append() and pop().</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">nums = [10, 20, 30]\nprint(nums[1])  # 20\nnums.append(40)\nprint(nums)</pre></div>",
      "tags": [
        "Beginner",
        "Basics",
        "Control Flow",
        "Collections",
        "Generators"
      ]
    },
    {
      "id": 37,
      "title": "37. Lambda/map/filter",
      "language": "python",
      "description": "Double [1,2,3] using map+lambda; print.",
      "initialCode": "# map(lambda x: x*2, nums)\n\n",
      "fullSolution": "nums = [1,2,3]\nprint(list(map(lambda x: x*2, nums)))\n",
      "expectedOutput": "[2, 4, 6]",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Use lambda for small anonymous functions. map() transforms; filter() keeps items where predicate is True.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">nums = [1,2,3]\ndoubled = list(map(lambda x: x*2, nums))\nevens = list(filter(lambda x: x%2==0, nums))\nprint(doubled)\nprint(evens)</pre></div>",
      "tags": [
        "Beginner",
        "Basics",
        "Control Flow",
        "Functions",
        "Collections"
      ]
    },
    {
      "id": 38,
      "title": "38. Math Module",
      "language": "python",
      "description": "Print: Max: 42 and Sqrt: 8.0",
      "initialCode": "# Use max and math.sqrt\n\n",
      "fullSolution": "import math\nprint('Max:', max(25, 42))\nprint('Sqrt:', math.sqrt(64))\n",
      "expectedOutput": "Max: 42\nSqrt: 8.0",
      "tutorial": "<p class=\"mb-4 text-gray-300\">The math module provides functions like sqrt, floor, ceil, and constants like pi.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import math\nprint(\"Sqrt:\", math.sqrt(64))\nprint(\"Pi:\", math.pi)</pre></div>",
      "tags": [
        "Beginner",
        "Basics",
        "Math and Stats"
      ]
    },
    {
      "id": 39,
      "title": "39. String Join",
      "language": "python",
      "description": "Join ['Python','is','efficient!'] with spaces.",
      "initialCode": "# ' '.join(list)\n\n",
      "fullSolution": "print(' '.join(['Python','is','efficient!']))\n",
      "expectedOutput": "Python is efficient!",
      "tutorial": "<p class=\"mb-4 text-gray-300\">\" \".join(list_of_strings) concatenates with a separator. Remember join is a string method, not on lists.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">words = ['Python','is','efficient!']\nprint(' '.join(words))</pre></div>",
      "tags": [
        "Beginner",
        "Basics",
        "Functions",
        "Strings",
        "Collections"
      ]
    },
    {
      "id": 40,
      "title": "40. super() in Constructors",
      "language": "python",
      "description": "Call parent __init__ and print both messages.",
      "initialCode": "class Animal:\n    def __init__(self, name):\n        print(f'Animal constructor called for: {name}')\n\nclass Dog(Animal):\n    def __init__(self, name):\n        # call parent with super()\n        \n        print('Dog constructor called.')\n\nDog('Fido')\n",
      "fullSolution": "class Animal:\n    def __init__(self, name):\n        print(f'Animal constructor called for: {name}')\n\nclass Dog(Animal):\n    def __init__(self, name):\n        super().__init__(name)\n        print('Dog constructor called.')\n\nDog('Fido')\n",
      "expectedOutput": "Animal constructor called for: Fido\nDog constructor called.",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Inside a subclass constructor, call super().__init__(...) to run parent initialization.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">class A:\n    def __init__(self):\n        print('A init')\nclass B(A):\n    def __init__(self):\n        super().__init__()\n        print('B init')\nB()</pre></div>",
      "tags": [
        "Beginner",
        "Basics",
        "Control Flow",
        "Functions",
        "OOP"
      ]
    },
    {
      "id": 41,
      "title": "41. Properties (@property)",
      "language": "python",
      "description": "Use @property to expose a computed full_name; print it.",
      "initialCode": "class Person:\n    def __init__(self, first, last):\n        self.first = first\n        self.last = last\n    # add property full_name returning '<first> <last>'\n\n# print Person('Ada','Lovelace').full_name\n",
      "fullSolution": "class Person:\n    def __init__(self, first, last):\n        self.first = first\n        self.last = last\n    @property\n    def full_name(self):\n        return f\"{self.first} {self.last}\"\n\nprint(Person('Ada','Lovelace').full_name)\n",
      "expectedOutput": "Ada Lovelace",
      "tutorial": "<p class=\"mb-4 text-gray-300\">@property turns a method into a computed attribute accessed without parentheses.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">class Person:\n    def __init__(self, first, last):\n        self.first, self.last = first, last\n    @property\n    def full_name(self):\n        return f'{self.first} {self.last}'\nprint(Person('Ada','Lovelace').full_name)</pre></div>",
      "tags": [
        "Beginner",
        "Basics",
        "Functions",
        "OOP"
      ]
    },
    {
      "id": 42,
      "title": "42. @staticmethod",
      "language": "python",
      "description": "Add a static method cube(x) and print cube(3).",
      "initialCode": "class MathUtil:\n    # add staticmethod cube(x)\n\nprint(MathUtil.cube(3))\n",
      "fullSolution": "class MathUtil:\n    @staticmethod\n    def cube(x):\n        return x**3\n\nprint(MathUtil.cube(3))\n",
      "expectedOutput": "27",
      "tutorial": "<p class=\"mb-4 text-gray-300\">@staticmethod belongs to the class namespace and does not receive self or cls.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">class Math:\n    @staticmethod\n    def cube(x): return x**3\nprint(Math.cube(3))</pre></div>",
      "tags": [
        "Beginner",
        "Basics",
        "Functions",
        "OOP",
        "Math and Stats"
      ]
    },
    {
      "id": 43,
      "title": "43. @classmethod",
      "language": "python",
      "description": "Track created instances with a class counter; print 2 after creating two.",
      "initialCode": "class Counter:\n    total = 0\n    # implement classmethod create() that increments total and returns an instance\n\n# create two then print Counter.total\n",
      "fullSolution": "class Counter:\n    total = 0\n    def __init__(self):\n        pass\n    @classmethod\n    def create(cls):\n        cls.total += 1\n        return cls()\n\nCounter.create()\nCounter.create()\nprint(Counter.total)\n",
      "expectedOutput": "2",
      "tutorial": "<p class=\"mb-4 text-gray-300\">@classmethod receives the class (cls) as the first argument and is useful for alternative constructors.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">class C:\n    total = 0\n    @classmethod\n    def create(cls):\n        cls.total += 1\n        return cls()\nC.create(); C.create(); print(C.total)</pre></div>",
      "tags": [
        "Beginner",
        "Basics",
        "Control Flow",
        "Functions",
        "OOP"
      ]
    },
    {
      "id": 44,
      "title": "44. Tuple Unpacking",
      "language": "python",
      "description": "Unpack (1,2,3) into a,b,c and print a and c on separate lines.",
      "initialCode": "# Unpack then print a and c\n\n",
      "fullSolution": "a,b,c = (1,2,3)\nprint(a)\nprint(c)\n",
      "expectedOutput": "1\n3",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Unpack iterables on the left-hand side to bind multiple names at once.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">a,b,c = (1,2,3)\nprint(a)\nprint(c)</pre></div>",
      "tags": [
        "Beginner",
        "Basics",
        "Collections",
        "Generators"
      ]
    },
    {
      "id": 45,
      "title": "45. Set Operations",
      "language": "python",
      "description": "Create sets and print union then intersection.",
      "initialCode": "# union then intersection\n\n",
      "fullSolution": "A={1,2,3}\nB={3,4}\nprint(A|B)\nprint(A&B)\n",
      "expectedOutput": "{1, 2, 3, 4}\n{3}",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Sets store unique elements and support union (|), intersection (&), and difference (-).</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">A={1,2,3}; B={3,4}\nprint(A|B)\nprint(A&B)</pre></div>",
      "tags": [
        "Beginner",
        "Basics",
        "Collections"
      ]
    },
    {
      "id": 46,
      "title": "46. Try/Except",
      "language": "python",
      "description": "Catch ZeroDivisionError and print message.",
      "initialCode": "# try dividing by zero, catch and print message\n\n",
      "fullSolution": "try:\n    1/0\nexcept ZeroDivisionError:\n    print('Oops! Division by zero')\n",
      "expectedOutput": "Oops! Division by zero",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Wrap risky code in try/except. Catch specific exceptions first to handle them appropriately.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">try:\n    1/0\nexcept ZeroDivisionError:\n    print('Oops! Division by zero')</pre></div>",
      "tags": [
        "Beginner",
        "Basics",
        "Error Handling"
      ]
    },
    {
      "id": 47,
      "title": "47. Else and Finally",
      "language": "python",
      "description": "Demonstrate try/except/else/finally; print 4 then Done.",
      "initialCode": "# compute 2+2 and print result in else, always print Done in finally\n\n",
      "fullSolution": "try:\n    r=2+2\nexcept Exception:\n    print('Error')\nelse:\n    print(r)\nfinally:\n    print('Done')\n",
      "expectedOutput": "4\nDone",
      "tutorial": "<p class=\"mb-4 text-gray-300\">In try/except, the else block runs if no exception occurred; finally always runs, success or failure.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">try:\n    r = 2+2\nexcept Exception:\n    print(\"Error\")\nelse:\n    print(r)\nfinally:\n    print(\"Done\")</pre></div>",
      "tags": [
        "Beginner",
        "Basics",
        "Control Flow",
        "Concurrency",
        "Error Handling"
      ]
    },
    {
      "id": 48,
      "title": "48. Raise Exceptions",
      "language": "python",
      "description": "Raise ValueError for negative; catch and print Invalid.",
      "initialCode": "# define check(x) that raises ValueError for x<0; call with -1\n\n",
      "fullSolution": "def check(x):\n    if x<0:\n        raise ValueError('neg')\n\ntry:\n    check(-1)\nexcept ValueError:\n    print('Invalid')\n",
      "expectedOutput": "Invalid",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Wrap risky code in try/except. Catch specific exceptions first to handle them appropriately.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">try:\n    1/0\nexcept ZeroDivisionError:\n    print('Oops! Division by zero')</pre></div>",
      "tags": [
        "Beginner",
        "Basics",
        "Control Flow",
        "Functions",
        "Error Handling"
      ]
    },
    {
      "id": 49,
      "title": "49. File I/O (write/read)",
      "language": "python",
      "description": "Write 'hello file' then read it back and print.",
      "initialCode": "# write to data.txt then read and print\n\n",
      "fullSolution": "with open('data.txt','w') as f:\n    f.write('hello file')\nwith open('data.txt') as f:\n    print(f.read())\n",
      "expectedOutput": "hello file",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Use with open(...) as f to read/write files safely. Files are closed automatically.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">with open('demo.txt','w') as f:\n    f.write('hello')\nwith open('demo.txt') as f:\n    print(f.read())</pre></div>",
      "tags": [
        "Beginner",
        "Basics",
        "I/O"
      ]
    },
    {
      "id": 50,
      "title": "50. Context Managers",
      "language": "python",
      "description": "Use with to write then read two lines and print them.",
      "initialCode": "# write A and B lines to notes.txt, then read and print\n\n",
      "fullSolution": "with open('notes.txt','w') as f:\n    f.write('A\\nB')\nwith open('notes.txt') as f:\n    print(f.read())\n",
      "expectedOutput": "A\nB",
      "tutorial": "<p class=\"mb-4 text-gray-300\">with manages resources that need setup/teardown (file handles, locks, network connections).</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from contextlib import contextmanager\n@contextmanager\ndef tag(name):\n    print(f'<{name}>'); yield; print(f'</{name}>')\nwith tag('b'):\n    print('bold')</pre></div>",
      "tags": [
        "Beginner",
        "Basics",
        "Functions",
        "I/O",
        "Concurrency"
      ]
    },
    {
      "title": "51. Detect Virtual Environment",
      "language": "python",
      "description": "Implement a helper that decides VENV vs SYSTEM given prefix/base_prefix strings, then print results for two scenarios.",
      "initialCode": "def detect(prefix, base_prefix):\n    # Return 'VENV' when prefix differs from base_prefix, else 'SYSTEM'\n    pass\n\nprint(detect('/opt/venv', '/usr/bin/python'))\nprint(detect('/usr/bin/python', '/usr/bin/python'))\n",
      "fullSolution": "def detect(prefix, base_prefix):\n    return 'VENV' if prefix != base_prefix else 'SYSTEM'\n\nprint(detect('/opt/venv', '/usr/bin/python'))\nprint(detect('/usr/bin/python', '/usr/bin/python'))\n",
      "expectedOutput": "VENV\nSYSTEM",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Virtual environments swap in a different <code>sys.prefix</code>. Checking whether the prefixes differ is all tooling needs to detect activation.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">def is_venv(prefix, base_prefix):\n    return prefix != base_prefix\n</pre></div>",
      "id": 51,
      "tags": [
        "Beginner",
        "Basics",
        "Control Flow",
        "Functions"
      ]
    },
    {
      "title": "52. Virtualenv Activate Script",
      "language": "python",
      "description": "Given a project name, print the Unix and Windows commands for activating its .venv.",
      "initialCode": "project = 'inventory'\n# Print Unix activation command then Windows activation path\n",
      "fullSolution": "project = 'inventory'\nunix_cmd = f'source {project}/.venv/bin/activate'\nwin_path = fr\"{project}\\\\.venv\\\\Scripts\\\\activate.bat\"\nprint(unix_cmd)\nprint(win_path)\n",
      "expectedOutput": "source inventory/.venv/bin/activate\ninventory\\.venv\\Scripts\\activate.bat",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Activating a virtual environment differs by platform. Document both commands so every teammate can get running quickly.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">source myapp/.venv/bin/activate\nmyapp\\.venv\\Scripts\\activate.bat</pre></div>",
      "id": 52,
      "tags": [
        "Beginner",
        "Tooling",
        "Basics",
        "Control Flow"
      ]
    },
    {
      "id": 53,
      "title": "53. Sorting",
      "language": "python",
      "description": "Sort the list [3,1,2] ascending and print it.",
      "initialCode": "# sort then print\n\n",
      "fullSolution": "nums=[3,1,2]\nnums.sort()\nprint(nums)\n",
      "expectedOutput": "[1, 2, 3]",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Use sorted(iterable) for a new sorted list, or list.sort() to sort in place. key= controls the sort field.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">print(sorted([3,1,2]))  # [1,2,3]</pre></div>",
      "tags": [
        "Beginner",
        "Basics",
        "Control Flow",
        "Collections",
        "Algorithms"
      ]
    },
    {
      "id": 54,
      "title": "54. Dict Comprehensions",
      "language": "python",
      "description": "Create a dict mapping numbers 1..3 to their squares and print it.",
      "initialCode": "# squares dict 1..3\n\n",
      "fullSolution": "print({i:i*i for i in range(1,4)})\n",
      "expectedOutput": "{1: 1, 2: 4, 3: 9}",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Dict comprehensions create dictionaries concisely: {k:v for k,v in ...}.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">{n: n*n for n in range(1,4)}</pre></div>",
      "tags": [
        "Beginner",
        "Basics",
        "Control Flow",
        "Collections",
        "Generators"
      ]
    },
    {
      "id": 55,
      "title": "55. Generators",
      "language": "python",
      "description": "Create a generator that yields 1..3 and print each value.",
      "initialCode": "# define gen() yielding 1,2,3 then iterate\n\n",
      "fullSolution": "def gen():\n    yield 1\n    yield 2\n    yield 3\nfor x in gen():\n    print(x)\n",
      "expectedOutput": "1\n2\n3",
      "tutorial": "<p class=\"mb-4 text-gray-300\">yield produces a sequence lazily. Iterate over the generator like any iterable.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">def gen():\n    yield 1; yield 2; yield 3\nfor x in gen():\n    print(x)</pre></div>",
      "tags": [
        "Beginner",
        "Basics",
        "Control Flow",
        "Functions",
        "Generators"
      ]
    },
    {
      "id": 56,
      "title": "56. JSON Basics",
      "language": "python",
      "description": "Parse a JSON string and print the value of name.",
      "initialCode": "# Use json.loads on the string to parse and print the name\n\n",
      "fullSolution": "import json\ns = '{\"name\": \"Ada\"}'\nobj = json.loads(s)\nprint(obj[\"name\"])\n",
      "expectedOutput": "Ada",
      "tutorial": "<p class=\"mb-4 text-gray-300\">json.loads parses a JSON string into Python objects; json.dumps serializes Python objects to JSON strings.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import json\ns = \"{\"name\": \"Ada\"}\"\nobj = json.loads(s)\nprint(obj[\"name\"])</pre></div>",
      "tags": [
        "Beginner",
        "Basics",
        "Serialization",
        "Parsing"
      ]
    },
    {
      "title": "57. Parse requirements.txt",
      "language": "python",
      "description": "Extract package names from a requirements.txt-style string, ignoring blanks and comments, then print them sorted and comma-separated.",
      "initialCode": "text = \"\"\"\n# Example requirements\nrequests==2.31.0\n# comment line\nflask>=2.0\n\n\"\"\"\n\n# Collect package names (strip version specifiers) and print comma-separated in sorted order\n",
      "fullSolution": "text = \"\"\"\n# Example requirements\nrequests==2.31.0\n# comment line\nflask>=2.0\n\n\"\"\"\n\npackages = []\nfor line in text.splitlines():\n    line = line.strip()\n    if not line or line.startswith('#'):\n        continue\n    for sep in ('==', '>=', '<=', '~=', '>', '<'):\n        if sep in line:\n            line = line.split(sep, 1)[0]\n            break\n    packages.append(line)\nprint(\", \".join(sorted(packages)))\n",
      "expectedOutput": "flask, requests",
      "tutorial": "<p class=\"mb-4 text-gray-300\">requirements.txt entries may include version specifiers or comments. Trim whitespace, skip comments, and split on comparison operators to recover the package name.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">raw = \"numpy==1.24\\n# note\\npandas>=2.0\"\nnames = []\nfor line in raw.splitlines():\n    line = line.strip()\n    if line and not line.startswith('#'):\n        if '==' in line:\n            line = line.split('==', 1)[0]\n        names.append(line)\nprint(names)</pre></div>",
      "id": 57,
      "tags": [
        "Beginner",
        "Basics",
        "Control Flow",
        "Strings",
        "Algorithms"
      ]
    },
    {
      "id": 58,
      "title": "58. Regular Expressions",
      "language": "python",
      "description": "Extract all digits from 'a1b2c3' and print each on a new line.",
      "initialCode": "# re.findall to get digits then print\n\n",
      "fullSolution": "import re\nfor d in re.findall(r'\\\\d','a1b2c3'):\n    print(d)\n",
      "expectedOutput": "1\n2\n3",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Use the re module for regular expressions. \\d matches digits; groups capture substrings for later use.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import re\nprint(re.findall(r'\\\\d', 'a1b2c3'))\n# Groups:\nm = re.search(r'^Hello\\s+(\\\\w+)$', 'Hello World')\nprint(m.group(1))  # World</pre></div>",
      "tags": [
        "Beginner",
        "Basics",
        "Control Flow",
        "Algorithms",
        "Regex"
      ]
    },
    {
      "id": 59,
      "title": "59. enumerate()",
      "language": "python",
      "description": "Use enumerate to print index and value for ['a','b','c'].",
      "initialCode": "# print 0:a 1:b 2:c on new lines\n\n",
      "fullSolution": "for i,v in enumerate(['a','b','c']):\n    print(f'{i}:{v}')\n",
      "expectedOutput": "0:a\n1:b\n2:c",
      "tutorial": "<p class=\"mb-4 text-gray-300\">The enum module lets you define named constants. Access by EnumName.MEMBER.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from enum import Enum\nclass Color(Enum):\n    RED = 1\n    GREEN = 2\n    BLUE = 3\n\nprint(Color.RED.name)  # \"RED\"</pre></div>",
      "tags": [
        "Beginner",
        "Basics",
        "Control Flow",
        "OOP"
      ]
    },
    {
      "id": 60,
      "title": "60. Set Comprehension",
      "language": "python",
      "description": "Build a set of even numbers from 0..6 and print it.",
      "initialCode": "# even set 0..6\n\n",
      "fullSolution": "print({n for n in range(7) if n%2==0})\n",
      "expectedOutput": "{0, 2, 4, 6}",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Set comprehensions build sets; braces {} with an expression and optional condition.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">{n for n in range(7) if n % 2 == 0}</pre></div>",
      "tags": [
        "Beginner",
        "Basics",
        "Control Flow",
        "Collections",
        "Generators"
      ]
    },
    {
      "id": 61,
      "title": "61. Regex Groups",
      "language": "python",
      "description": "Capture the word after 'Hello' in 'Hello World' and print it.",
      "initialCode": "# re.search group capture\n\n",
      "fullSolution": "import re\nm = re.search(r'^Hello\\s+(\\w+)$', 'Hello World')\nprint(m.group(1))\n",
      "expectedOutput": "World",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Use the re module for regular expressions. \\d matches digits; groups capture substrings for later use.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import re\nprint(re.findall(r'\\\\d', 'a1b2c3'))\n# Groups:\nm = re.search(r'^Hello\\s+(\\\\w+)$', 'Hello World')\nprint(m.group(1))  # World</pre></div>",
      "tags": [
        "Beginner",
        "Control Flow",
        "Strings",
        "Algorithms",
        "Regex"
      ]
    },
    {
      "id": 62,
      "title": "62. isinstance()",
      "language": "python",
      "description": "Check if value is an int, a str, and an object; print three booleans on new lines.",
      "initialCode": "# x=5 then print the three checks\n\n",
      "fullSolution": "x=5\nprint(isinstance(x,int))\nprint(isinstance(x,str))\nprint(isinstance(x,object))\n",
      "expectedOutput": "True\nFalse\nTrue",
      "tutorial": "<p class=\"mb-4 text-gray-300\">isinstance(obj, type) checks an object's type (including subclass relationships).</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">x = 5\nprint(isinstance(x, int))\nprint(isinstance(x, str))\nprint(isinstance(x, object))</pre></div>",
      "tags": [
        "Beginner",
        "Control Flow",
        "OOP"
      ]
    },
    {
      "id": 63,
      "title": "63. Course Review",
      "language": "python",
      "description": "Combine classes, lists, loops, and math: compute the average score of students.",
      "initialCode": "class Student:\n    def __init__(self, name, score):\n        self.name=name\n        self.score=score\n\nstudents=[Student('Alice',90),Student('Bob',80),Student('Charlie',100)]\n# compute and print average\n\n",
      "fullSolution": "class Student:\n    def __init__(self, name, score):\n        self.name=name\n        self.score=score\n\nstudents=[Student('Alice',90),Student('Bob',80),Student('Charlie',100)]\nprint(sum(s.score for s in students)/len(students))\n",
      "expectedOutput": "90.0",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Combine multiple concepts: classes, loops, and aggregations. Think in steps: represent data, iterate, and compute.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">class Student:\n    def __init__(self, name, score):\n        self.name, self.score = name, score\nstudents=[Student('A',90), Student('B',80)]\nprint(sum(s.score for s in students)/len(students))</pre></div>",
      "tags": [
        "Beginner",
        "Control Flow",
        "Functions",
        "Collections",
        "OOP"
      ]
    },
    {
      "title": "64. Iterator Basics",
      "language": "python",
      "description": "Create an iterator over items and print the first two elements using next().",
      "initialCode": "items = ['a', 'b', 'c']\n\n# Obtain an iterator and print the first two values with next()\n\n",
      "fullSolution": "items = ['a', 'b', 'c']\n\nit = iter(items)\nprint(next(it))\nprint(next(it))\n",
      "expectedOutput": "a\nb",
      "tutorial": "<p class=\"mb-4 text-gray-300\">The iterator protocol lets you pull items one by one with <code>iter()</code> and <code>next()</code>. Loops call these under the hood.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">letters = iter(['x', 'y', 'z'])\nprint(next(letters))\nprint(next(letters))\n# StopIteration is raised when a sequence is exhausted.</pre></div>",
      "id": 64,
      "tags": [
        "Beginner",
        "Type System"
      ]
    },
    {
      "id": 65,
      "title": "65. Lambda + map",
      "language": "python",
      "description": "Use map with a lambda to double each number and print each on a new line.",
      "initialCode": "nums = [1,2,3]\n# Use map + lambda to double each and print each on a new line\n\n",
      "fullSolution": "nums = [1,2,3]\nfor x in map(lambda n: n*2, nums):\n    print(x)\n",
      "expectedOutput": "2\n4\n6",
      "tutorial": "<p class=\"mb-4 text-gray-300\">`map()` applies a function to every item of an iterable. Combine it with a `lambda` for concise transformations.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">nums = [1, 2, 3]\ndoubled = list(map(lambda x: x * 2, nums))\nprint(doubled) # [2, 4, 6]</pre></div>",
      "tags": [
        "Beginner",
        "Control Flow",
        "Functions",
        "Collections",
        "Functional"
      ]
    },
    {
      "id": 66,
      "title": "66. Filter Evens",
      "language": "python",
      "description": "Filter even numbers from 0..6 and print each on a new line.",
      "initialCode": "nums = list(range(7))\n# Keep evens using filter + lambda and print each\n\n",
      "fullSolution": "nums = list(range(7))\nfor x in filter(lambda n: n % 2 == 0, nums):\n    print(x)\n",
      "expectedOutput": "0\n2\n4\n6",
      "tutorial": "<p class=\"mb-4 text-gray-300\">`filter()` creates an iterator from elements of an iterable for which a function returns true. It is often used with a `lambda` for the condition.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">nums = [1, 2, 3, 4]\nevens = list(filter(lambda x: x % 2 == 0, nums))\nprint(evens) # [2, 4]</pre></div>",
      "tags": [
        "Beginner",
        "Control Flow",
        "Functions",
        "Collections",
        "Functional"
      ]
    },
    {
      "id": 67,
      "title": "67. zip() Pairs",
      "language": "python",
      "description": "Zip two lists and print pairs as N-letter on separate lines.",
      "initialCode": "a=[1,2,3]\nb=['a','b','c']\n# Print 1-a, 2-b, 3-c each on new lines\n\n",
      "fullSolution": "a=[1,2,3]\nb=['a','b','c']\nfor i,ch in zip(a,b):\n    print(f'{i}-{ch}')\n",
      "expectedOutput": "1-a\n2-b\n3-c",
      "tutorial": "<p class=\"mb-4 text-gray-300\">`zip()` aggregates elements from two or more iterables, creating an iterator that generates tuples of corresponding elements.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">nums = [1, 2]\nlets = [\"a\", \"b\"]\nprint(list(zip(nums, lets))) # [(1, \"a\"), (2, \"b\")]</pre></div>",
      "tags": [
        "Beginner",
        "Control Flow",
        "Collections",
        "Generators"
      ]
    },
    {
      "id": 68,
      "title": "68. Sort by Length",
      "language": "python",
      "description": "Sort words by length ascending and print each on a new line.",
      "initialCode": "words=['pear','fig','apple']\n# Sort by length (ascending) and print\n\n",
      "fullSolution": "words=['pear','fig','apple']\nfor w in sorted(words, key=len):\n    print(w)\n",
      "expectedOutput": "fig\npear\napple",
      "tutorial": "<p class=\"mb-4 text-gray-300\">The `sorted()` function can take a `key` argument. Provide `len` to sort an iterable of strings by their length.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">words = [\"pear\", \"fig\", \"apple\"]\nprint(sorted(words, key=len)) # ['fig', 'pear', 'apple']</pre></div>",
      "tags": [
        "Beginner",
        "Control Flow",
        "Functions",
        "Algorithms",
        "Generators"
      ]
    },
    {
      "title": "69. Git Commit Summary",
      "language": "python",
      "description": "Given commit metadata, print a one-line summary in the format '<hash7> <author>: <message>'.",
      "initialCode": "commit = {\n    'hash': '9f4c3e1258',\n    'author': 'ada',\n    'message': 'Add login view'\n}\n\n# Print the summary line described above\n",
      "fullSolution": "commit = {\n    'hash': '9f4c3e1258',\n    'author': 'ada',\n    'message': 'Add login view'\n}\n\nprint(f\"{commit['hash'][:7]} {commit['author']}: {commit['message']}\")\n",
      "expectedOutput": "9f4c3e1 ada: Add login view",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Git tooling often abbreviates hashes for readability (first 7 characters) and pairs them with author and message.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">entry = {'hash': 'abc123def', 'author': 'sam', 'message': 'Fix bug'}\nprint(f\"{entry['hash'][:7]} {entry['author']}: {entry['message']}\")</pre></div>",
      "id": 69,
      "tags": [
        "Beginner",
        "Git",
        "Workflow",
        "Control Flow",
        "Strings"
      ]
    },
    {
      "title": "70. Git Branch Summary",
      "language": "python",
      "description": "Format a branch list so the current branch is marked with '*'.",
      "initialCode": "branches = ['main', 'feature/login', 'chore/deps']\ncurrent = 'feature/login'\n\n# Print branches with '*' prefix on the current branch\n",
      "fullSolution": "branches = ['main', 'feature/login', 'chore/deps']\ncurrent = 'feature/login'\n\nfor name in branches:\n    marker = '*' if name == current else ' '\n    print(f\"{marker} {name}\")\n",
      "expectedOutput": "  main\n* feature/login\n  chore/deps",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Git branch listings mark the active branch with an asterisk. Reproducing that format helps when scripting CLI helpers or status dashboards.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">branches = ['main', 'dev']\ncurrent = 'dev'\nfor name in branches:\n    prefix = '*' if name == current else ' ' \n    print(f\"{prefix} {name}\")</pre></div>",
      "id": 70,
      "tags": [
        "Beginner",
        "Git",
        "Workflow",
        "Control Flow",
        "Strings"
      ]
    },
    {
      "title": "71. Git Merge Plan",
      "language": "python",
      "description": "Given source and target branch names plus the commits unique to the source, print the merge commands and list the commits that will land on the target.",
      "initialCode": "source_branch = 'feature/login'\ntarget_branch = 'main'\nunique_commits = ['login-form', 'oauth']\n\n# Print merge command and comma-separated commits that will land on target\n",
      "fullSolution": "source_branch = 'feature/login'\ntarget_branch = 'main'\nunique_commits = ['login-form', 'oauth']\n\nprint(f'git checkout {target_branch}')\nprint(f'git merge {source_branch}')\nprint('Incoming commits: ' + ', '.join(unique_commits))\n",
      "expectedOutput": "git checkout main\ngit merge feature/login\nIncoming commits: login-form, oauth",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Before merging, note which commits are exclusive to the source branch so you can summarize the change set. This mirrors the preview provided by <code>git log main..feature</code>.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">src = 'feature/api'\ndst = 'develop'\ncommits = ['add-endpoint', 'fix-docs']\nprint(f'git checkout {dst}')\nprint(f'git merge {src}')\nprint('Incoming commits: ' + ', '.join(commits))</pre></div>",
      "tags": [
        "Beginner",
        "Git",
        "Workflow",
        "Strings",
        "Collections"
      ],
      "id": 71
    },
    {
      "title": "72. Git Rebase Steps",
      "language": "python",
      "description": "Output the commands to rebase a feature branch onto a new base and print the commits that will be replayed.",
      "initialCode": "feature_branch = 'feature/search'\nnew_base = 'main'\ncommits = ['index-view', 'search-ui']\n\n# Print rebase commands then the commits being replayed\n",
      "fullSolution": "feature_branch = 'feature/search'\nnew_base = 'main'\ncommits = ['index-view', 'search-ui']\n\nprint(f'git checkout {feature_branch}')\nprint(f'git fetch origin {new_base}')\nprint(f'git rebase origin/{new_base}')\nprint('Replaying: ' + ', '.join(commits))\n",
      "expectedOutput": "git checkout feature/search\ngit fetch origin main\ngit rebase origin/main\nReplaying: index-view, search-ui",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Rebasing rewrites history by replaying commits atop a new base. Listing the replayed commits clarifies what changes will move.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">branch = 'feature/payments'\nbase = 'main'\nprint(f'git checkout {branch}')\nprint(f'git fetch origin {base}')\nprint(f'git rebase origin/{base}')</pre></div>",
      "tags": [
        "Beginner",
        "Git",
        "Workflow",
        "Strings",
        "Algorithms"
      ],
      "id": 72
    },
    {
      "title": "73. Git Conflict Resolution Practice",
      "language": "python",
      "description": "Simulate resolving a merge conflict by printing the sequence of commands and describing the manual edit step.",
      "initialCode": "source = 'feature/landing'\ntarget = 'main'\nconflicted_files = ['templates/home.html', 'static/site.css']\n\n# Print commands: checkout target, merge source, edit each conflicted file placeholder, then continue the merge\n",
      "fullSolution": "source = 'feature/landing'\ntarget = 'main'\nconflicted_files = ['templates/home.html', 'static/site.css']\n\nprint(f'git checkout {target}')\nprint(f'git merge {source}')\nfor path in conflicted_files:\n    print(f'# resolve conflicts in {path}')\nprint('git add ' + ' '.join(conflicted_files))\nprint('git commit --no-edit')\n",
      "expectedOutput": "git checkout main\ngit merge feature/landing\n# resolve conflicts in templates/home.html\n# resolve conflicts in static/site.css\ngit add templates/home.html static/site.css\ngit commit --no-edit",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Walk through the steps required after a merge conflict: switch, merge, edit, stage, and commit.</p>\n<h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4>\n<div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">git checkout main\ngit merge feature/landing\n# resolve conflicts in templates/home.html\n# resolve conflicts in static/site.css\ngit add templates/home.html static/site.css\ngit commit --no-edit</pre></div>\n<p class=\"mt-4 text-gray-300\">Narrate the manual edits so reviewers know every file you touched before you wrap the merge.</p>",
      "tags": [
        "Beginner",
        "Git",
        "Workflow",
        "Control Flow",
        "Strings"
      ],
      "id": 73
    },
    {
      "title": "74. Git Cherry-pick Plan",
      "language": "python",
      "description": "Plan a cherry-pick by listing the commands and commits that will be applied onto the target branch.",
      "initialCode": "target_branch = 'release/1.2'\ncommits = ['feat-a1', 'fix-a2']\n\n# Print commands to checkout, cherry-pick each commit, then verify with git log --oneline\n",
      "fullSolution": "target_branch = 'release/1.2'\ncommits = ['feat-a1', 'fix-a2']\n\nprint(f'git checkout {target_branch}')\nfor commit in commits:\n    print(f'git cherry-pick {commit}')\nprint('git log --oneline -5')\n",
      "expectedOutput": "git checkout release/1.2\ngit cherry-pick feat-a1\ngit cherry-pick fix-a2\ngit log --oneline -5",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Cherry-picking replays specific commits. Planning the sequence helps avoid surprises when targeting release branches.</p>\n<h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4>\n<div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">git checkout release/1.2\ngit cherry-pick feat-a1\ngit cherry-pick fix-a2\ngit log --oneline -5</pre></div>\n<p class=\"mt-4 text-gray-300\">Include the verification command so others can double-check the history before tagging.</p>",
      "tags": [
        "Beginner",
        "Git",
        "Workflow",
        "Tooling",
        "Control Flow"
      ],
      "id": 74
    },
    {
      "id": 75,
      "title": "75. Sort Dicts",
      "language": "python",
      "description": "Sort a list of dicts by age and print names in order.",
      "initialCode": "people=[{'name':'Bob','age':30},{'name':'Alice','age':25},{'name':'Eve','age':35}]\n# Sort by 'age' ascending and print names\n\n",
      "fullSolution": "people=[{'name':'Bob','age':30},{'name':'Alice','age':25},{'name':'Eve','age':35}]\nfor p in sorted(people, key=lambda x: x['age']):\n    print(p['name'])\n",
      "expectedOutput": "Alice\nBob\nEve",
      "tutorial": "<p class=\"mb-4 text-gray-300\">To sort a list of dictionaries, use a `lambda` function as the key to specify which dictionary value to sort by.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">people = [{'name': 'Bob', 'age': 30}, {'name': 'Alice', 'age': 25}]\nprint(sorted(people, key=lambda p: p['age']))</pre></div>",
      "tags": [
        "Beginner",
        "Control Flow",
        "Functions",
        "Collections",
        "Algorithms"
      ]
    },
    {
      "id": 76,
      "title": "76. Extended Unpacking",
      "language": "python",
      "description": "Unpack first and last values, ignoring the middle.",
      "initialCode": "data=[1,2,3,4]\n# Unpack to a and b (first/last) then print a and b on new lines\n\n",
      "fullSolution": "data=[1,2,3,4]\na,*_,b = data\nprint(a)\nprint(b)\n",
      "expectedOutput": "1\n4",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Use an asterisk `*` to capture multiple items into a list during unpacking. This is often used to get the first/last items.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">nums = [1, 2, 3, 4]\nfirst, *middle, last = nums\nprint(first, last) # 1 4\nprint(middle) # [2, 3]</pre></div>",
      "tags": [
        "Beginner",
        "Collections"
      ]
    },
    {
      "id": 77,
      "title": "77. Closures",
      "language": "python",
      "description": "Return a function that adds a captured value and use it.",
      "initialCode": "def make_adder(n):\n    # return a function that adds n\n    pass\n\nadd5 = make_adder(5)\nprint(add5(10))\n",
      "fullSolution": "def make_adder(n):\n    def add(x):\n        return x + n\n    return add\n\nadd5 = make_adder(5)\nprint(add5(10))\n",
      "expectedOutput": "15",
      "tutorial": "<p class=\"mb-4 text-gray-300\">A closure is a function that remembers variables from the enclosing scope even after that scope has finished executing.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">def make_adder(n):\n    def adder(x):\n        return x + n\n    return adder\n\nadd_five = make_adder(5)\nprint(add_five(10)) # 15</pre></div>",
      "tags": [
        "Beginner",
        "Functions"
      ]
    },
    {
      "id": 78,
      "title": "78. Decorators",
      "language": "python",
      "description": "Write a decorator that uppercases a function's return value.",
      "initialCode": "# Implement @uppercase and decorate greet so it prints HELLO WORLD\n\n",
      "fullSolution": "def uppercase(fn):\n    def wrapper(*args, **kwargs):\n        return fn(*args, **kwargs).upper()\n    return wrapper\n\n@uppercase\ndef greet(name):\n    return f'hello {name}'\n\nprint(greet('world'))\n",
      "expectedOutput": "HELLO WORLD",
      "tutorial": "<p class=\"mb-4 text-gray-300\">A decorator is a function that takes another function as an argument, adds some functionality, and returns another function.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">def my_decorator(func):\n    def wrapper():\n        print(\"Something is happening before the function is called.\")\n        func()\n        print(\"Something is happening after the function is called.\")\n    return wrapper\n\n@my_decorator\ndef say_whee():\n    print(\"Whee!\")\n\nsay_whee()</pre></div>",
      "tags": [
        "Beginner",
        "Functions",
        "Strings",
        "Decorators"
      ]
    },
    {
      "id": 79,
      "title": "79. Dataclasses",
      "language": "python",
      "description": "Define a simple dataclass and print its fields.",
      "initialCode": "from dataclasses import dataclass\n# Define Person(name:str, age:int) and print \"Ada:42\"\n\n",
      "fullSolution": "from dataclasses import dataclass\n\n@dataclass\nclass Person:\n    name: str\n    age: int\n\np = Person('Ada', 42)\nprint(f'{p.name}:{p.age}')\n",
      "expectedOutput": "Ada:42",
      "tutorial": "<p class=\"mb-4 text-gray-300\">A variable is a named reference to a value. Python infers types at runtime (dynamic typing).</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">my_number = 42\nname = \"Alice\"\npi = 3.14\nis_active = True\nprint(name, my_number)</pre></div>",
      "tags": [
        "Beginner",
        "OOP",
        "Type System",
        "Decorators"
      ]
    },
    {
      "id": 80,
      "title": "80. @property",
      "language": "python",
      "description": "Create a computed property for rectangle area.",
      "initialCode": "class Rect:\n    def __init__(self, w, h):\n        self.w, self.h = w, h\n    # Define property area returning w*h\n\nr = Rect(4,5)\nprint(r.area)\n",
      "fullSolution": "class Rect:\n    def __init__(self, w, h):\n        self.w, self.h = w, h\n    @property\n    def area(self):\n        return self.w * self.h\n\nr = Rect(4,5)\nprint(r.area)\n",
      "expectedOutput": "20",
      "tutorial": "<p class=\"mb-4 text-gray-300\">@property turns a method into a computed attribute accessed without parentheses.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">class Person:\n    def __init__(self, first, last):\n        self.first, self.last = first, last\n    @property\n    def full_name(self):\n        return f'{self.first} {self.last}'\nprint(Person('Ada','Lovelace').full_name)</pre></div>",
      "tags": [
        "Beginner",
        "Control Flow",
        "Functions",
        "OOP"
      ]
    },
    {
      "id": 81,
      "title": "81. Type Hints",
      "language": "python",
      "description": "Add type hints to a simple function and call it.",
      "initialCode": "# Define add(a:int,b:int)->int and print add(3,4)\n\n",
      "fullSolution": "def add(a: int, b: int) -> int:\n    return a + b\n\nprint(add(3,4))\n",
      "expectedOutput": "7",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Type hints are a way to statically indicate the type of a value in your Python code. They are not enforced at runtime but can be checked by tools like mypy.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">def greet(name: str) -> str:\n    return \"Hello, \" + name\n\nprint(greet(\"World\"))</pre></div>",
      "tags": [
        "Intermediate",
        "Functions",
        "Type System"
      ]
    },
    {
      "id": 82,
      "title": "82. itertools.chain",
      "language": "python",
      "description": "Concatenate iterables lazily and print all values.",
      "initialCode": "import itertools\n# Chain [1,2] and [3,4] and print each\n\n",
      "fullSolution": "import itertools\nfor x in itertools.chain([1,2],[3,4]):\n    print(x)\n",
      "expectedOutput": "1\n2\n3\n4",
      "tutorial": "<p class=\"mb-4 text-gray-300\">`itertools.chain()` takes several iterables as arguments and returns a single iterator that produces the contents of all of them as if they came from a single sequence.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import itertools\n\nfor i in itertools.chain([1, 2], [\"a\", \"b\"]):\n    print(i)</pre></div>",
      "tags": [
        "Intermediate",
        "Control Flow",
        "Functional",
        "Generators"
      ]
    },
    {
      "id": 83,
      "title": "83. groupby Counts",
      "language": "python",
      "description": "Group words by first letter and count.",
      "initialCode": "import itertools\nwords=['ant','ape','bat']\n# Print a:2 then b:1 (group by first letter)\n\n",
      "fullSolution": "import itertools\nwords=['ant','ape','bat']\nfor key, grp in itertools.groupby(sorted(words, key=lambda w: w[0]), key=lambda w: w[0]):\n    count = sum(1 for _ in grp)\n    print(f'{key}:{count}')\n",
      "expectedOutput": "a:2\nb:1",
      "tutorial": "<p class=\"mb-4 text-gray-300\">`itertools.groupby()` makes an iterator that returns consecutive keys and groups from the iterable. The input needs to be sorted on the same key function.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from itertools import groupby\n\nfor key, group in groupby(\"AAABBC\"): # Works on strings too\n    print(f'{key}: {list(group)}')</pre></div>",
      "tags": [
        "Intermediate",
        "Control Flow",
        "Functions",
        "Collections",
        "Algorithms"
      ]
    },
    {
      "id": 84,
      "title": "84. Counter",
      "language": "python",
      "description": "Use Counter to count letters in a word (preserve first-seen order).",
      "initialCode": "from collections import Counter\n# Count letters in 'banana' and print b:1, a:3, n:2 on new lines\n\n",
      "fullSolution": "from collections import Counter\nfor k,v in Counter('banana').items():\n    print(f'{k}:{v}')\n",
      "expectedOutput": "b:1\na:3\nn:2",
      "tutorial": "<p class=\"mb-4 text-gray-300\">`collections.Counter` is a dict subclass for counting hashable objects. It is an unordered collection where elements are stored as dictionary keys and their counts are stored as dictionary values.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from collections import Counter\n\nc = Counter(\"gallahad\")\nprint(c) # Counter({'a': 3, 'l': 2, 'g': 1, 'h': 1, 'd': 1})</pre></div>",
      "tags": [
        "Intermediate",
        "Control Flow",
        "Collections",
        "Security"
      ]
    },
    {
      "id": 85,
      "title": "85. defaultdict",
      "language": "python",
      "description": "Group values by key without pre-initializing lists.",
      "initialCode": "from collections import defaultdict\n# Append two reds and print the red count (2)\n\n",
      "fullSolution": "from collections import defaultdict\nd = defaultdict(list)\nd['red'].append('apple')\nd['blue'].append('sky')\nd['red'].append('cherry')\nprint(len(d['red']))\n",
      "expectedOutput": "2",
      "tutorial": "<p class=\"mb-4 text-gray-300\">`collections.defaultdict` is a subclass of `dict` that calls a factory function to supply missing values.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from collections import defaultdict\n\nd = defaultdict(int) # 0 is the default for int()\nprint(d[\"missing_key\"]) # prints 0</pre></div>",
      "tags": [
        "Intermediate",
        "Control Flow",
        "Functions",
        "Collections"
      ]
    },
    {
      "id": 86,
      "title": "86. deque",
      "language": "python",
      "description": "Use deque for fast appends/pops on both ends.",
      "initialCode": "from collections import deque\n# Start with [1,2], appendleft(0), append(3), print list(d)\n\n",
      "fullSolution": "from collections import deque\nd = deque([1,2])\nd.appendleft(0)\nd.append(3)\nprint(list(d))\n",
      "expectedOutput": "[0, 1, 2, 3]",
      "tutorial": "<p class=\"mb-4 text-gray-300\">`collections.deque` is a list-like container with fast appends and pops on either end.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from collections import deque\n\nd = deque([\"task2\", \"task3\"])\nd.appendleft(\"task1\")\nd.append(\"task4\")\nprint(d.popleft()) # task1</pre></div>",
      "tags": [
        "Intermediate",
        "Control Flow",
        "Collections"
      ]
    },
    {
      "id": 87,
      "title": "87. namedtuple",
      "language": "python",
      "description": "Create a lightweight tuple-like object with named fields.",
      "initialCode": "from collections import namedtuple\n# Define Point(x,y) and print sum of (2,3)\n\n",
      "fullSolution": "from collections import namedtuple\nPoint = namedtuple('Point', 'x y')\np = Point(2,3)\nprint(p.x + p.y)\n",
      "expectedOutput": "5",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Unpack iterables on the left-hand side to bind multiple names at once.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">a,b,c = (1,2,3)\nprint(a)\nprint(c)</pre></div>",
      "tags": [
        "Intermediate",
        "Collections",
        "OOP",
        "Generators"
      ]
    },
    {
      "id": 88,
      "title": "88. contextmanager",
      "language": "python",
      "description": "Implement a simple context manager using @contextmanager.",
      "initialCode": "from contextlib import contextmanager\n# Print enter, work, exit in order using a context manager\n\n",
      "fullSolution": "from contextlib import contextmanager\n@contextmanager\ndef myctx():\n    print('enter')\n    try:\n        yield\n    finally:\n        print('exit')\n\nwith myctx():\n    print('work')\n",
      "expectedOutput": "enter\nwork\nexit",
      "tutorial": "<p class=\"mb-4 text-gray-300\">The `@contextmanager` decorator lets you build a context manager from a simple generator function, automatically handling the `__enter__` and `__exit__` parts.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from contextlib import contextmanager\n\n@contextmanager\ndef managed_resource(*args, **kwds):\n    print(\"Acquiring resource\")\n    yield\n    print(\"Releasing resource\")\n\nwith managed_resource():\n    print(\"Doing work\")</pre></div>",
      "tags": [
        "Intermediate",
        "Functions",
        "Generators",
        "Decorators"
      ]
    },
    {
      "id": 89,
      "title": "89. suppress",
      "language": "python",
      "description": "Ignore specific exceptions and continue.",
      "initialCode": "from contextlib import suppress\n# Suppress ZeroDivisionError then print kept\n\n",
      "fullSolution": "from contextlib import suppress\nwith suppress(ZeroDivisionError):\n    1/0\nprint('kept')\n",
      "expectedOutput": "kept",
      "tutorial": "<p class=\"mb-4 text-gray-300\">`contextlib.suppress` is a context manager to selectively ignore specified exceptions.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from contextlib import suppress\n\nwith suppress(FileNotFoundError):\n    with open(\"non_existent_file.txt\") as f:\n        print(\"This will not print\")\n\nprint(\"Program continues without crashing\")</pre></div>",
      "tags": [
        "Intermediate",
        "I/O"
      ]
    },
    {
      "id": 90,
      "title": "90. pathlib",
      "language": "python",
      "description": "Write then read a small text file using pathlib.",
      "initialCode": "from pathlib import Path\n# Write 'hi' to note.txt then read and print it\n\n",
      "fullSolution": "from pathlib import Path\np = Path('note.txt')\np.write_text('hi')\nprint(p.read_text())\n",
      "expectedOutput": "hi",
      "tutorial": "<p class=\"mb-4 text-gray-300\">The `pathlib` module offers classes representing filesystem paths with semantics appropriate for different operating systems.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from pathlib import Path\n\np = Path(\"my_file.txt\")\np.write_text(\"Hello from pathlib!\")\nprint(p.read_text())</pre></div>",
      "tags": [
        "Intermediate",
        "Control Flow",
        "I/O"
      ]
    },
    {
      "id": 91,
      "title": "91. JSON dumps",
      "language": "python",
      "description": "Serialize a dict to a compact JSON string.",
      "initialCode": "import json\n# Dump {'a':1,'b':2} without spaces and print\n\n",
      "fullSolution": "import json\ns = json.dumps({'a':1,'b':2}, separators=(',',':'))\nprint(s)\n",
      "expectedOutput": "{\"a\":1,\"b\":2}",
      "tutorial": "<p class=\"mb-4 text-gray-300\">`json.dumps()` serializes a Python object to a JSON formatted `str`.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import json\n\ndata = {\"name\": \"John\", \"age\": 30}\njson_string = json.dumps(data, indent=2)\nprint(json_string)</pre></div>",
      "tags": [
        "Intermediate",
        "Collections",
        "OOP",
        "Serialization"
      ]
    },
    {
      "id": 92,
      "title": "92. CSV write/read",
      "language": "python",
      "description": "Write a tiny CSV then read it back and print a value.",
      "initialCode": "import csv\n# Write rows ['x','y'] and ['1','2'] to data.csv, read and print 2\n\n",
      "fullSolution": "import csv\nwith open('data.csv','w', newline='') as f:\n    w = csv.writer(f)\n    w.writerow(['x','y'])\n    w.writerow(['1','2'])\nwith open('data.csv') as f:\n    r = csv.reader(f)\n    header = next(r)\n    row = next(r)\n    print(row[1])\n",
      "expectedOutput": "2",
      "tutorial": "<p class=\"mb-4 text-gray-300\">The `csv` module implements classes to read and write tabular data in CSV format.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import csv, io\n\noutput = io.StringIO()\nwriter = csv.writer(output)\nwriter.writerow([\"name\", \"age\"])\nwriter.writerow([\"Alice\", 25])\nprint(output.getvalue())</pre></div>",
      "tags": [
        "Intermediate",
        "Strings",
        "OOP",
        "I/O",
        "Serialization"
      ]
    },
    {
      "id": 93,
      "title": "93. Regex Substitution",
      "language": "python",
      "description": "Replace all digits with # and print the result.",
      "initialCode": "import re\n# Replace digits in 'a1b2' with '#' and print\n\n",
      "fullSolution": "import re\nprint(re.sub(r'\\\\d', '#', 'a1b2'))\n",
      "expectedOutput": "a#b#",
      "tutorial": "<p class=\"mb-4 text-gray-300\">`re.sub()` returns the string obtained by replacing the leftmost non-overlapping occurrences of pattern in string by the replacement `repl`.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import re\n\nprint(re.sub(r\"\\d+\", \"#\", \"There are 12 apples and 34 oranges.\"))</pre></div>",
      "tags": [
        "Intermediate",
        "Strings",
        "Regex"
      ]
    },
    {
      "id": 94,
      "title": "94. datetime Format",
      "language": "python",
      "description": "Parse an ISO date and print a different format.",
      "initialCode": "from datetime import datetime\n# Parse '2023-01-02' and print '2023/01/02'\n\n",
      "fullSolution": "from datetime import datetime\nd = datetime.fromisoformat('2023-01-02')\nprint(d.strftime('%Y/%m/%d'))\n",
      "expectedOutput": "2023/01/02",
      "tutorial": "<p class=\"mb-4 text-gray-300\">The `datetime` module supplies classes for manipulating dates and times.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from datetime import datetime\n\nnow = datetime.now()\nprint(now.strftime(\"%Y-%m-%d %H:%M:%S\"))</pre></div>",
      "tags": [
        "Intermediate",
        "Control Flow",
        "Strings",
        "Date/Time",
        "Parsing"
      ]
    },
    {
      "id": 95,
      "title": "95. Logging",
      "language": "python",
      "description": "Configure logging to print a simple INFO message.",
      "initialCode": "import logging\n# Configure to print 'INFO:Ready' and log it\n\n",
      "fullSolution": "import logging\nlogging.basicConfig(level=logging.INFO, format='%(levelname)s:%(message)s')\nlogging.info('Ready')\n",
      "expectedOutput": "INFO:Ready",
      "tutorial": "<p class=\"mb-4 text-gray-300\">The `logging` module defines functions and classes which implement a flexible event logging system for applications and libraries.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import logging\n\nlogging.basicConfig(level=logging.INFO)\nlogging.info(\"This is an info message.\")</pre></div>",
      "tags": [
        "Intermediate",
        "Control Flow",
        "Strings",
        "Debugging"
      ]
    },
    {
      "id": 96,
      "title": "96. *args",
      "language": "python",
      "description": "Use *args to accept a variable number of arguments.",
      "initialCode": "# Define f(*args) printing len(args); call f(1,2,3)\n\n",
      "fullSolution": "def f(*args):\n    print(len(args))\n\nf(1,2,3)\n",
      "expectedOutput": "3",
      "tutorial": "<p class=\"mb-4 text-gray-300\">The special syntax `*args` in function definitions is used to pass a variable number of non-keyword arguments to a function.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">def my_sum(*numbers):\n    return sum(numbers)\n\nprint(my_sum(1, 2, 3, 4)) # 10</pre></div>",
      "tags": [
        "Intermediate",
        "Functions"
      ]
    },
    {
      "id": 97,
      "title": "97. functools.partial",
      "language": "python",
      "description": "Create a function with one argument pre-filled.",
      "initialCode": "from functools import partial\n# Make add5 so add5(7) == 12 and print it\n\n",
      "fullSolution": "from functools import partial\n\ndef add(a,b):\n    return a+b\n\nadd5 = partial(add, 5)\nprint(add5(7))\n",
      "expectedOutput": "12",
      "tutorial": "<p class=\"mb-4 text-gray-300\">`functools.partial` allows you to \"freeze\" some portion of a function's arguments and/or keywords, resulting in a new object with a simplified signature.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from functools import partial\n\nbasetwo = partial(int, base=2)\nprint(basetwo(\"10010\")) # 18</pre></div>",
      "tags": [
        "Intermediate",
        "Functions",
        "OOP",
        "Security",
        "Functional"
      ]
    },
    {
      "id": 98,
      "title": "98. lru_cache",
      "language": "python",
      "description": "Memoize an expensive function and reuse results.",
      "initialCode": "from functools import lru_cache\n# Memoize fib and print fib(10)\n\n",
      "fullSolution": "from functools import lru_cache\n\n@lru_cache(maxsize=None)\ndef fib(n):\n    return n if n<2 else fib(n-1)+fib(n-2)\n\nprint(fib(10))\n",
      "expectedOutput": "55",
      "tutorial": "<p class=\"mb-4 text-gray-300\">`functools.lru_cache` is a decorator to wrap a function with a memoizing callable that saves up to the `maxsize` most recent calls.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from functools import lru_cache\n\n@lru_cache(maxsize=None)\ndef fib(n):\n    if n < 2: return n\n    return fib(n-1) + fib(n-2)\n\nprint(fib(10)) # 55</pre></div>",
      "tags": [
        "Intermediate",
        "Control Flow",
        "Functions",
        "Performance",
        "Functional"
      ]
    },
    {
      "id": 99,
      "title": "99. Custom Ordering (__lt__)",
      "language": "python",
      "description": "Implement __lt__ to make a class sortable.",
      "initialCode": "# Define Box with value and __lt__ then sort [3,1,2] boxes and print values\n\n",
      "fullSolution": "class Box:\n    def __init__(self, v):\n        self.v = v\n    def __lt__(self, other):\n        return self.v < other.v\n\nboxes = [Box(3), Box(1), Box(2)]\nfor b in sorted(boxes):\n    print(b.v)\n",
      "expectedOutput": "1\n2\n3",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Implementing the `__lt__` (less than) rich comparison method allows instances of your class to be sorted naturally.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">class Person:\n    def __init__(self, name, age):\n        self.name, self.age = name, age\n    def __lt__(self, other):\n        return self.age < other.age\n\np1 = Person(\"Alice\", 25)\np2 = Person(\"Bob\", 30)\nprint(p1 < p2) # True</pre></div>",
      "tags": [
        "Intermediate",
        "Control Flow",
        "Functions",
        "OOP",
        "Algorithms"
      ]
    },
    {
      "id": 100,
      "title": "100. __str__",
      "language": "python",
      "description": "Customize string representation for a class.",
      "initialCode": "# Make Person print as Person(Alice)\n\n",
      "fullSolution": "class Person:\n    def __init__(self, name):\n        self.name = name\n    def __str__(self):\n        return f'Person({self.name})'\n\nprint(Person('Alice'))\n",
      "expectedOutput": "Person(Alice)",
      "tutorial": "<p class=\"mb-4 text-gray-300\">The `__str__` method should return a \"user-friendly\" string representation of the object, which is what `print()` and `str()` will display.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">class Person:\n    def __init__(self, name):\n        self.name = name\n    def __str__(self):\n        return f\"Person: {self.name}\"\n\nprint(Person(\"Alice\"))</pre></div>",
      "tags": [
        "Intermediate",
        "Control Flow",
        "Functions",
        "OOP"
      ]
    },
    {
      "id": 101,
      "title": "101. Ordered Dataclass",
      "language": "python",
      "description": "Make dataclass orderable and compare two instances.",
      "initialCode": "from dataclasses import dataclass\n# Make Item(order=True) and print Item(5) < Item(7)\n\n",
      "fullSolution": "from dataclasses import dataclass\n\n@dataclass(order=True)\nclass Item:\n    price: int\n\nprint(Item(5) < Item(7))\n",
      "expectedOutput": "True",
      "tutorial": "<p class=\"mb-4 text-gray-300\">A variable is a named reference to a value. Python infers types at runtime (dynamic typing).</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">my_number = 42\nname = \"Alice\"\npi = 3.14\nis_active = True\nprint(name, my_number)</pre></div>",
      "tags": [
        "Intermediate",
        "OOP",
        "Type System",
        "Decorators"
      ]
    },
    {
      "id": 102,
      "title": "102. itertools.product",
      "language": "python",
      "description": "Cartesian product of two lists.",
      "initialCode": "import itertools\n# Print 1a,1b,2a,2b each on new lines\n\n",
      "fullSolution": "import itertools\nfor a,b in itertools.product([1,2], ['a','b']):\n    print(f'{a}{b}')\n",
      "expectedOutput": "1a\n1b\n2a\n2b",
      "tutorial": "<p class=\"mb-4 text-gray-300\">`itertools.product()` provides the cartesian product of input iterables.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import itertools\n\nfor p in itertools.product(\"AB\", \"12\"):\n    print(\"\".join(p)) # A1, A2, B1, B2</pre></div>",
      "tags": [
        "Intermediate",
        "Control Flow",
        "Strings",
        "Functional",
        "Generators"
      ]
    },
    {
      "id": 103,
      "title": "103. permutations",
      "language": "python",
      "description": "Generate all length-2 permutations of 'abc'.",
      "initialCode": "import itertools\n# Print: ab, ac, ba, bc, ca, cb (each on new line)\n\n",
      "fullSolution": "import itertools\nfor a,b in itertools.permutations('abc', 2):\n    print(a+b)\n",
      "expectedOutput": "ab\nac\nba\nbc\nca\ncb",
      "tutorial": "<p class=\"mb-4 text-gray-300\">`itertools.permutations()` returns successive r-length permutations of elements in an iterable.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import itertools\n\nprint(list(itertools.permutations(\"ABC\", 2)))</pre></div>",
      "tags": [
        "Intermediate",
        "Control Flow",
        "Collections",
        "Algorithms",
        "Functional"
      ]
    },
    {
      "id": 104,
      "title": "104. accumulate",
      "language": "python",
      "description": "Produce running totals and print them.",
      "initialCode": "import itertools\n# Accumulate sums over [1,2,3] and print each\n\n",
      "fullSolution": "import itertools\nfor x in itertools.accumulate([1,2,3]):\n    print(x)\n",
      "expectedOutput": "1\n3\n6",
      "tutorial": "<p class=\"mb-4 text-gray-300\">`itertools.accumulate()` makes an iterator that returns accumulated sums, or accumulated results of other binary functions.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import itertools\n\nprint(list(itertools.accumulate([1, 2, 3, 4]))) # [1, 3, 6, 10]</pre></div>",
      "tags": [
        "Intermediate",
        "Control Flow",
        "Collections",
        "Functional"
      ]
    },
    {
      "id": 105,
      "title": "105. Exception Chaining",
      "language": "python",
      "description": "Raise from another exception and show the cause type.",
      "initialCode": "# Print ValueError by raising RuntimeError from ValueError\n\n",
      "fullSolution": "try:\n    try:\n        raise ValueError('x')\n    except ValueError as e:\n        raise RuntimeError('wrap') from e\nexcept Exception as e:\n    print(type(e.__cause__).__name__)\n",
      "expectedOutput": "ValueError",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Wrap risky code in try/except. Catch specific exceptions first to handle them appropriately.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">try:\n    1/0\nexcept ZeroDivisionError:\n    print('Oops! Division by zero')</pre></div>",
      "tags": [
        "Intermediate",
        "Error Handling"
      ]
    },
    {
      "id": 106,
      "title": "106. threading + Lock",
      "language": "python",
      "description": "Use two threads to append values safely, then sum.",
      "initialCode": "import threading\n# Start two threads appending 1 and 2 (with a lock) then print the sum 3\n\n",
      "fullSolution": "import threading\nlock = threading.Lock()\nvals = []\n\ndef add(v):\n    with lock:\n        vals.append(v)\n\nt1 = threading.Thread(target=add, args=(1,))\nt2 = threading.Thread(target=add, args=(2,))\nt1.start(); t2.start(); t1.join(); t2.join()\nprint(sum(vals))\n",
      "expectedOutput": "3",
      "tutorial": "<p class=\"mb-4 text-gray-300\">The `threading` module provides a way to create and manage threads. A `Lock` is a synchronization primitive that is not owned by a particular thread when locked.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import threading\n\nlock = threading.Lock()\n\ndef critical_section():\n    with lock:\n        print(\"Critical section accessed\")\n\ncritical_section()</pre></div>",
      "tags": [
        "Intermediate",
        "Functions",
        "Strings",
        "Concurrency"
      ]
    },
    {
      "id": 107,
      "title": "107. ThreadPoolExecutor",
      "language": "python",
      "description": "Submit tasks and collect results in order.",
      "initialCode": "from concurrent.futures import ThreadPoolExecutor\n# Submit squares 1..3 and print results 1,4,9 on new lines\n\n",
      "fullSolution": "from concurrent.futures import ThreadPoolExecutor\nwith ThreadPoolExecutor(max_workers=3) as ex:\n    futs = [ex.submit(lambda x: x*x, i) for i in (1,2,3)]\n    for f in futs:\n        print(f.result())\n",
      "expectedOutput": "1\n4\n9",
      "tutorial": "<p class=\"mb-4 text-gray-300\">`concurrent.futures.ThreadPoolExecutor` provides a high-level interface for asynchronously executing callables in a pool of threads.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from concurrent.futures import ThreadPoolExecutor\n\nwith ThreadPoolExecutor(max_workers=1) as executor:\n    future = executor.submit(pow, 2, 5)\n    print(future.result()) # 32</pre></div>",
      "tags": [
        "Intermediate",
        "Control Flow",
        "Functions",
        "OOP",
        "Math and Stats"
      ]
    },
    {
      "title": "108. Pick the Right Concurrency Tool",
      "language": "python",
      "description": "Complete pick_tool(kind) so 'many-waits' -> 'asyncio', 'io-bound' -> 'threading', and 'cpu-bound' -> 'multiprocessing'. Then print the tool for each workload.",
      "initialCode": "def pick_tool(kind):\n    # Return the best concurrency tool for the workload kind\n    pass\n\nworkloads = ['many-waits', 'io-bound', 'cpu-bound']\nfor work in workloads:\n    print(pick_tool(work))\n",
      "fullSolution": "def pick_tool(kind):\n    mapping = {\n        'many-waits': 'asyncio',\n        'io-bound': 'threading',\n        'cpu-bound': 'multiprocessing',\n    }\n    return mapping[kind]\n\nworkloads = ['many-waits', 'io-bound', 'cpu-bound']\nfor work in workloads:\n    print(pick_tool(work))\n",
      "expectedOutput": "asyncio\nthreading\nmultiprocessing",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Different workloads call for different concurrency models. Network-heavy or timer-heavy tasks fit <code>asyncio</code>, blocking I/O suits threads, and CPU-intensive crunching benefits from separate processes.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">def choose(work):\n    if work == \"io-bound\":\n        return \"threading\"\n    if work == \"cpu-bound\":\n        return \"multiprocessing\"\n    return \"asyncio\"\n\nprint(choose('io-bound'))  # threading</pre></div>",
      "id": 108,
      "tags": [
        "Intermediate",
        "Control Flow",
        "Functions",
        "Concurrency",
        "Async"
      ]
    },
    {
      "title": "109. WSGI Hello App",
      "language": "python",
      "description": "Implement a minimal WSGI app that returns 'Hello, Ada!' and prints the decoded response body using a fake start_response.",
      "initialCode": "def app(environ, start_response):\n    # Call start_response with '200 OK' and text/plain header, return [b'Hello, Ada!']\n    pass\n\ncaptured = {}\n\ndef fake_start_response(status, headers):\n    captured['status'] = status\n    captured['headers'] = headers\n\nbody = app({}, fake_start_response)\nprint(body[0].decode('utf-8'))\n",
      "fullSolution": "def app(environ, start_response):\n    start_response('200 OK', [('Content-Type', 'text/plain')])\n    return [b'Hello, Ada!']\n\ncaptured = {}\n\ndef fake_start_response(status, headers):\n    captured['status'] = status\n    captured['headers'] = headers\n\nbody = app({}, fake_start_response)\nprint(body[0].decode('utf-8'))\n",
      "expectedOutput": "Hello, Ada!",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Flask and Django sit atop the WSGI protocol. A WSGI application is a callable returning an iterable of byte chunks after announcing the status and headers via <code>start_response</code>.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">def app(environ, start_response):\n    start_response('200 OK', [('Content-Type', 'text/plain')])\n    return [b'OK']\n</pre></div>",
      "id": 109,
      "tags": [
        "Intermediate",
        "Flask",
        "Functions",
        "Networking",
        "Web"
      ]
    },
    {
      "title": "110. Mini Route Decorator",
      "language": "python",
      "description": "Build a decorator that stores view functions in a routes dict and returns the registered result.",
      "initialCode": "routes = {}\n\ndef route(path):\n    # Implement decorator that stores the function under routes[path]\n    pass\n\n@route('/status')\ndef status():\n    return 'OK'\n\nprint(routes['/status']())\n",
      "fullSolution": "routes = {}\n\ndef route(path):\n    def decorator(func):\n        routes[path] = func\n        return func\n    return decorator\n\n@route('/status')\ndef status():\n    return 'OK'\n\nprint(routes['/status']())\n",
      "expectedOutput": "OK",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Frameworks like Flask register view functions via decorators. Capturing the function and keeping a route table mirrors how URL maps are built.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">views = {}\n\ndef register(name):\n    def wrap(fn):\n        views[name] = fn\n        return fn\n    return wrap\n\n@register('home')\ndef home():\n    return 'hi'</pre></div>",
      "id": 110,
      "tags": [
        "Intermediate",
        "Flask",
        "Functions",
        "Collections",
        "Web"
      ]
    },
    {
      "title": "111. Flask Mini Project Plan",
      "language": "python",
      "description": "Build a project checklist that lists the files for a simple Flask app and print each path with its purpose.",
      "initialCode": "project_name = 'inventory_app'\nfiles = [\n    ('app.py', 'create Flask app and routes'),\n    ('templates/base.html', 'layout template'),\n    ('templates/index.html', 'list inventory items'),\n    ('static/style.css', 'basic styling')\n]\n\n# Print lines in format '<project>/<path> -> <description>'\n",
      "fullSolution": "project_name = 'inventory_app'\nfiles = [\n    ('app.py', 'create Flask app and routes'),\n    ('templates/base.html', 'layout template'),\n    ('templates/index.html', 'list inventory items'),\n    ('static/style.css', 'basic styling')\n]\n\nfor path, desc in files:\n    print(f\"{project_name}/{path} -> {desc}\")\n",
      "expectedOutput": "inventory_app/app.py -> create Flask app and routes\ninventory_app/templates/base.html -> layout template\ninventory_app/templates/index.html -> list inventory items\ninventory_app/static/style.css -> basic styling",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Outlining your project structure provides a roadmap for implementation and onboarding teammates.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">files = [('app.py', 'entrypoint'), ('templates/home.html', 'landing page')]\nfor path, note in files:\n    print(f\"blog/{path} -> {note}\")</pre></div>",
      "tags": [
        "Intermediate",
        "Flask",
        "Project",
        "Control Flow",
        "Strings"
      ],
      "id": 111
    },
    {
      "title": "112. Flask Skeleton Files",
      "language": "python",
      "description": "Generate minimal contents for app.py and templates/index.html to turn the project plan into starter code.",
      "initialCode": "app_py = \"\"\"from flask import Flask, render_template\\n\\napp = Flask(__name__)\\n\\n@app.route('/')\\ndef index():\\n    return render_template('index.html', items=[])\\n\"\"\"\n\nindex_html = \"\"\"<!DOCTYPE html>\\n<html lang='en'>\\n<head><meta charset='utf-8'><title>Inventory</title></head>\\n<body>\\n    <h1>Inventory</h1>\\n    {% if items %}\\n        <ul>{% for item in items %}<li>{{ item }}</li>{% endfor %}</ul>\\n    {% else %}<p>No items yet.</p>{% endif %}\\n</body>\\n</html>\\n\"\"\"\n\n# Print file -> snippet mapping\n",
      "fullSolution": "app_py = \"\"\"from flask import Flask, render_template\\n\\napp = Flask(__name__)\\n\\n@app.route('/')\\ndef index():\\n    return render_template('index.html', items=[])\\n\"\"\"\n\nindex_html = \"\"\"<!DOCTYPE html>\\n<html lang='en'>\\n<head><meta charset='utf-8'><title>Inventory</title></head>\\n<body>\\n    <h1>Inventory</h1>\\n    {% if items %}\\n        <ul>{% for item in items %}<li>{{ item }}</li>{% endfor %}</ul>\\n    {% else %}<p>No items yet.</p>{% endif %}\\n</body>\\n</html>\\n\"\"\"\n\nprint('app.py ->')\nprint(app_py.strip())\nprint('templates/index.html ->')\nprint(index_html.strip())\n",
      "expectedOutput": "app.py ->\nfrom flask import Flask, render_template\n\napp = Flask(__name__)\n\n@app.route('/')\ndef index():\n    return render_template('index.html', items=[])\ntemplates/index.html ->\n<!DOCTYPE html>\n<html lang='en'>\n<head><meta charset='utf-8'><title>Inventory</title></head>\n<body>\n    <h1>Inventory</h1>\n    {% if items %}\n        <ul>{% for item in items %}<li>{{ item }}</li>{% endfor %}</ul>\n    {% else %}<p>No items yet.</p>{% endif %}\n</body>\n</html>",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Provide the starter files so learners can launch the project immediately after planning.</p>\n<h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4>\n<div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">app.py ->\nfrom flask import Flask, render_template\n\napp = Flask(__name__)\n\n@app.route('/')\ndef index():\n    return render_template('index.html', items=[])\ntemplates/index.html ->\n&lt;!DOCTYPE html&gt;\n&lt;html lang='en'&gt;\n&lt;head&gt;&lt;meta charset='utf-8'&gt;&lt;title&gt;Inventory&lt;/title&gt;&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Inventory&lt;/h1&gt;\n&lt;/body&gt;\n&lt;/html&gt;</pre></div>\n<p class=\"mt-4 text-gray-300\">Show the minimal skeleton and teammates will extend it with their own routes and templates.</p>",
      "tags": [
        "Intermediate",
        "Flask",
        "Project",
        "Control Flow",
        "Functions"
      ],
      "id": 112
    },
    {
      "title": "113. Flask Run Checklist",
      "language": "python",
      "description": "Print the shell commands to set FLASK_APP, enable debug reload, and run the development server.",
      "initialCode": "project = 'inventory_app'\n\n# Print export/set commands and flask run\n",
      "fullSolution": "project = 'inventory_app'\n\nprint(f'export FLASK_APP={project}.app')\nprint('export FLASK_ENV=development')\nprint('flask run')\n",
      "expectedOutput": "export FLASK_APP=inventory_app.app\nexport FLASK_ENV=development\nflask run",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Capturing the standard run commands helps teammates boot the app without hunting through docs.</p>\n<h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4>\n<div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">export FLASK_APP=inventory_app.app\nexport FLASK_ENV=development\nflask run</pre></div>\n<p class=\"mt-4 text-gray-300\">Document the environment exports alongside the run command to eliminate onboarding guesswork.</p>",
      "tags": [
        "Intermediate",
        "Flask",
        "Tooling",
        "Collections",
        "Networking"
      ],
      "id": 113
    },
    {
      "title": "114. Capstone: Release Checklist",
      "language": "python",
      "description": "Summarize the release steps for the inventory app: merge, cherry-pick, run tests, and launch the server.",
      "initialCode": "tasks = [\n    'git checkout main',\n    'git merge feature/inventory-table',\n    'git cherry-pick fix-hotkey',\n    'pytest',\n    'flask run'\n]\n\n# Print each task numbered starting from 1\n",
      "fullSolution": "tasks = [\n    'git checkout main',\n    'git merge feature/inventory-table',\n    'git cherry-pick fix-hotkey',\n    'pytest',\n    'flask run'\n]\n\nfor i, step in enumerate(tasks, start=1):\n    print(f\"{i}. {step}\")\n",
      "expectedOutput": "1. git checkout main\n2. git merge feature/inventory-table\n3. git cherry-pick fix-hotkey\n4. pytest\n5. flask run",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Capstones knit together the Git workflows and project scripts you just practiced. Turn them into a numbered checklist so handoffs stay organized.</p>\n<h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4>\n<div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">1. git checkout main\n2. git merge feature/inventory-table\n3. git cherry-pick fix-hotkey\n4. pytest\n5. flask run</pre></div>\n<p class=\"mt-4 text-gray-300\">Keep the verb at the front of each line so ops can skim for the next action.</p>",
      "tags": [
        "Intermediate",
        "Git",
        "Workflow",
        "Project",
        "Control Flow"
      ],
      "id": 114
    },
    {
      "title": "115. Deploy Flask with Gunicorn",
      "language": "python",
      "description": "Print the commands to install gunicorn, set FLASK_APP, and run the app with Gunicorn for production.",
      "initialCode": "project = 'inventory_app'\n\n# Print pip install, export FLASK_APP, then gunicorn command\n",
      "fullSolution": "project = 'inventory_app'\n\nprint('pip install gunicorn')\nprint(f\"export FLASK_APP={project}.app\")\nprint('gunicorn -w 4 -b 0.0.0.0:8000 app:app')\n",
      "expectedOutput": "pip install gunicorn\nexport FLASK_APP=inventory_app.app\ngunicorn -w 4 -b 0.0.0.0:8000 app:app",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Gunicorn is the go-to WSGI server for production Flask apps. Always pin the module path (app:app) and bind to the address your platform provides.</p>\n<h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4>\n<div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">pip install gunicorn\nexport FLASK_APP=inventory_app.app\ngunicorn -w 4 -b 0.0.0.0:8000 app:app</pre></div>\n<p class=\"mt-4 text-gray-300\">Pair the install, config, and launch commands so the handoff reads like a miniature runbook.</p>",
      "tags": [
        "Intermediate",
        "Flask",
        "Deployment",
        "Control Flow",
        "Collections"
      ],
      "id": 115
    },
    {
      "title": "116. Capstone: Smoke Tests",
      "language": "python",
      "description": "Run pytest smoke tests after deployment to confirm the inventory app is healthy.",
      "initialCode": "commands = [\n    'export FLASK_APP=inventory_app.app',\n    'pytest tests/test_smoke.py',\n    'curl -f http://localhost:8000/health'\n]\n\n# Print commands in order\n",
      "fullSolution": "commands = [\n    'export FLASK_APP=inventory_app.app',\n    'pytest tests/test_smoke.py',\n    'curl -f http://localhost:8000/health'\n]\n\nfor cmd in commands:\n    print(cmd)\n",
      "expectedOutput": "export FLASK_APP=inventory_app.app\npytest tests/test_smoke.py\ncurl -f http://localhost:8000/health",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Always follow deployment with automated smoke tests and a quick HTTP probe. Fail fast if routes or environment variables are misconfigured.</p>\n<h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4>\n<div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">export FLASK_APP=inventory_app.app\npytest tests/test_smoke.py\ncurl -f http://localhost:8000/health</pre></div>\n<p class=\"mt-4 text-gray-300\">These checks catch both Python exceptions and missing infra wiring before customers notice.</p>",
      "tags": [
        "Intermediate",
        "Flask",
        "Testing",
        "Project",
        "Control Flow"
      ],
      "id": 116
    },
    {
      "id": 117,
      "title": "117. asyncio.gather",
      "language": "python",
      "description": "Run async tasks concurrently and print results.",
      "initialCode": "import asyncio\n# Define async f(x)->2*x; gather for 1,2,3 and print results\n\n",
      "fullSolution": "import asyncio\nasync def f(x):\n    return 2*x\nasync def main():\n    res = await asyncio.gather(f(1), f(2), f(3))\n    for v in res:\n        print(v)\nasyncio.run(main())\n",
      "expectedOutput": "2\n4\n6",
      "tutorial": "<p class=\"mb-4 text-gray-300\">`asyncio` is a library to write concurrent code using the `async/await` syntax. `asyncio.gather` runs awaitable objects concurrently.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import asyncio\n\nasync def main():\n    print(await asyncio.gather(asyncio.sleep(1, result=\"Done\")))\n\nasyncio.run(main())</pre></div>",
      "tags": [
        "Intermediate",
        "Control Flow",
        "Functions",
        "Concurrency",
        "Async"
      ]
    },
    {
      "id": 118,
      "title": "118. glob",
      "language": "python",
      "description": "Create files and match them with glob pattern.",
      "initialCode": "import glob\n# Create a.txt and b.txt then glob and print names sorted\n\n",
      "fullSolution": "import glob\nopen('a.txt','w').close()\nopen('b.txt','w').close()\nfor name in sorted(glob.glob('*.txt')):\n    print(name)\n",
      "expectedOutput": "a.txt\nb.txt",
      "tutorial": "<p class=\"mb-4 text-gray-300\">The `glob` module finds all the pathnames matching a specified pattern according to the rules used by the Unix shell.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import glob\n\n# This example won't run here, but shows the concept.\n# open(\"a.txt\", \"w\"); open(\"b.log\", \"w\")\n# print(glob.glob(\"*.txt\")) # ['a.txt']</pre></div>",
      "tags": [
        "Intermediate",
        "Control Flow",
        "Algorithms",
        "I/O"
      ]
    },
    {
      "id": 119,
      "title": "119. decimal",
      "language": "python",
      "description": "Exact decimal arithmetic for financial values.",
      "initialCode": "from decimal import Decimal\n# Print Decimal('0.1')+Decimal('0.2')\n\n",
      "fullSolution": "from decimal import Decimal\nprint(Decimal('0.1') + Decimal('0.2'))\n",
      "expectedOutput": "0.3",
      "tutorial": "<p class=\"mb-4 text-gray-300\">The `decimal` module provides a `Decimal` datatype for decimal floating-point arithmetic, which is useful for financial applications.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from decimal import Decimal\n\nprint(Decimal(\"0.1\") + Decimal(\"0.2\")) # 0.3</pre></div>",
      "tags": [
        "Intermediate",
        "Control Flow",
        "Math and Stats"
      ]
    },
    {
      "id": 120,
      "title": "120. fractions",
      "language": "python",
      "description": "Do rational arithmetic with exact fractions.",
      "initialCode": "from fractions import Fraction\n# Print Fraction(1,3)+Fraction(1,6)\n\n",
      "fullSolution": "from fractions import Fraction\nprint(Fraction(1,3) + Fraction(1,6))\n",
      "expectedOutput": "1/2",
      "tutorial": "<p class=\"mb-4 text-gray-300\">The `fractions` module provides support for rational number arithmetic.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from fractions import Fraction\n\nprint(Fraction(1, 3) + Fraction(1, 3)) # 2/3</pre></div>",
      "tags": [
        "Intermediate",
        "Control Flow",
        "Math and Stats"
      ]
    },
    {
      "id": 121,
      "title": "121. bisect_left",
      "language": "python",
      "description": "Binary search for insertion position.",
      "initialCode": "import bisect\n# Find insertion index of 3 in [1,2,4,5] using bisect_left and print\n\n",
      "fullSolution": "import bisect\nprint(bisect.bisect_left([1,2,4,5], 3))\n",
      "expectedOutput": "2",
      "tutorial": "<p class=\"mb-4 text-gray-300\">The `bisect` module provides support for maintaining a list in sorted order without having to sort the list after each insertion.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import bisect\n\nitems = [1, 2, 4]\nbisect.insort(items, 3)\nprint(items) # [1, 2, 3, 4]</pre></div>",
      "tags": [
        "Intermediate",
        "Control Flow",
        "Collections",
        "Algorithms"
      ]
    },
    {
      "id": 122,
      "title": "122. heapq",
      "language": "python",
      "description": "Use a min-heap to pop the smallest item.",
      "initialCode": "import heapq\n# Push 3,1,2; pop and print the smallest\n\n",
      "fullSolution": "import heapq\nh=[]\nheapq.heappush(h,3); heapq.heappush(h,1); heapq.heappush(h,2)\nprint(heapq.heappop(h))\n",
      "expectedOutput": "1",
      "tutorial": "<p class=\"mb-4 text-gray-300\">The `heapq` module provides an implementation of the min-heap queue algorithm.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import heapq\n\nh = [3, 1, 4, 1, 5, 9, 2]\nheapq.heapify(h)\nprint(heapq.heappop(h)) # 1</pre></div>",
      "tags": [
        "Intermediate",
        "Collections",
        "Algorithms"
      ]
    },
    {
      "id": 123,
      "title": "123. statistics.mean",
      "language": "python",
      "description": "Compute the mean of a small list.",
      "initialCode": "import statistics\n# Print mean of [1,2,3]\n\n",
      "fullSolution": "import statistics\nprint(statistics.mean([1,2,3]))\n",
      "expectedOutput": "2",
      "tutorial": "<p class=\"mb-4 text-gray-300\">The `statistics` module provides functions for calculating mathematical statistics of numeric data.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import statistics\n\nprint(statistics.mean([1, 2, 3, 4, 4])) # 2.8</pre></div>",
      "tags": [
        "Intermediate",
        "Control Flow",
        "Math and Stats"
      ]
    },
    {
      "id": 124,
      "title": "124. Slice Assignment",
      "language": "python",
      "description": "Replace a slice of a list in-place.",
      "initialCode": "letters=['a','b','c']\n# Replace letters[1:3] with ['X'] then print letters\n\n",
      "fullSolution": "letters=['a','b','c']\nletters[1:3] = ['X']\nprint(letters)\n",
      "expectedOutput": "['a', 'X']",
      "tutorial": "<p class=\"mb-4 text-gray-300\">You can assign to a slice of a list to replace, remove, or insert elements.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">a = [1, 2, 3, 4]\na[1:3] = [8, 9, 10]\nprint(a) # [1, 8, 9, 10, 4]</pre></div>",
      "tags": [
        "Intermediate",
        "Collections"
      ]
    },
    {
      "id": 125,
      "title": "125. OrderedDict",
      "language": "python",
      "description": "Preserve insertion order of keys explicitly.",
      "initialCode": "from collections import OrderedDict\n# Create OrderedDict and print keys in order b then a\n\n",
      "fullSolution": "from collections import OrderedDict\nd = OrderedDict([('b',2),('a',1)])\nfor k in d.keys():\n    print(k)\n",
      "expectedOutput": "b\na",
      "tutorial": "<p class=\"mb-4 text-gray-300\">`collections.OrderedDict` is a dict subclass that remembers the order that keys were first inserted. (Note: standard dicts in Python 3.7+ also preserve insertion order.)</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from collections import OrderedDict\n\nd = OrderedDict.fromkeys(\"abcde\")\nd.move_to_end(\"b\")\nprint(\"\".join(d.keys())) # acdeb</pre></div>",
      "tags": [
        "Intermediate",
        "Control Flow",
        "Strings",
        "Collections"
      ]
    },
    {
      "id": 126,
      "title": "126. frozenset",
      "language": "python",
      "description": "Use an immutable set and test membership.",
      "initialCode": "# Create frozenset({1,2,3}) and print if 2 in it\n\n",
      "fullSolution": "s = frozenset({1,2,3})\nprint(2 in s)\n",
      "expectedOutput": "True",
      "tutorial": "<p class=\"mb-4 text-gray-300\">`frozenset` is an immutable version of `set`. Since it is hashable, it can be used as a dictionary key or as an element of another set.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">fs = frozenset([1, 2, 3])\n# fs.add(4) would raise an AttributeError</pre></div>",
      "tags": [
        "Intermediate",
        "Control Flow",
        "Collections",
        "Security"
      ]
    },
    {
      "id": 127,
      "title": "127. Sort by Last Char",
      "language": "python",
      "description": "Sort words by their last character in descending order.",
      "initialCode": "words=['ab','ba','aa']\n# Sort by last char descending and print each on new lines\n\n",
      "fullSolution": "words=['ab','ba','aa']\nfor w in sorted(words, key=lambda s: s[-1], reverse=True):\n    print(w)\n",
      "expectedOutput": "ab\nba\naa",
      "tutorial": "<p class=\"mb-4 text-gray-300\">You can provide a `lambda` to the `key` argument of `sorted` to implement custom sorting logic, such as sorting by the last character of a string.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">words = [\"apple\", \"fig\", \"banana\"]\nprint(sorted(words, key=lambda w: w[-1]))</pre></div>",
      "tags": [
        "Intermediate",
        "Control Flow",
        "Functions",
        "Strings",
        "Algorithms"
      ]
    },
    {
      "id": 128,
      "title": "128. Custom Iterator",
      "language": "python",
      "description": "Implement a simple iterator that yields 1..3.",
      "initialCode": "# Make a class that implements __iter__ and __next__ to yield 1,2,3 then StopIteration\n\n",
      "fullSolution": "class OneToThree:\n    def __init__(self):\n        self.cur = 1\n    def __iter__(self):\n        return self\n    def __next__(self):\n        if self.cur <= 3:\n            v = self.cur\n            self.cur += 1\n            return v\n        raise StopIteration\n\nfor x in OneToThree():\n    print(x)\n",
      "expectedOutput": "1\n2\n3",
      "tutorial": "<p class=\"mb-4 text-gray-300\">To create a custom iterator, a class needs to implement the `__iter__()` and `__next__()` methods.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">class UpToThree:\n    def __init__(self):\n        self.count = 1\n    def __iter__(self):\n        return self\n    def __next__(self):\n        if self.count > 3: raise StopIteration\n        val = self.count\n        self.count += 1\n        return val\n\nprint(list(UpToThree())) # [1, 2, 3]</pre></div>",
      "tags": [
        "Intermediate",
        "Control Flow",
        "Functions",
        "Collections",
        "OOP"
      ]
    },
    {
      "id": 129,
      "title": "129. Capstone: Top Student",
      "language": "python",
      "description": "Parse JSON of students and print the top-scoring student's name.",
      "initialCode": "import json\n# Given the JSON string s below, parse it and print the top student's name\n# by score.\n\ns = '[{\"name\":\"Alice\",\"score\":90},{\"name\":\"Bob\",\"score\":80},{\"name\":\"Charlie\",\"score\":100}]'\n# Your code here\n\n",
      "fullSolution": "import json\ns = '[{\"name\":\"Alice\",\"score\":90},{\"name\":\"Bob\",\"score\":80},{\"name\":\"Charlie\",\"score\":100}]'\nstudents = json.loads(s)\nprint(max(students, key=lambda d: d['score'])['name'])\n",
      "expectedOutput": "Charlie",
      "tutorial": "<p class=\"mb-4 text-gray-300\">This capstone combines several concepts: JSON parsing, finding the maximum item in a list of dictionaries using a lambda function as the key.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import json\ns = '[{\"name\":\"Alice\",\"score\":90},{\"name\":\"Charlie\",\"score\":100}]'\nstudents = json.loads(s)\nrichest = max(students, key=lambda s: s[\"score\"])\nprint(richest[\"name\"]) # Charlie</pre></div>",
      "tags": [
        "Intermediate",
        "Functions",
        "Collections",
        "Serialization",
        "Functional"
      ]
    },
    {
      "id": 130,
      "title": "130. Dataclasses Basics",
      "language": "python",
      "description": "Define a dataclass and compute an average score.",
      "initialCode": "from dataclasses import dataclass\nfrom typing import List\n\n# Define a @dataclass Student with fields name: str and scores: List[int].\n# Create Student('Alice', [100, 80]) and print the average score as a float.\n\n",
      "fullSolution": "from dataclasses import dataclass\nfrom typing import List\n\n@dataclass\nclass Student:\n    name: str\n    scores: List[int]\n\ns = Student('Alice', [100, 80])\nprint(sum(s.scores) / len(s.scores))\n",
      "fullSolutionCommented": "from dataclasses import dataclass\nfrom typing import List\n\n# Define a simple data container. @dataclass generates __init__, __repr__, etc.\n@dataclass\nclass Student:\n    name: str\n    scores: List[int]\n\n# Create a Student and compute the mean score. Use float division (len > 0 here).\ns = Student('Alice', [100, 80])\navg = sum(s.scores) / len(s.scores)\nprint(avg)\n",
      "expectedOutput": "90.0",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Use <code>@dataclass</code> to auto-generate boilerplate like __init__ and __repr__. It works well for simple data containers.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from dataclasses import dataclass\n\n@dataclass\nclass Point:\n    x: int\n    y: int\n\nprint(Point(1, 2))</pre></div>",
      "tags": [
        "Intermediate",
        "Control Flow",
        "Collections",
        "OOP",
        "Type System"
      ]
    },
    {
      "id": 131,
      "title": "131. functools.lru_cache",
      "language": "python",
      "description": "Memoize a recursive Fibonacci function and print fib(10).",
      "initialCode": "from functools import lru_cache\n\n# Define fib(n) using @lru_cache(None) and print fib(10)\n\n",
      "fullSolution": "from functools import lru_cache\n\n@lru_cache(None)\ndef fib(n: int) -> int:\n    return n if n < 2 else fib(n-1) + fib(n-2)\n\nprint(fib(10))\n",
      "fullSolutionCommented": "from functools import lru_cache\n\n# Cache results for each n to avoid exponential recursion.\n@lru_cache(None)\ndef fib(n: int) -> int:\n    # Base cases: 0 -> 0, 1 -> 1\n    if n < 2:\n        return n\n    # Recurrence: F(n) = F(n-1) + F(n-2)\n    return fib(n-1) + fib(n-2)\n\nprint(fib(10))  # 55\n",
      "expectedOutput": "55",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Use <code>functools.lru_cache</code> to cache function results and avoid recomputation in recursive algorithms.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from functools import lru_cache\n\n@lru_cache(None)\ndef f(x):\n    return x*x\n\nprint(f(5))</pre></div>",
      "tags": [
        "Intermediate",
        "Control Flow",
        "Functions",
        "Algorithms",
        "Performance"
      ]
    },
    {
      "id": 132,
      "title": "132. itertools.groupby",
      "language": "python",
      "description": "Count consecutive character groups using groupby and print counts.",
      "initialCode": "from itertools import groupby\n\ns = 'aabbbc'\n# Use groupby to print: a:2, b:3, c:1 each on new lines\n\n",
      "fullSolution": "from itertools import groupby\n\ns = 'aabbbc'\nfor ch, grp in groupby(s):\n    print(f\"{ch}:{len(list(grp))}\")\n",
      "fullSolutionCommented": "from itertools import groupby\n\n# groupby groups consecutive equal items. Convert each group iterator to a list to count.\ns = 'aabbbc'\nfor ch, grp in groupby(s):\n    count = len(list(grp))\n    print(f\\\"{ch}:{count}\\\")\n",
      "expectedOutput": "a:2\nb:3\nc:1",
      "tutorial": "<p class=\"mb-4 text-gray-300\">`itertools.groupby` groups consecutive items with the same key. Convert the group iterator to a list to count items.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from itertools import groupby\nprint([(k, len(list(g))) for k,g in groupby('aaabb')]) # [('a', 3), ('b', 2)]</pre></div>",
      "tags": [
        "Intermediate",
        "Control Flow",
        "Collections",
        "Functional"
      ]
    },
    {
      "id": 133,
      "title": "133. Generator Flatten",
      "language": "python",
      "description": "Use a generator with yield from to flatten nested lists.",
      "initialCode": "# Define flatten(nested) that yields each int from nested lists\n# Then print each number on its own line for [[1,2],[3],[4,5]]\n\n",
      "fullSolution": "def flatten(nested):\n    for sub in nested:\n        yield from sub\n\nfor x in flatten([[1,2],[3],[4,5]]):\n    print(x)\n",
      "fullSolutionCommented": "# Use 'yield from' to delegate to the sub-iterables.\ndef flatten(nested):\n    for sub in nested:\n        # sub is a list of ints; yield its items one-by-one\n        yield from sub\n\nfor x in flatten([[1,2],[3],[4,5]]):\n    print(x)\n",
      "expectedOutput": "1\n2\n3\n4\n5",
      "tutorial": "<p class=\"mb-4 text-gray-300\">`yield from` delegates to a sub-iterator, making generator composition simple and readable.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">def chain(*iters):\n    for it in iters:\n        yield from it\n\nprint(list(chain([1,2], [3]))) # [1, 2, 3]</pre></div>",
      "tags": [
        "Intermediate",
        "Control Flow",
        "Functions",
        "Collections",
        "Generators"
      ]
    },
    {
      "id": 134,
      "title": "134. asyncio.gather",
      "language": "python",
      "description": "Run coroutines concurrently and sum results.",
      "initialCode": "import asyncio\n\n# Define async def square(x): return x*x\n# Use asyncio.gather over [1,2,3] and print the sum of results\n\n",
      "fullSolution": "import asyncio\n\nasync def square(x):\n    return x*x\n\nasync def main():\n    results = await asyncio.gather(*(square(x) for x in [1,2,3]))\n    print(sum(results))\n\nasyncio.run(main())\n",
      "fullSolutionCommented": "import asyncio\n\n# Define an async function. It returns immediately with a coroutine when called.\nasync def square(x):\n    return x * x\n\nasync def main():\n    # Schedule the coroutines concurrently and wait for all to finish.\n    coros = [square(x) for x in [1, 2, 3]]\n    results = await asyncio.gather(*coros)\n    print(sum(results))  # 14\n\n# Drive the event loop.\nasyncio.run(main())\n",
      "expectedOutput": "14",
      "tutorial": "<p class=\"mb-4 text-gray-300\">`asyncio.gather` concurrently awaits multiple coroutines and returns their results as a list.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import asyncio\n\nasync def add(a,b):\n    return a+b\n\nprint(asyncio.run(add(2,3)))</pre></div>",
      "tags": [
        "Intermediate",
        "Control Flow",
        "Functions",
        "Concurrency",
        "Async"
      ]
    },
    {
      "id": 135,
      "title": "135. Context Manager",
      "language": "python",
      "description": "Use contextlib.contextmanager to manage setup and teardown.",
      "initialCode": "import contextlib\n\n# Create a context manager that prints 'enter' on enter and 'exit' on exit\n# Within it, print 'inside'\n\n",
      "fullSolution": "import contextlib\n\n@contextlib.contextmanager\ndef tag():\n    print('enter')\n    try:\n        yield\n    finally:\n        print('exit')\n\nwith tag():\n    print('inside')\n",
      "fullSolutionCommented": "import contextlib\n\n# Build a context manager with setup/teardown around the 'with' block.\n@contextlib.contextmanager\ndef tag():\n    print('enter')  # setup\n    try:\n        yield       # body runs here\n    finally:\n        print('exit')  # teardown always runs\n\nwith tag():\n    print('inside')\n",
      "expectedOutput": "enter\ninside\nexit",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Context managers wrap a block with setup and teardown steps. Use them for resources like files, locks, or timing.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import contextlib\n\n@contextlib.contextmanager\ndef banner():\n    print('---')\n    try:\n        yield\n    finally:\n        print('---')\n\nwith banner():\n    print('Hello')</pre></div>",
      "tags": [
        "Intermediate",
        "Control Flow",
        "Functions",
        "Concurrency",
        "Performance"
      ]
    },
    {
      "id": 136,
      "title": "136. @property",
      "language": "python",
      "description": "Expose a computed attribute via @property.",
      "initialCode": "# Define Temperature(celsius) with a @property fahrenheit that converts C->F\n# Print the fahrenheit for 100C as an integer\n\n",
      "fullSolution": "class Temperature:\n    def __init__(self, c):\n        self._c = c\n    @property\n    def fahrenheit(self):\n        return self._c * 9/5 + 32\n\nprint(int(Temperature(100).fahrenheit))\n",
      "fullSolutionCommented": "# Expose a computed attribute via @property.\nclass Temperature:\n    def __init__(self, celsius):\n        self._c = celsius\n    @property\n    def fahrenheit(self):\n        # F = C * 9/5 + 32\n        return self._c * 9/5 + 32\n\nprint(int(Temperature(100).fahrenheit))  # 212\n",
      "expectedOutput": "212",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Use <code>@property</code> for computed attributes that look like fields but run logic on access.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">class Circle:\n    def __init__(self, r): self.r = r\n    @property\n    def area(self): return 3.14159 * self.r * self.r\n\nprint(int(Circle(10).area))</pre></div>",
      "tags": [
        "Intermediate",
        "Control Flow",
        "Functions",
        "OOP"
      ]
    },
    {
      "id": 137,
      "title": "137. heapq.nlargest",
      "language": "python",
      "description": "Print the two largest numbers in descending order.",
      "initialCode": "import heapq\n\narr = [5,1,9,7,2]\n# Print the two largest values on separate lines (largest first)\n\n",
      "fullSolution": "import heapq\n\narr = [5,1,9,7,2]\nfor x in heapq.nlargest(2, arr):\n    print(x)\n",
      "fullSolutionCommented": "import heapq\n\n# nlargest finds the top-k efficiently without fully sorting.\narr = [5, 1, 9, 7, 2]\nfor x in heapq.nlargest(2, arr):\n    print(x)  # 9 then 7\n",
      "expectedOutput": "9\n7",
      "tutorial": "<p class=\"mb-4 text-gray-300\">`heapq.nlargest(k, iterable)` efficiently returns the k largest items without fully sorting the list.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import heapq\nprint(heapq.nlargest(3, [5,1,9,7,2])) # [9, 7, 5]</pre></div>",
      "tags": [
        "Intermediate",
        "Control Flow",
        "Algorithms",
        "Generators"
      ]
    },
    {
      "id": 138,
      "title": "138. Regex Named Groups",
      "language": "python",
      "description": "Extract fields using named capture groups.",
      "initialCode": "import re\n\ns = 'User alice, id=42'\n# Print 'alice:42' using named groups 'name' and 'id'\n\n",
      "fullSolution": "import re\n\ns = 'User alice, id=42'\nm = re.search(r\"User (?P<name>\\w+), id=(?P<id>\\d+)\", s)\nprint(f\"{m.group('name')}:{m.group('id')}\")\n",
      "fullSolutionCommented": "import re\n\n# Use named groups (?P<name>...) for clarity; access via group('name').\ns = 'User alice, id=42'\npat = r\"User (?P<name>\\w+), id=(?P<id>\\d+)\"\nm = re.search(pat, s)\nprint(f\\\"{m.group('name')}:{m.group('id')}\\\")\n",
      "expectedOutput": "alice:42",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Named groups make regex matches easier to read and maintain. Access them by name via <code>match.group('name')</code>.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import re\nm = re.search(r\"(?P&lt;word&gt;\\w+)-(\\d+)\", 'abc-123')\nprint(m.group('word')) # abc</pre></div>",
      "tags": [
        "Intermediate",
        "Strings",
        "Algorithms",
        "Regex"
      ]
    },
    {
      "id": 139,
      "title": "139. ThreadPoolExecutor",
      "language": "python",
      "description": "Use a thread pool to map a function and sum results.",
      "initialCode": "from concurrent.futures import ThreadPoolExecutor\n\n# Square the numbers [1,2,3,4] using a ThreadPoolExecutor and print the sum\n\n",
      "fullSolution": "from concurrent.futures import ThreadPoolExecutor\n\ndef sq(x):\n    return x*x\n\nwith ThreadPoolExecutor(max_workers=2) as ex:\n    print(sum(ex.map(sq, [1,2,3,4])))\n",
      "fullSolutionCommented": "from concurrent.futures import ThreadPoolExecutor\n\n# Map a function across inputs in a thread pool and aggregate results.\ndef sq(x):\n    return x * x\n\nwith ThreadPoolExecutor(max_workers=2) as ex:\n    # ex.map returns a generator of results in input order\n    total = sum(ex.map(sq, [1, 2, 3, 4]))\n    print(total)  # 30\n",
      "expectedOutput": "30",
      "tutorial": "<p class=\"mb-4 text-gray-300\">`ThreadPoolExecutor` runs callables on a pool of threads. Use <code>map</code> to apply a function to many inputs.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from concurrent.futures import ThreadPoolExecutor\nwith ThreadPoolExecutor() as ex:\n    print(list(ex.map(lambda x: x+1, [1,2,3]))) # [2,3,4]</pre></div>",
      "tags": [
        "Intermediate",
        "Functions",
        "Collections",
        "Algorithms",
        "Concurrency"
      ]
    },
    {
      "id": 140,
      "title": "140. Capstone: CSV ETL",
      "language": "python",
      "description": "Parse a CSV string and compute total revenue for rows with price >= 10.",
      "initialCode": "import csv\nimport io\n\ndata = '''id,price,qty\n1,10,2\n2,15,1\n3,8,5\n'''\n# Compute total revenue (price*qty) for rows with price >= 10 and print it\n\n",
      "fullSolution": "import csv\nimport io\n\ndata = '''id,price,qty\n1,10,2\n2,15,1\n3,8,5\n'''\nreader = csv.DictReader(io.StringIO(data))\nprint(sum(int(r['price'])*int(r['qty']) for r in reader if int(r['price']) >= 10))\n",
      "fullSolutionCommented": "import csv\nimport io\n\n# Parse CSV into dicts, filter rows, and aggregate revenue.\ndata = '''id,price,qty\n1,10,2\n2,15,1\n3,8,5\n'''\nreader = csv.DictReader(io.StringIO(data))\nrevenue = 0\nfor row in reader:\n    price = int(row['price'])\n    qty = int(row['qty'])\n    if price >= 10:\n        revenue += price * qty\nprint(revenue)  # 35\n",
      "expectedOutput": "35",
      "tutorial": "<p class=\"mb-4 text-gray-300\">CSV is a common interchange format. Use <code>csv.DictReader</code> to parse rows into dicts and combine filtering and aggregation.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import csv, io\ns = 'a,b\\n1,2\\n'\nprint(list(csv.DictReader(io.StringIO(s))))</pre></div>",
      "tags": [
        "Intermediate",
        "Control Flow",
        "Strings",
        "Collections",
        "I/O"
      ]
    },
    {
      "id": 141,
      "title": "141. ProcessPoolExecutor",
      "language": "python",
      "description": "Use a process pool to cube [1,2,3,4] and print the sum.",
      "initialCode": "from concurrent.futures import ProcessPoolExecutor\n\n# Define a top-level function cube(x) returning x*x*x (no lambdas)\n# On Windows, guard process pool code with if __name__ == '__main__'\n# Use ProcessPoolExecutor to compute cubes for [1,2,3,4] and print the sum\n\n",
      "fullSolution": "from concurrent.futures import ProcessPoolExecutor\n\ndef cube(x):\n    return x*x*x\n\nif __name__ == '__main__':\n    with ProcessPoolExecutor(max_workers=2) as ex:\n        print(sum(ex.map(cube, [1,2,3,4])))\n",
      "expectedOutput": "100",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Use <code>ProcessPoolExecutor</code> for CPU-bound work to sidestep the GIL. Map a pure function across inputs and aggregate.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from concurrent.futures import ProcessPoolExecutor\nwith ProcessPoolExecutor() as ex:\n    print(sum(ex.map(lambda x: x*x, [1,2,3]))) # 14</pre></div>",
      "tags": [
        "Intermediate",
        "Control Flow",
        "Functions",
        "Collections",
        "Concurrency"
      ]
    },
    {
      "id": 142,
      "title": "142. functools.singledispatch",
      "language": "python",
      "description": "Register type-specific implementations and dispatch at runtime.",
      "initialCode": "from functools import singledispatch\n\n# Create a singledispatch function describe(x)\n# - default returns 'unknown'\n# - int specialization returns 'int:<value>'\n# - list specialization returns 'list:<len>'\n# Print describe(5) then describe([1,2,3])\n\n",
      "fullSolution": "from functools import singledispatch\n\n@singledispatch\ndef describe(x):\n    return 'unknown'\n\n@describe.register(int)\ndef _(x):\n    return f'int:{x}'\n\n@describe.register(list)\ndef _(x):\n    return f'list:{len(x)}'\n\nprint(describe(5))\nprint(describe([1,2,3]))\n",
      "expectedOutput": "int:5\nlist:3",
      "tutorial": "<p class=\"mb-4 text-gray-300\"><code>singledispatch</code> lets you write generic functions with type-based specializations for better extensibility.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from functools import singledispatch\n@singledispatch\ndef stringify(x): return str(x)\n@stringify.register(list)\ndef _(x): return ','.join(map(str,x))\nprint(stringify([1,2])) # 1,2</pre></div>",
      "tags": [
        "Intermediate",
        "Control Flow",
        "Functions",
        "Strings",
        "Collections"
      ]
    },
    {
      "id": 143,
      "title": "143. typing.Protocol",
      "language": "python",
      "description": "Define a structural interface and accept any implementation.",
      "initialCode": "from typing import Protocol\n\n# Define a Greeter Protocol with greet(name:str)->str\n# Implement EN and ES classes and a welcome(g,name) that prints g.greet(name)\n# Call with 'Bob' using both implementations\n\n",
      "fullSolution": "from typing import Protocol\n\nclass Greeter(Protocol):\n    def greet(self, name: str) -> str: ...\n\nclass EN:\n    def greet(self, name: str) -> str:\n        return f'Hello, {name}'\n\nclass ES:\n    def greet(self, name: str) -> str:\n        return f'Hola, {name}'\n\ndef welcome(g: Greeter, name: str):\n    print(g.greet(name))\n\nwelcome(EN(), 'Bob')\nwelcome(ES(), 'Bob')\n",
      "expectedOutput": "Hello, Bob\nHola, Bob",
      "tutorial": "<p class=\"mb-4 text-gray-300\"><code>Protocol</code> enables structural typing: any object with the required methods is accepted, improving testability and decoupling.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from typing import Protocol\nclass HasLen(Protocol):\n    def __len__(self) -&gt; int: ...\n\ndef size(x: HasLen):\n    return len(x)\n\nprint(size('hi'))</pre></div>",
      "tags": [
        "Intermediate",
        "Functions",
        "OOP",
        "Type System"
      ]
    },
    {
      "id": 144,
      "title": "144. sqlite3 In-Memory",
      "language": "python",
      "description": "Create a table, insert rows, and aggregate with SQL.",
      "initialCode": "import sqlite3\n\n# Create an in-memory DB, a table nums(v INT), insert 1,2,3\n# Query SELECT SUM(v) and print the result\n\n",
      "fullSolution": "import sqlite3\n\ncon = sqlite3.connect(':memory:')\ncur = con.cursor()\ncur.execute('CREATE TABLE nums(v INT)')\ncur.executemany('INSERT INTO nums(v) VALUES (?)', [(1,),(2,),(3,)])\ncur.execute('SELECT SUM(v) FROM nums')\nprint(cur.fetchone()[0])\ncon.close()\n",
      "expectedOutput": "6",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Use SQLite for quick relational queries in-memory\u00e2\u20ac\u201dgreat for ETL-style tasks and prototypes.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import sqlite3\ncon = sqlite3.connect(':memory:')\ncon.execute('CREATE TABLE t(x)')\ncon.execute('INSERT INTO t VALUES (42)')\nprint(con.execute('SELECT x FROM t').fetchone()[0])</pre></div>",
      "tags": [
        "Intermediate",
        "Control Flow",
        "Databases"
      ]
    },
    {
      "id": 145,
      "title": "145. decimal for Precision",
      "language": "python",
      "description": "Add 0.1 and 0.2 precisely using Decimal.",
      "initialCode": "from decimal import Decimal\n\n# Print the result of Decimal('0.1') + Decimal('0.2')\n\n",
      "fullSolution": "from decimal import Decimal\nprint(Decimal('0.1') + Decimal('0.2'))\n",
      "expectedOutput": "0.3",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Binary floats surprise: 0.1+0.2 != 0.3. Use <code>Decimal</code> for money and precise decimal arithmetic.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from decimal import Decimal\nprint(Decimal('1.005').quantize(Decimal('0.01'))) # 1.01</pre></div>",
      "tags": [
        "Intermediate",
        "Control Flow",
        "Math and Stats"
      ]
    },
    {
      "id": 146,
      "title": "146. struct pack/unpack",
      "language": "python",
      "description": "Pack two numbers into bytes and unpack them again.",
      "initialCode": "import struct\n\n# Pack 258 (unsigned short) and 7 (unsigned byte) big-endian, then unpack and print each on its own line\n\n",
      "fullSolution": "import struct\n\ndata = struct.pack('>HB', 258, 7)\na, b = struct.unpack('>HB', data)\nprint(a)\nprint(b)\n",
      "expectedOutput": "258\n7",
      "tutorial": "<p class=\"mb-4 text-gray-300\">The <code>struct</code> module converts between Python values and C-struct binary data\u00e2\u20ac\u201duseful for protocols and file formats.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import struct\nprint(struct.unpack('&gt;I', b'\\x00\\x00\\x01\\x00')[0]) # 256</pre></div>",
      "tags": [
        "Intermediate",
        "Control Flow",
        "Type System"
      ]
    },
    {
      "id": 147,
      "title": "147. enum.Flag",
      "language": "python",
      "description": "Combine bit-flags and test membership.",
      "initialCode": "from enum import Flag, auto\n\n# Define Perm with READ, WRITE, EXEC using Flag\n# Make perm = READ|WRITE, then print whether it includes READ and includes EXEC (two lines)\n\n",
      "fullSolution": "from enum import Flag, auto\n\nclass Perm(Flag):\n    READ = auto()\n    WRITE = auto()\n    EXEC = auto()\n\nperm = Perm.READ | Perm.WRITE\nprint(bool(perm & Perm.READ))\nprint(bool(perm & Perm.EXEC))\n",
      "expectedOutput": "True\nFalse",
      "tutorial": "<p class=\"mb-4 text-gray-300\"><code>Flag</code> supports bitwise OR of options; test membership with bitwise AND.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from enum import Flag, auto\nclass F(Flag): A=auto(); B=auto()\nprint(F.A | F.B)</pre></div>",
      "tags": [
        "Intermediate",
        "OOP",
        "CLI"
      ]
    },
    {
      "id": 148,
      "title": "148. ExitStack",
      "language": "python",
      "description": "Manage multiple context cleanups dynamically.",
      "initialCode": "import contextlib\n\n# Use ExitStack to print 'inside' then ensure 'exit' prints at teardown\n\n",
      "fullSolution": "import contextlib\n\nwith contextlib.ExitStack() as stack:\n    stack.callback(lambda: print('exit'))\n    print('inside')\n",
      "expectedOutput": "inside\nexit",
      "tutorial": "<p class=\"mb-4 text-gray-300\"><code>ExitStack</code> lets you register callbacks and enter contexts conditionally, guaranteeing teardown even when combining resources.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import contextlib\nwith contextlib.ExitStack() as st:\n    st.callback(lambda: print('done'))\n    print('work')</pre></div>",
      "tags": [
        "Intermediate",
        "Functions",
        "Collections"
      ]
    },
    {
      "id": 149,
      "title": "149. cached_property",
      "language": "python",
      "description": "Cache an expensive computation after the first access.",
      "initialCode": "from functools import cached_property\n\n# Define a class with a cached_property that prints 'compute' once and returns 42\n# Access it twice and print the value both times\n\n",
      "fullSolution": "from functools import cached_property\n\nclass Expensive:\n    @cached_property\n    def value(self):\n        print('compute')\n        return 42\n\ne = Expensive()\nprint(e.value)\nprint(e.value)\n",
      "expectedOutput": "compute\n42\n42",
      "tutorial": "<p class=\"mb-4 text-gray-300\"><code>cached_property</code> computes once per instance and reuses the value\u00e2\u20ac\u201dhandy for memoizing I/O or heavy calculations.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from functools import cached_property\nclass C:\n  @cached_property\n  def cfg(self): return 123\nprint(C().cfg)</pre></div>",
      "tags": [
        "Intermediate",
        "Control Flow",
        "Functions",
        "OOP",
        "Functional"
      ]
    },
    {
      "id": 150,
      "title": "150. heapq.merge",
      "language": "python",
      "description": "Merge two sorted iterables and print all items.",
      "initialCode": "import heapq\n\n# Merge [1,3,5] and [2,4,6] and print each item on its own line\n\n",
      "fullSolution": "import heapq\nfor x in heapq.merge([1,3,5], [2,4,6]):\n    print(x)\n",
      "expectedOutput": "1\n2\n3\n4\n5\n6",
      "tutorial": "<p class=\"mb-4 text-gray-300\"><code>heapq.merge</code> lazily merges multiple sorted inputs\u00e2\u20ac\u201duseful for external sort or streaming merges.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import heapq\nprint(list(heapq.merge([1,4],[2,3])))</pre></div>",
      "tags": [
        "Intermediate",
        "Control Flow",
        "Collections",
        "Algorithms",
        "Generators"
      ]
    },
    {
      "id": 151,
      "title": "151. bisect.insort",
      "language": "python",
      "description": "Insert while keeping a list sorted.",
      "initialCode": "import bisect\n\n# Start with arr=[1,3,4], insert 2 in order using insort, then print arr\n\n",
      "fullSolution": "import bisect\narr = [1,3,4]\nbisect.insort(arr, 2)\nprint(arr)\n",
      "expectedOutput": "[1, 2, 3, 4]",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Use <code>bisect</code> for binary search and ordered insertion without re-sorting.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import bisect\na=[1,2,4]\nbisect.insort(a,3)\nprint(a)</pre></div>",
      "tags": [
        "Intermediate",
        "Control Flow",
        "Collections",
        "Algorithms"
      ]
    },
    {
      "id": 152,
      "title": "152. argparse (programmatic)",
      "language": "python",
      "description": "Parse options from a list and act on them.",
      "initialCode": "import argparse\n\n# Build an ArgumentParser that accepts --times INT; parse ['--times','3']\n# Print 'x' repeated times times\n\n",
      "fullSolution": "import argparse\nparser = argparse.ArgumentParser(add_help=False)\nparser.add_argument('--times', type=int, required=True)\nargs = parser.parse_args(['--times','3'])\nprint('x'*args.times)\n",
      "expectedOutput": "xxx",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Use <code>argparse</code> to define CLI options. Parsing from a list makes it easy to test without real command-line args.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import argparse\np=argparse.ArgumentParser(add_help=False)\np.add_argument('--n', type=int)\nprint(p.parse_args(['--n','2']).n)</pre></div>",
      "tags": [
        "Intermediate",
        "Collections",
        "CLI",
        "Parsing"
      ]
    },
    {
      "id": 153,
      "title": "153. Capstone: Log Aggregator",
      "language": "python",
      "description": "Parse log lines and print total ERRORs and WARNs.",
      "initialCode": "import re\n\nlogs = '''[INFO] boot\n[ERROR] fail A\n[WARN] disk\n[ERROR] fail B\n'''\n# Count lines starting with [ERROR] and [WARN] and print 'E:<n> W:<m>'\n\n",
      "fullSolution": "import re\n\nlogs = '''[INFO] boot\n[ERROR] fail A\n[WARN] disk\n[ERROR] fail B\n'''\nE = len(re.findall(r'^\\[ERROR\\]', logs, flags=re.M))\nW = len(re.findall(r'^\\[WARN\\]', logs, flags=re.M))\nprint(f'E:{E} W:{W}')\n",
      "expectedOutput": "E:2 W:1",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Combine regex with multiline anchors to scan logs and aggregate counts.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import re\ns='''A\nB\nA\n'''\nprint(len(re.findall(r'^A', s, flags=re.M)))</pre></div>",
      "tags": [
        "Intermediate",
        "Strings",
        "CLI",
        "Parsing",
        "Regex"
      ]
    },
    {
      "id": 154,
      "title": "154. Capstone: Process Pool Map-Reduce",
      "language": "python",
      "description": "Square 1..10 in a process pool and print the sum.",
      "initialCode": "from concurrent.futures import ProcessPoolExecutor\n\n# Define a top-level function sq(x) returning x*x (no lambdas)\n# On Windows, guard process pool code with if __name__ == '__main__'\n# Compute sum(x*x for x in 1..10) using ProcessPoolExecutor and print it\n\n",
      "fullSolution": "from concurrent.futures import ProcessPoolExecutor\n\ndef sq(x):\n    return x*x\n\nif __name__ == '__main__':\n    with ProcessPoolExecutor() as ex:\n        print(sum(ex.map(sq, range(1,11))))\n",
      "expectedOutput": "385",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Map-reduce pattern: map independent work across workers, then reduce with <code>sum</code>. Use a top-level function and guard <code>__name__</code> on Windows.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from concurrent.futures import ProcessPoolExecutor\n\ndef sq(x):\n    return x*x\n\nif __name__ == '__main__':\n    with ProcessPoolExecutor() as ex:\n        print(sum(ex.map(sq, range(1,6))))</pre></div>",
      "tags": [
        "Intermediate",
        "Control Flow",
        "Functions",
        "Collections",
        "Concurrency"
      ]
    },
    {
      "id": 155,
      "title": "155. Capstone: asyncio Timeout",
      "language": "python",
      "description": "Run two tasks; one sleeps, one fast; print only the fast result using timeout.",
      "initialCode": "import asyncio\n\n# Create two coroutines: slow sleeps 1.0s and returns 'slow', fast returns 'fast'\n# Use wait_for to get fast within 0.1s and print it\n\n",
      "fullSolution": "import asyncio\n\nasync def slow():\n    await asyncio.sleep(1.0)\n    return 'slow'\n\nasync def fast():\n    return 'fast'\n\nasync def main():\n    print(await asyncio.wait_for(fast(), timeout=0.1))\n\nasyncio.run(main())\n",
      "expectedOutput": "fast",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Use <code>asyncio.wait_for</code> to bound latency and pick the fast path.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import asyncio\n\nasync def slow():\n    await asyncio.sleep(1)\n    return 'slow'\n\nasync def main():\n    try:\n        print(await asyncio.wait_for(slow(), timeout=0.05))\n    except asyncio.TimeoutError:\n        print('timeout')\n\nasyncio.run(main())</pre></div>",
      "tags": [
        "Intermediate",
        "Control Flow",
        "Functions",
        "Async",
        "Error Handling"
      ]
    },
    {
      "id": 156,
      "title": "156. Capstone: pathlib Scan",
      "language": "python",
      "description": "List .txt files from an in-memory working dir and print their sorted names.",
      "initialCode": "from pathlib import Path\n\n# Create temp files a.txt, b.txt, c.log in CWD; list only .txt and print names sorted joined by ','\n\n",
      "fullSolution": "from pathlib import Path\nPath('a.txt').write_text('a')\nPath('b.txt').write_text('b')\nPath('c.log').write_text('c')\nprint(','.join(sorted(p.name for p in Path('.').iterdir() if p.suffix=='.txt')))\n",
      "expectedOutput": "a.txt,b.txt",
      "tutorial": "<p class=\"mb-4 text-gray-300\"><code>pathlib</code> provides path operations and safe iteration over directories.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from pathlib import Path\nPath('a.txt').write_text('a')\nPath('b.log').write_text('b')\nprint(','.join(sorted(p.name for p in Path('.').iterdir() if p.suffix=='.txt')))</pre></div>",
      "tags": [
        "Intermediate",
        "Control Flow",
        "Strings",
        "Collections",
        "Algorithms"
      ]
    },
    {
      "id": 157,
      "title": "157. Capstone: OrderedDict LRU",
      "language": "python",
      "description": "Implement a tiny LRU with capacity 2 using OrderedDict.",
      "initialCode": "from collections import OrderedDict\n\n# Create an OrderedDict behaving like LRU capacity=2: put 'a':1, 'b':2, 'c':3 and print keys left joined by ','\n\n",
      "fullSolution": "from collections import OrderedDict\n\nclass LRU(OrderedDict):\n    def __init__(self, cap):\n        super().__init__()\n        self.cap = cap\n    def __setitem__(self, k, v):\n        if k in self: del self[k]\n        super().__setitem__(k, v)\n        if len(self) > self.cap:\n            self.popitem(last=False)\n\nlru = LRU(2)\nlru['a']=1; lru['b']=2; lru['c']=3\nprint(','.join(lru.keys()))\n",
      "expectedOutput": "b,c",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Reorder on set and evict the oldest when capacity is exceeded.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from collections import OrderedDict\ncap = 2\nlru = OrderedDict()\nfor k in ['a','b','a','c']:\n    if k in lru: del lru[k]\n    lru[k] = 1\n    if len(lru) > cap:\n        lru.popitem(last=False)\nprint(','.join(lru.keys()))  # b,c</pre></div>",
      "tags": [
        "Intermediate",
        "Control Flow",
        "Functions",
        "Strings",
        "Collections"
      ]
    },
    {
      "id": 158,
      "title": "158. asyncio.Semaphore",
      "language": "python",
      "description": "Limit concurrent tasks with a semaphore and sum results.",
      "initialCode": "import asyncio\n\n# Create a Semaphore(2) and run 3 workers that each return 1\n# Gather results and print their sum (should be 3)\n\n",
      "fullSolution": "import asyncio\n\nasync def worker(sem):\n    async with sem:\n        await asyncio.sleep(0.01)\n        return 1\n\nasync def main():\n    sem = asyncio.Semaphore(2)\n    results = await asyncio.gather(*(worker(sem) for _ in range(3)))\n    print(sum(results))\n\nasyncio.run(main())\n",
      "expectedOutput": "3",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Use <code>asyncio.Semaphore</code> to cap concurrent access (e.g., outbound requests). It protects a critical section by allowing only N tasks inside at a time.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import asyncio\n\nasync def worker(sem, x):\n    async with sem:\n        await asyncio.sleep(0.01)\n        return x\n\nasync def main():\n    sem = asyncio.Semaphore(2)\n    print(sum(await asyncio.gather(*(worker(sem, 1) for _ in range(3)))))\n\nasyncio.run(main())</pre></div>",
      "tags": [
        "Intermediate",
        "Control Flow",
        "Functions",
        "Networking",
        "Concurrency"
      ]
    },
    {
      "id": 159,
      "title": "159. queue + Threads",
      "language": "python",
      "description": "Fan out work to threads using queue.Queue and collect results.",
      "initialCode": "from queue import Queue\nfrom threading import Thread\n\n# Square [1,2,3,4] in two worker threads using a Queue and print the sum (30)\n\n",
      "fullSolution": "from queue import Queue\nfrom threading import Thread\n\nq = Queue()\nout = []\n\ndef worker():\n    while True:\n        x = q.get()\n        if x is None:\n            break\n        out.append(x*x)\n\n# start workers\nthreads = [Thread(target=worker) for _ in range(2)]\nfor t in threads: t.start()\n# enqueue work\nfor n in [1,2,3,4]: q.put(n)\n# stop workers\nfor _ in threads: q.put(None)\n# wait\nfor t in threads: t.join()\nprint(sum(out))\n",
      "expectedOutput": "30",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Use a <code>Queue</code> to hand off work to a fixed set of worker threads. The queue provides safe communication without manual locking.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from queue import Queue\nfrom threading import Thread\n\nq=Queue(); out=[]\n\ndef worker():\n    while True:\n        x=q.get()\n        if x is None: break\n        out.append(x*x)\n\nthreads=[Thread(target=worker) for _ in range(2)]\nfor t in threads: t.start()\nfor n in [1,2,3,4]: q.put(n)\nfor _ in threads: q.put(None)\nfor t in threads: t.join()\nprint(sum(out))</pre></div>",
      "tags": [
        "Intermediate",
        "Control Flow",
        "Functions",
        "Strings",
        "Collections"
      ]
    },
    {
      "id": 160,
      "title": "160. Logging to stdout",
      "language": "python",
      "description": "Configure logging to write to stdout and log a message.",
      "initialCode": "import logging, sys\n\n# Configure basicConfig to stream logs to stdout and log INFO level 'hi'\n# Print should be exactly \"INFO:hi\"\n\n",
      "fullSolution": "import logging, sys\nlogging.basicConfig(level=logging.INFO, stream=sys.stdout, format='%(levelname)s:%(message)s')\nlogging.info('hi')\n",
      "expectedOutput": "INFO:hi",
      "tutorial": "<p class=\"mb-4 text-gray-300\">By default <code>logging</code> writes to stderr. Redirect to stdout to capture logs as program output, and set a concise format.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import logging, sys\nlogging.basicConfig(level=logging.INFO, stream=sys.stdout, format='%(levelname)s:%(message)s')\nlogging.info('hello')</pre></div>",
      "tags": [
        "Intermediate",
        "Strings",
        "Collections",
        "Debugging"
      ]
    },
    {
      "id": 161,
      "title": "161. dataclass default_factory",
      "language": "python",
      "description": "Use field(default_factory=list) to avoid shared mutable defaults.",
      "initialCode": "from dataclasses import dataclass, field\n\n# Define Bag with items: list[int] = field(default_factory=list)\n# Append two integers and print len(items)\n\n",
      "fullSolution": "from dataclasses import dataclass, field\n\n@dataclass\nclass Bag:\n    items: list[int] = field(default_factory=list)\n\nb = Bag()\nb.items.append(1)\nb.items.append(2)\nprint(len(b.items))\n",
      "expectedOutput": "2",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Never use a mutable object as a default value. <code>field(default_factory=...)</code> creates a fresh value per instance.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from dataclasses import dataclass, field\n\n@dataclass\nclass Bag:\n    items: list[int] = field(default_factory=list)\n\nprint(Bag().items is Bag().items)  # False</pre></div>",
      "tags": [
        "Intermediate",
        "Collections",
        "OOP",
        "Decorators"
      ]
    },
    {
      "id": 162,
      "title": "162. typing.TypedDict",
      "language": "python",
      "description": "Define a TypedDict and use it like a dict at runtime.",
      "initialCode": "from typing import TypedDict\n\n# Create Item with fields name:str and price:int, then construct and print 'Widget:10'\n\n",
      "fullSolution": "from typing import TypedDict\n\nclass Item(TypedDict):\n    name: str\n    price: int\n\ni: Item = { 'name': 'Widget', 'price': 10 }\nprint(f\"{i['name']}:{i['price']}\")\n",
      "expectedOutput": "Widget:10",
      "tutorial": "<p class=\"mb-4 text-gray-300\"><code>TypedDict</code> describes dictionary-shaped objects for static type-checkers while staying a plain dict at runtime.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from typing import TypedDict\n\nclass User(TypedDict):\n    id: int\n    name: str\n\nu: User = {'id': 1, 'name': 'Ada'}\nprint(u['name'])</pre></div>",
      "tags": [
        "Intermediate",
        "Control Flow",
        "Collections",
        "OOP",
        "Type System"
      ]
    },
    {
      "id": 163,
      "title": "163. operator.itemgetter",
      "language": "python",
      "description": "Sort records by a key using itemgetter.",
      "initialCode": "from operator import itemgetter\n\n# Sort [{'name':'a','age':3},{'name':'c','age':1},{'name':'b','age':2}] by age and print names each on its own line\n\n",
      "fullSolution": "from operator import itemgetter\n\ndata = [{'name':'a','age':3},{'name':'c','age':1},{'name':'b','age':2}]\nfor d in sorted(data, key=itemgetter('age')):\n    print(d['name'])\n",
      "expectedOutput": "c\nb\na",
      "tutorial": "<p class=\"mb-4 text-gray-300\"><code>itemgetter</code> builds a fast key function for <code>sorted</code>, <code>min</code>, <code>max</code>, etc.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from operator import itemgetter\nrows=[{'k':2},{'k':1}]\nprint([r['k'] for r in sorted(rows, key=itemgetter('k'))])</pre></div>",
      "tags": [
        "Intermediate",
        "Control Flow",
        "Functions",
        "Algorithms"
      ]
    },
    {
      "id": 164,
      "title": "164. as_completed (futures)",
      "language": "python",
      "description": "Accumulate results from futures as they complete.",
      "initialCode": "from concurrent.futures import ThreadPoolExecutor, as_completed\n\n# Submit squares for 1..4 and sum results using as_completed, then print the sum (30)\n\n",
      "fullSolution": "from concurrent.futures import ThreadPoolExecutor, as_completed\n\ndef sq(x):\n    return x*x\n\nwith ThreadPoolExecutor(max_workers=3) as ex:\n    futs = [ex.submit(sq, x) for x in [1,2,3,4]]\n    total = 0\n    for f in as_completed(futs):\n        total += f.result()\n    print(total)\n",
      "expectedOutput": "30",
      "tutorial": "<p class=\"mb-4 text-gray-300\"><code>as_completed</code> lets you act on results as soon as each future finishes, which is great for scatter/gather workloads.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from concurrent.futures import ThreadPoolExecutor, as_completed\nwith ThreadPoolExecutor(max_workers=2) as ex:\n    futs = [ex.submit(len, s) for s in ['aa','bbb','c']]\n    print(sum(f.result() for f in as_completed(futs)))</pre></div>",
      "tags": [
        "Intermediate",
        "Control Flow",
        "Functions",
        "Algorithms",
        "Concurrency"
      ]
    },
    {
      "id": 165,
      "title": "165. contextvars",
      "language": "python",
      "description": "Per-task context state that doesn't need to be passed explicitly.",
      "initialCode": "import contextvars, asyncio\n\n# Create a ContextVar, set different values in two tasks, gather and print them joined by ',' (A,B)\n\n",
      "fullSolution": "import contextvars, asyncio\n\nvar = contextvars.ContextVar('var', default='unset')\n\nasync def worker(v):\n    var.set(v)\n    await asyncio.sleep(0)\n    return var.get()\n\nasync def main():\n    a,b = await asyncio.gather(worker('A'), worker('B'))\n    print(f'{a},{b}')\n\nasyncio.run(main())\n",
      "expectedOutput": "A,B",
      "tutorial": "<p class=\"mb-4 text-gray-300\"><code>ContextVar</code> values are task-local and flow with execution, making them safer than globals for request-scoped state.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import contextvars\nuser = contextvars.ContextVar('user', default='anon')\nuser.set('ada')\nprint(user.get())</pre></div>",
      "tags": [
        "Intermediate",
        "Control Flow",
        "Functions",
        "Collections",
        "Networking"
      ]
    },
    {
      "id": 166,
      "title": "166. re.sub with function",
      "language": "python",
      "description": "Transform matches via a replacement function.",
      "initialCode": "import re\n\n# Replace all digits in 'a1b2' with '#' using a function replacer and print the result\n\n",
      "fullSolution": "import re\n\ns = 'a1b2'\nprint(re.sub(r'(\\d)', lambda m: '#', s))\n",
      "expectedOutput": "a#b#",
      "tutorial": "<p class=\"mb-4 text-gray-300\"><code>re.sub</code> can take a function to compute replacements dynamically from each match object.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import re\nprint(re.sub(r'[aeiou]', lambda m: m.group(0).upper(), 'banana'))</pre></div>",
      "tags": [
        "Intermediate",
        "Control Flow",
        "Functions",
        "Functional",
        "Regex"
      ]
    },
    {
      "id": 167,
      "title": "167. pathlib read/write",
      "language": "python",
      "description": "Write then read a small text file using pathlib.",
      "initialCode": "from pathlib import Path\n\n# Write 'ok' to note.txt then read it back and print\n\n",
      "fullSolution": "from pathlib import Path\nPath('note.txt').write_text('ok')\nprint(Path('note.txt').read_text())\n",
      "expectedOutput": "ok",
      "tutorial": "<p class=\"mb-4 text-gray-300\"><code>Path.write_text</code> and <code>Path.read_text</code> are convenient wrappers around opening files with the correct encoding.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from pathlib import Path\nPath('file.txt').write_text('hello')\nprint(Path('file.txt').read_text())</pre></div>",
      "tags": [
        "Intermediate",
        "I/O"
      ]
    },
    {
      "id": 168,
      "title": "168. dataclass frozen",
      "language": "python",
      "description": "Make an immutable dataclass and show assignment fails.",
      "initialCode": "from dataclasses import dataclass, FrozenInstanceError\n\n# Define frozen Person(name:str), instantiate, try to set name, catch and print exception class name\n\n",
      "fullSolution": "from dataclasses import dataclass, FrozenInstanceError\n\n@dataclass(frozen=True)\nclass Person:\n    name: str\n\np = Person('Ada')\ntry:\n    p.name = 'Grace'\nexcept FrozenInstanceError as e:\n    print(type(e).__name__)\n",
      "expectedOutput": "FrozenInstanceError",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Use <code>frozen=True</code> to make dataclasses immutable. Attempting to assign to a field raises <code>FrozenInstanceError</code>.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from dataclasses import dataclass, FrozenInstanceError\n\n@dataclass(frozen=True)\nclass Point: x:int; y:int\ntry:\n    Point(1,2).x = 3\nexcept FrozenInstanceError as e:\n    print(type(e).__name__)</pre></div>",
      "tags": [
        "Intermediate",
        "Collections",
        "OOP",
        "Error Handling",
        "Date/Time"
      ]
    },
    {
      "id": 169,
      "title": "169. __slots__",
      "language": "python",
      "description": "Restrict attributes with __slots__ and catch invalid assignment.",
      "initialCode": "# Define class P with __slots__=('x','y'), set x and y to 1, then try to set z and print 'AttributeError' when caught\n\n",
      "fullSolution": "class P:\n    __slots__ = ('x','y')\n\np = P()\np.x = 1; p.y = 1\ntry:\n    p.z = 3\nexcept AttributeError:\n    print('AttributeError')\n",
      "expectedOutput": "AttributeError",
      "tutorial": "<p class=\"mb-4 text-gray-300\"><code>__slots__</code> prevents creation of <code>__dict__</code> and disallows undeclared attributes, reducing memory and catching mistakes.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">class P: __slots__ = ('x',)\np = P(); p.x = 1\ntry:\n    p.y = 2\nexcept AttributeError:\n    print('no y')</pre></div>",
      "tags": [
        "Intermediate",
        "Collections",
        "OOP",
        "Error Handling"
      ]
    },
    {
      "id": 170,
      "title": "170. functools.reduce",
      "language": "python",
      "description": "Use reduce to compute a product (factorial style).",
      "initialCode": "from functools import reduce\nimport operator as op\n\n# Compute product of 1..5 with reduce and print it\n\n",
      "fullSolution": "from functools import reduce\nimport operator as op\nprint(reduce(op.mul, [1,2,3,4,5]))\n",
      "expectedOutput": "120",
      "tutorial": "<p class=\"mb-4 text-gray-300\"><code>reduce</code> applies a binary function cumulatively to a sequence, reducing it to a single value.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from functools import reduce\nprint(reduce(lambda a,b: a+b, [1,2,3]))</pre></div>",
      "tags": [
        "Intermediate",
        "Functions",
        "Math and Stats",
        "Functional"
      ]
    },
    {
      "id": 171,
      "title": "171. json loads",
      "language": "python",
      "description": "Parse JSON and compute a small aggregation.",
      "initialCode": "import json\n\n# Parse a JSON string like {a:1,b:2} (with proper quotes), sum values and print\n\n",
      "fullSolution": "import json\nd = json.loads('{\"a\":1,\"b\":2}')\nprint(d['a']+d['b'])\n",
      "expectedOutput": "3",
      "tutorial": "<p class=\"mb-4 text-gray-300\"><code>json.loads</code> parses a JSON string into Python objects; <code>json.dumps</code> serializes them back.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import json\nprint(json.dumps({'x': 1}))</pre></div>",
      "tags": [
        "Intermediate",
        "Serialization",
        "Parsing"
      ]
    },
    {
      "id": 172,
      "title": "172. fractions.Fraction",
      "language": "python",
      "description": "Exact rational arithmetic with Fraction.",
      "initialCode": "from fractions import Fraction\n\n# Create Fraction(1,3) + Fraction(1,3) and print the result\n\n",
      "fullSolution": "from fractions import Fraction\nprint(Fraction(1,3) + Fraction(1,3))\n",
      "expectedOutput": "2/3",
      "tutorial": "<p class=\"mb-4 text-gray-300\"><code>Fraction</code> keeps exact rational values without floating-point error.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from fractions import Fraction\nprint(Fraction(1,10) * 3)</pre></div>",
      "tags": [
        "Intermediate",
        "Math and Stats"
      ]
    },
    {
      "id": 173,
      "title": "173. itertools.product",
      "language": "python",
      "description": "Compute Cartesian product size using itertools.product.",
      "initialCode": "from itertools import product\n\n# Compute the number of pairs in product([1,2], [3,4]) and print it\n\n",
      "fullSolution": "from itertools import product\nprint(len(list(product([1,2], [3,4]))))\n",
      "expectedOutput": "4",
      "tutorial": "<p class=\"mb-4 text-gray-300\"><code>product</code> forms all combinations from input iterables. Wrapping with <code>list</code> materializes the pairs for counting.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from itertools import product\nfor a,b in product('ab', 'xy'):\n    print(a+b)</pre></div>",
      "tags": [
        "Intermediate",
        "Control Flow",
        "Collections",
        "Algorithms",
        "Functional"
      ]
    },
    {
      "id": 174,
      "title": "174. collections.Counter",
      "language": "python",
      "description": "Count occurrences with Counter and index by key.",
      "initialCode": "from collections import Counter\n\n# Count letters in 'aab' and print the count for 'a'\n\n",
      "fullSolution": "from collections import Counter\nprint(Counter('aab')['a'])\n",
      "expectedOutput": "2",
      "tutorial": "<p class=\"mb-4 text-gray-300\"><code>Counter</code> is a dict subclass for counting hashable items. Access counts by key like a normal dict.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from collections import Counter\nc = Counter([1,2,1,3])\nprint(c[1])  # 2</pre></div>",
      "tags": [
        "Intermediate",
        "Control Flow",
        "Collections",
        "Security"
      ]
    },
    {
      "id": 175,
      "title": "175. f-string formatting",
      "language": "python",
      "description": "Format floats to two decimals using f-strings.",
      "initialCode": "# Print 3.14159 rounded to two decimals using an f-string\n\n",
      "fullSolution": "print(f\"{3.14159:.2f}\")\n",
      "expectedOutput": "3.14",
      "tutorial": "<p class=\"mb-4 text-gray-300\">An f-string can include format specifiers after a colon. <code>.2f</code> formats as fixed-point with two decimals.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">value = 2/3\nprint(f\"{value:.3f}\")  # 0.667</pre></div>",
      "tags": [
        "Intermediate",
        "Strings"
      ]
    },
    {
      "id": 176,
      "title": "176. abc.ABC + abstractmethod",
      "language": "python",
      "description": "Create an abstract Shape with area(), implement Rect, and print Rect(3,4).area().",
      "initialCode": "from abc import ABC, abstractmethod\n\n# Define abstract class Shape with abstract method area(self)\n# Implement Rect(width,height) that returns width*height in area()\n# Print the area for a 3x4 rectangle (12)\n\n",
      "fullSolution": "from abc import ABC, abstractmethod\n\nclass Shape(ABC):\n    @abstractmethod\n    def area(self):\n        pass\n\nclass Rect(Shape):\n    def __init__(self, w, h):\n        self.w, self.h = w, h\n    def area(self):\n        return self.w * self.h\n\nprint(Rect(3,4).area())\n",
      "expectedOutput": "12",
      "tutorial": "<p class=\"mb-4 text-gray-300\">abc.ABC defines abstract base classes; use <code>@abstractmethod</code> to force subclasses to implement required methods.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from abc import ABC, abstractmethod\nclass Base(ABC):\n    @abstractmethod\n    def f(self): ...\nclass Impl(Base):\n    def f(self): return 42\nprint(Impl().f())</pre></div>",
      "tags": [
        "Intermediate",
        "Control Flow",
        "Functions",
        "OOP"
      ]
    },
    {
      "id": 177,
      "title": "177. functools.singledispatch",
      "language": "python",
      "description": "Use singledispatch to sum a list and print the result.",
      "initialCode": "from functools import singledispatch\n\n# Create total(x) with @singledispatch defaulting to 0\n# Register a list handler that returns sum(xs)\n# Print total([1,2,3]) (6)\n\n",
      "fullSolution": "from functools import singledispatch\n\n@singledispatch\ndef total(x):\n    return 0\n\n@total.register(list)\ndef _(xs):\n    return sum(xs)\n\nprint(total([1,2,3]))\n",
      "expectedOutput": "6",
      "tutorial": "<p class=\"mb-4 text-gray-300\"><code>@singledispatch</code> enables function overloading by argument type at runtime.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from functools import singledispatch\n@singledispatch\ndef show(x): return \"?\"\n@show.register(int)\ndef _(x): return x+1\nprint(show(3))</pre></div>",
      "tags": [
        "Intermediate",
        "Functions",
        "Collections",
        "Functional"
      ]
    },
    {
      "id": 178,
      "title": "178. decimal.Decimal",
      "language": "python",
      "description": "Add precise decimals 0.1 + 0.2 and print the exact result.",
      "initialCode": "from decimal import Decimal\n\n# Print Decimal('0.1') + Decimal('0.2')\n\n",
      "fullSolution": "from decimal import Decimal\nprint(Decimal('0.1') + Decimal('0.2'))\n",
      "expectedOutput": "0.3",
      "tutorial": "<p class=\"mb-4 text-gray-300\"><code>Decimal</code> avoids binary floating-point rounding issues; construct from strings for exact values.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from decimal import Decimal\nprint(Decimal('1.00')/Decimal('3'))</pre></div>",
      "tags": [
        "Intermediate",
        "Control Flow",
        "Math and Stats"
      ]
    },
    {
      "id": 179,
      "title": "179. heapq.nsmallest",
      "language": "python",
      "description": "Print the two smallest numbers using heapq.nsmallest.",
      "initialCode": "import heapq\n\n# Given xs = [5,1,4,2,3], print the two smallest (each on its own line)\n\n",
      "fullSolution": "import heapq\nxs = [5,1,4,2,3]\nfor n in heapq.nsmallest(2, xs):\n    print(n)\n",
      "expectedOutput": "1\n2",
      "tutorial": "<p class=\"mb-4 text-gray-300\"><code>heapq.nsmallest</code> efficiently returns the k smallest items without fully sorting the input.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import heapq\nprint(heapq.nsmallest(3, [9,1,5,2,8]))</pre></div>",
      "tags": [
        "Intermediate",
        "Control Flow",
        "Algorithms"
      ]
    },
    {
      "id": 180,
      "title": "180. bisect_left",
      "language": "python",
      "description": "Find the insertion index for 3 in [1,2,4,5] using bisect_left.",
      "initialCode": "import bisect\n\n# Print bisect_left([1,2,4,5], 3)\n\n",
      "fullSolution": "import bisect\nprint(bisect.bisect_left([1,2,4,5], 3))\n",
      "expectedOutput": "2",
      "tutorial": "<p class=\"mb-4 text-gray-300\">The <code>bisect</code> module finds insertion points in sorted lists for binary search style operations.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import bisect\nxs=[1,2,4,5]\nprint(bisect.bisect_right(xs,2))</pre></div>",
      "tags": [
        "Intermediate",
        "Control Flow",
        "Collections",
        "Algorithms"
      ]
    },
    {
      "id": 181,
      "title": "181. Class-based context manager",
      "language": "python",
      "description": "Implement __enter__/__exit__ to print enter/work/exit in order.",
      "initialCode": "# Define MyCtx with __enter__ printing 'enter' and __exit__ printing 'exit'\n# Use with MyCtx(): print('work') in the body\n\n",
      "fullSolution": "class MyCtx:\n    def __enter__(self):\n        print('enter')\n        return self\n    def __exit__(self, exc_type, exc, tb):\n        print('exit')\n\nwith MyCtx():\n    print('work')\n",
      "expectedOutput": "enter\nwork\nexit",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Context managers can be classes implementing <code>__enter__</code> and <code>__exit__</code>; they manage setup/teardown deterministically.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">class R:\n  def __enter__(self): print('open'); return self\n  def __exit__(self, *exc): print('close')\nwith R(): print('work')</pre></div>",
      "tags": [
        "Intermediate",
        "Functions",
        "OOP"
      ]
    },
    {
      "id": 182,
      "title": "182. enum.IntFlag",
      "language": "python",
      "description": "Use IntFlag for bitwise permissions and check membership.",
      "initialCode": "from enum import IntFlag, auto\n\n# Define Perm with READ, WRITE, EXEC using auto()\n# Create a flag with READ|WRITE and print whether READ is set\n\n",
      "fullSolution": "from enum import IntFlag, auto\n\nclass Perm(IntFlag):\n    READ = auto()\n    WRITE = auto()\n    EXEC = auto()\n\np = Perm.READ | Perm.WRITE\nprint(bool(p & Perm.READ))\n",
      "expectedOutput": "True",
      "tutorial": "<p class=\"mb-4 text-gray-300\"><code>IntFlag</code> supports bitwise operations while remaining an enum; combine flags with <code>|</code> and test with <code>&</code>.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from enum import IntFlag, auto\nclass F(IntFlag): A=auto(); B=auto()\nprint(F.A|F.B)</pre></div>",
      "tags": [
        "Intermediate",
        "Control Flow",
        "Collections",
        "OOP",
        "CLI"
      ]
    },
    {
      "id": 183,
      "title": "183. dataclasses.asdict",
      "language": "python",
      "description": "Convert a dataclass to dict and access a value.",
      "initialCode": "from dataclasses import dataclass, asdict\n\n# Define User(name:str, id:int); create User('Ada',1) and print asdict(user)['name']\n\n",
      "fullSolution": "from dataclasses import dataclass, asdict\n\n@dataclass\nclass User:\n    name: str\n    id: int\n\nprint(asdict(User('Ada', 1))['name'])\n",
      "expectedOutput": "Ada",
      "tutorial": "<p class=\"mb-4 text-gray-300\"><code>asdict</code> recursively converts a dataclass instance into a plain dict, suitable for serialization.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from dataclasses import dataclass, asdict\n@dataclass\nclass P: x:int; y:int\nprint(asdict(P(1,2)))</pre></div>",
      "tags": [
        "Intermediate",
        "Control Flow",
        "Collections",
        "OOP",
        "Decorators"
      ]
    },
    {
      "id": 184,
      "title": "184. inspect.signature",
      "language": "python",
      "description": "Inspect a function's parameters via inspect.signature and print the count.",
      "initialCode": "import inspect\n\n# Define f(a,b,c=0); get its signature and print number of parameters (3)\n\n",
      "fullSolution": "import inspect\n\ndef f(a,b,c=0):\n    pass\n\nsig = inspect.signature(f)\nprint(len(sig.parameters))\n",
      "expectedOutput": "3",
      "tutorial": "<p class=\"mb-4 text-gray-300\">The <code>inspect</code> module offers runtime introspection, including function signatures and parameter kinds.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import inspect\nprint(inspect.signature(lambda x, y=0: None))</pre></div>",
      "tags": [
        "Intermediate",
        "Functions",
        "Security",
        "Functional",
        "Metaprogramming"
      ]
    },
    {
      "id": 185,
      "title": "185. functools.total_ordering",
      "language": "python",
      "description": "Use total_ordering to implement comparisons and sort custom objects.",
      "initialCode": "from functools import total_ordering\n\n# Define @total_ordering class Box(v) with __eq__ and __lt__\n# Sort [Box(3),Box(1),Box(2)] and print their v each on its own line\n\n",
      "fullSolution": "from functools import total_ordering\n\n@total_ordering\nclass Box:\n    def __init__(self, v):\n        self.v = v\n    def __eq__(self, other):\n        return self.v == other.v\n    def __lt__(self, other):\n        return self.v < other.v\n\nfor b in sorted([Box(3), Box(1), Box(2)]):\n    print(b.v)\n",
      "expectedOutput": "1\n2\n3",
      "tutorial": "<p class=\"mb-4 text-gray-300\"><code>@total_ordering</code> fills in the rest of the rich comparison methods when you define <code>__eq__</code> and one ordering method.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from functools import total_ordering\n@total_ordering\nclass V:\n  def __init__(self,x): self.x=x\n  def __eq__(self,o): return self.x==o.x\n  def __lt__(self,o): return self.x<o.x\nprint([v.x for v in sorted([V(2),V(1)])])</pre></div>",
      "tags": [
        "Intermediate",
        "Control Flow",
        "Functions",
        "OOP",
        "Algorithms"
      ]
    },
    {
      "id": 186,
      "title": "186. dataclasses.default_factory",
      "language": "python",
      "description": "Use field(default_factory=list) to avoid shared mutable defaults.",
      "initialCode": "from dataclasses import dataclass, field\n\n# Define Bag with items: list[str] = field(default_factory=list)\n# Append 'x' to items and print its length (1)\n\n",
      "fullSolution": "from dataclasses import dataclass, field\n\n@dataclass\nclass Bag:\n    items: list[str] = field(default_factory=list)\n\nb = Bag()\nb.items.append('x')\nprint(len(b.items))\n",
      "expectedOutput": "1",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Use <code>default_factory</code> to create a new default object per-instance and avoid shared mutable defaults.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from dataclasses import dataclass, field\n@dataclass\nclass C: xs: list[int] = field(default_factory=list)\nprint(C().xs)</pre></div>",
      "tags": [
        "Intermediate",
        "Collections",
        "OOP",
        "Decorators"
      ]
    },
    {
      "id": 187,
      "title": "187. dataclasses.replace",
      "language": "python",
      "description": "Use dataclasses.replace to copy with a modified field.",
      "initialCode": "from dataclasses import dataclass, replace\n\n# Define frozen Point(x:int, y:int), create p=Point(1,2)\n# Create q = replace(p, y=5) and print q.y\n\n",
      "fullSolution": "from dataclasses import dataclass, replace\n\n@dataclass(frozen=True)\nclass Point:\n    x: int\n    y: int\n\nq = replace(Point(1,2), y=5)\nprint(q.y)\n",
      "expectedOutput": "5",
      "tutorial": "<p class=\"mb-4 text-gray-300\"><code>replace</code> makes an updated copy of a dataclass instance; handy with immutable (<code>frozen=True</code>) types.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from dataclasses import dataclass, replace\n@dataclass(frozen=True)\nclass User: name:str; age:int\nprint(replace(User('a',1), age=2))</pre></div>",
      "tags": [
        "Intermediate",
        "OOP",
        "Decorators"
      ]
    },
    {
      "id": 188,
      "title": "188. Capstone: CSV + File IO + Sum",
      "language": "python",
      "description": "Write a CSV file, read it with csv.DictReader, sum a column, and print the total.",
      "initialCode": "import csv\n\n# Create a.csv with rows: name,score then Ada,10 then Bob,20 then Cia,15\n# Read it back using csv.DictReader, sum the 'score' as ints, and print the total (45)\n\n",
      "fullSolution": "import csv\n\nwith open('a.csv', 'w', newline='') as f:\n    w = csv.writer(f)\n    w.writerow(['name','score'])\n    w.writerow(['Ada','10'])\n    w.writerow(['Bob','20'])\n    w.writerow(['Cia','15'])\n\nwith open('a.csv') as f:\n    r = csv.DictReader(f)\n    total = sum(int(row['score']) for row in r)\nprint(total)\n",
      "expectedOutput": "45",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Capstone combining file I/O and the <code>csv</code> module: write a small CSV, read it via <code>DictReader</code>, transform fields, and aggregate.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import csv\nwith open('t.csv','w',newline='') as f:\n  csv.writer(f).writerow(['x','1'])\nwith open('t.csv') as f:\n  print(next(csv.DictReader(f))['x'])</pre></div>",
      "tags": [
        "Intermediate",
        "Control Flow",
        "I/O",
        "Serialization"
      ]
    },
    {
      "id": 189,
      "title": "189. ThreadPoolExecutor (sum squares)",
      "language": "python",
      "description": "Use a thread pool to square 1..3 and print the sum (14).",
      "initialCode": "from concurrent.futures import ThreadPoolExecutor\n\n# Submit tasks that square 1..3 and print the sum (14)\n\n",
      "fullSolution": "from concurrent.futures import ThreadPoolExecutor\n\nwith ThreadPoolExecutor(max_workers=3) as ex:\n    futs = [ex.submit(lambda x: x*x, i) for i in (1,2,3)]\n    print(sum(f.result() for f in futs))\n",
      "expectedOutput": "14",
      "tutorial": "<p class=\"mb-4 text-gray-300\">For I/O-bound or lightweight CPU work, <code>ThreadPoolExecutor</code> offers a simple concurrency primitive.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from concurrent.futures import ThreadPoolExecutor\n\nwith ThreadPoolExecutor(max_workers=3) as ex:\n    futs = [ex.submit(lambda x: x*x, i) for i in (1,2,3)]\n    print(sum(f.result() for f in futs))</pre></div>",
      "tags": [
        "Intermediate",
        "Control Flow",
        "Functions",
        "Algorithms",
        "Concurrency"
      ]
    },
    {
      "id": 190,
      "title": "190. pathlib write + size",
      "language": "python",
      "description": "Create a directory and a file, write 'hi', then print file size (2).",
      "initialCode": "from pathlib import Path\n\n# Create d/ and d/t.txt with 'hi' then print t.txt size (2)\n\n",
      "fullSolution": "from pathlib import Path\n\nd = Path('d'); d.mkdir(exist_ok=True)\n(p := d/'t.txt').write_text('hi')\nprint(p.stat().st_size)\n",
      "expectedOutput": "2",
      "tutorial": "<p class=\"mb-4 text-gray-300\"><code>pathlib</code> provides an object-oriented filesystem API; <code>Path.write_text</code> is a handy convenience.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from pathlib import Path\n\nd = Path('d'); d.mkdir(exist_ok=True)\n(p := d/'t.txt').write_text('hi')\nprint(p.stat().st_size)</pre></div>",
      "tags": [
        "Intermediate",
        "OOP",
        "I/O"
      ]
    },
    {
      "id": 191,
      "title": "191. itertools.groupby (top counts)",
      "language": "python",
      "description": "Group words and print the top 2 as 'b:3' then 'a:2'.",
      "initialCode": "from itertools import groupby\n\n# Using s='a b a c b b', group words to count occurrences and print top 2: b:3 then a:2\n\n",
      "fullSolution": "from itertools import groupby\n\ns = 'a b a c b b'\nwords = sorted(s.split())\ncounts = [(k, sum(1 for _ in g)) for k, g in groupby(words)]\nfor k, c in sorted(counts, key=lambda kv: -kv[1])[:2]:\n    print(f'{k}:{c}')\n",
      "expectedOutput": "b:3\na:2",
      "tutorial": "<p class=\"mb-4 text-gray-300\"><code>groupby</code> requires a sorted input to group identical keys; aggregate group sizes to compute frequencies.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from itertools import groupby\n\ns = 'a b a c b b'\nwords = sorted(s.split())\ncounts = [(k, sum(1 for _ in g)) for k, g in groupby(words)]\nfor k, c in sorted(counts, key=lambda kv: -kv[1])[:2]:\n    print(f'{k}:{c}')</pre></div>",
      "tags": [
        "Intermediate",
        "Control Flow",
        "Functions",
        "Strings",
        "Algorithms"
      ]
    },
    {
      "id": 192,
      "title": "192. asyncio.gather (sum results)",
      "language": "python",
      "description": "Run 3 async tasks concurrently and print the sum of their results (6).",
      "initialCode": "import asyncio\n\n# Create 3 coroutines returning 1,2,3 after small sleeps; gather and print sum (6)\n\n",
      "fullSolution": "import asyncio\n\nasync def f(v, delay):\n    await asyncio.sleep(delay)\n    return v\n\nasync def main():\n    xs = await asyncio.gather(f(1,0.05), f(2,0.05), f(3,0.05))\n    print(sum(xs))\n\nasyncio.run(main())\n",
      "expectedOutput": "6",
      "tutorial": "<p class=\"mb-4 text-gray-300\"><code>asyncio.gather</code> runs coroutines concurrently and returns their results as a list.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import asyncio\n\nasync def f(v, delay):\n    await asyncio.sleep(delay)\n    return v\n\nasync def main():\n    xs = await asyncio.gather(f(1,0.05), f(2,0.05), f(3,0.05))\n    print(sum(xs))\n\nasyncio.run(main())</pre></div>",
      "tags": [
        "Intermediate",
        "Functions",
        "Concurrency",
        "Async"
      ]
    },
    {
      "id": 193,
      "title": "193. re.findall digits",
      "language": "python",
      "description": "Extract digits from 'a1b22c' and print '122'.",
      "initialCode": "import re\n\n# Using re.findall, extract digits from 'a1b22c' and print 122\n\n",
      "fullSolution": "import re\nprint(''.join(re.findall(r'\\d', 'a1b22c')))\n",
      "expectedOutput": "122",
      "tutorial": "<p class=\"mb-4 text-gray-300\"><code>re.findall</code> returns all non-overlapping matches; join them into a string.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import re\nprint(''.join(re.findall(r'\\d', 'a1b22c')))</pre></div>",
      "tags": [
        "Intermediate",
        "Strings",
        "Regex"
      ]
    },
    {
      "id": 194,
      "title": "194. datetime: days between",
      "language": "python",
      "description": "Compute days between 2024-01-10 and 2024-01-15 (5).",
      "initialCode": "from datetime import date\n\n# Print (date(2024,1,15) - date(2024,1,10)).days (5)\n\n",
      "fullSolution": "from datetime import date\nprint((date(2024,1,15) - date(2024,1,10)).days)\n",
      "expectedOutput": "5",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Subtract two <code>date</code> objects to get a <code>timedelta</code>; use <code>.days</code>.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from datetime import date\nprint((date(2024,1,15) - date(2024,1,10)).days)</pre></div>",
      "tags": [
        "Intermediate",
        "Date/Time"
      ]
    },
    {
      "id": 195,
      "title": "195. pathlib.glob (count .txt)",
      "language": "python",
      "description": "Create a.txt, b.md, c.txt in d/ and print how many .txt files exist (2).",
      "initialCode": "from pathlib import Path\n\n# Create d/a.txt, d/b.md, d/c.txt, then print count of *.txt under d (2)\n\n",
      "fullSolution": "from pathlib import Path\n\nd = Path('d'); d.mkdir(exist_ok=True)\n(d/'a.txt').write_text('x')\n(d/'b.md').write_text('y')\n(d/'c.txt').write_text('z')\nprint(len(list(d.glob('*.txt'))))\n",
      "expectedOutput": "2",
      "tutorial": "<p class=\"mb-4 text-gray-300\"><code>Path.glob</code> matches patterns within a directory; convert to a list to count.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from pathlib import Path\n\nd = Path('d'); d.mkdir(exist_ok=True)\n(d/'a.txt').write_text('x')\n(d/'b.md').write_text('y')\n(d/'c.txt').write_text('z')\nprint(len(list(d.glob('*.txt'))))</pre></div>",
      "tags": [
        "Intermediate",
        "Collections",
        "I/O"
      ]
    },
    {
      "id": 196,
      "title": "196. collections.Counter (top 2)",
      "language": "python",
      "description": "Use Counter to print top 2 words for s='a b a c b b' as b:3 then a:2.",
      "initialCode": "from collections import Counter\n\n# With s='a b a c b b', use Counter to print b:3 then a:2\n\n",
      "fullSolution": "from collections import Counter\n\ns = 'a b a c b b'\nfor k, c in Counter(s.split()).most_common(2):\n    print(f'{k}:{c}')\n",
      "expectedOutput": "b:3\na:2",
      "tutorial": "<p class=\"mb-4 text-gray-300\"><code>Counter.most_common</code> returns items sorted by frequency.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from collections import Counter\n\ns = 'a b a c b b'\nfor k, c in Counter(s.split()).most_common(2):\n    print(f'{k}:{c}')</pre></div>",
      "tags": [
        "Intermediate",
        "Control Flow",
        "Strings",
        "Collections",
        "Algorithms"
      ]
    },
    {
      "id": 197,
      "title": "197. itertools.product",
      "language": "python",
      "description": "Compute Cartesian product of ['a','b'] and [1,2] and print a1,a2,b1,b2 each on its own line.",
      "initialCode": "from itertools import product\n\n# Print a1, a2, b1, b2 (each on new line) from product(['a','b'], [1,2])\n\n",
      "fullSolution": "from itertools import product\nfor a,b in product(['a','b'], [1,2]):\n    print(f'{a}{b}')\n",
      "expectedOutput": "a1\na2\nb1\nb2",
      "tutorial": "<p class=\"mb-4 text-gray-300\"><code>product</code> nests loops in order: first sequence outer, second inner.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from itertools import product\nfor a,b in product(['a','b'], [1,2]):\n    print(f'{a}{b}')</pre></div>",
      "tags": [
        "Intermediate",
        "Control Flow",
        "Functional"
      ]
    },
    {
      "id": 198,
      "title": "198. functools.lru_cache (fib)",
      "language": "python",
      "description": "Cache Fibonacci to compute fib(10) and print 55.",
      "initialCode": "from functools import lru_cache\n\n# Define @lru_cache fib(n) and print fib(10) (55)\n\n",
      "fullSolution": "from functools import lru_cache\n\n@lru_cache(maxsize=None)\ndef fib(n):\n    return n if n < 2 else fib(n-1)+fib(n-2)\n\nprint(fib(10))\n",
      "expectedOutput": "55",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Memoization speeds up recursive computations significantly.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from functools import lru_cache\n\n@lru_cache(maxsize=None)\ndef fib(n):\n    return n if n &lt; 2 else fib(n-1)+fib(n-2)\n\nprint(fib(10))</pre></div>",
      "tags": [
        "Intermediate",
        "Control Flow",
        "Functions",
        "Performance",
        "Functional"
      ]
    },
    {
      "id": 199,
      "title": "199. threading.Lock (increment)",
      "language": "python",
      "description": "Safely increment a shared counter with 5 threads x 100 increments and print 500.",
      "initialCode": "from threading import Thread, Lock\n\n# Use a Lock to safely increment a shared counter to 500\n\n",
      "fullSolution": "from threading import Thread, Lock\n\nn = 0\nlock = Lock()\n\ndef inc():\n    global n\n    for _ in range(100):\n        with lock:\n            n += 1\n\nths = [Thread(target=inc) for _ in range(5)]\nfor t in ths: t.start()\nfor t in ths: t.join()\nprint(n)\n",
      "expectedOutput": "500",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Use a <code>Lock</code> around critical sections to avoid race conditions.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from threading import Thread, Lock\n\nn = 0\nlock = Lock()\n\ndef inc():\n    global n\n    for _ in range(100):\n        with lock:\n            n += 1\n\nths = [Thread(target=inc) for _ in range(5)]</pre></div>",
      "tags": [
        "Intermediate",
        "Control Flow",
        "Functions",
        "Strings",
        "Concurrency"
      ]
    },
    {
      "id": 200,
      "title": "200. read lines count",
      "language": "python",
      "description": "Write three lines to d/t.txt then read and print the line count (3).",
      "initialCode": "# Write a\\n b\\n c to d/t.txt then print line count (3)\n\n",
      "fullSolution": "from pathlib import Path\n\nd = Path('d'); d.mkdir(exist_ok=True)\n(p := d/'t.txt').write_text('a\\n b\\n c\\n')\nprint(len(p.read_text().splitlines()))\n",
      "expectedOutput": "3",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Use <code>Path.read_text</code> then <code>.splitlines()</code> to count lines.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from pathlib import Path\n\nd = Path('d'); d.mkdir(exist_ok=True)\n(p := d/'t.txt').write_text('a\\n b\\n c\\n')\nprint(len(p.read_text().splitlines()))</pre></div>",
      "tags": [
        "Intermediate",
        "I/O"
      ]
    },
    {
      "id": 201,
      "title": "201. json.dumps sorted keys",
      "language": "python",
      "description": "Dump {'b':1,'a':2} with sorted keys and print {\"a\": 2, \"b\": 1}.",
      "initialCode": "import json\n\n# Print json.dumps({'b':1,'a':2}, sort_keys=True)\n\n",
      "fullSolution": "import json\nprint(json.dumps({'b':1,'a':2}, sort_keys=True))\n",
      "expectedOutput": "{\"a\": 2, \"b\": 1}",
      "tutorial": "<p class=\"mb-4 text-gray-300\"><code>json.dumps</code> with <code>sort_keys=True</code> produces deterministic key order.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import json\nprint(json.dumps({'b':1,'a':2}, sort_keys=True))</pre></div>",
      "tags": [
        "Intermediate",
        "Algorithms",
        "Serialization"
      ]
    },
    {
      "id": 202,
      "title": "202. enum.auto name",
      "language": "python",
      "description": "Define an Enum with auto() and print the member name 'RED'.",
      "initialCode": "from enum import Enum, auto\n\n# Define Color(RED, GREEN) using auto and print Color.RED.name\n\n",
      "fullSolution": "from enum import Enum, auto\n\nclass Color(Enum):\n    RED = auto()\n    GREEN = auto()\n\nprint(Color.RED.name)\n",
      "expectedOutput": "RED",
      "tutorial": "<p class=\"mb-4 text-gray-300\"><code>auto()</code> assigns incrementing values automatically; use <code>.name</code> for the identifier.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from enum import Enum, auto\n\nclass Color(Enum):\n    RED = auto()\n    GREEN = auto()\n\nprint(Color.RED.name)</pre></div>",
      "tags": [
        "Intermediate",
        "Control Flow",
        "OOP"
      ]
    },
    {
      "id": 203,
      "title": "203. decimal quantize (HALF_UP)",
      "language": "python",
      "description": "Round Decimal('1.005') to two decimals (HALF_UP) and print 1.01.",
      "initialCode": "from decimal import Decimal, ROUND_HALF_UP\n\n# Print Decimal('1.005').quantize(Decimal('0.01'), rounding=ROUND_HALF_UP)\n\n",
      "fullSolution": "from decimal import Decimal, ROUND_HALF_UP\nprint(Decimal('1.005').quantize(Decimal('0.01'), rounding=ROUND_HALF_UP))\n",
      "expectedOutput": "1.01",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Use <code>Decimal</code> for precise rounding semantics.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from decimal import Decimal, ROUND_HALF_UP\nprint(Decimal('1.005').quantize(Decimal('0.01'), rounding=ROUND_HALF_UP))</pre></div>",
      "tags": [
        "Intermediate",
        "Control Flow",
        "Math and Stats"
      ]
    },
    {
      "id": 204,
      "title": "204. heapq.merge",
      "language": "python",
      "description": "Merge [1,4] and [2,3] and print items in order each on its own line.",
      "initialCode": "import heapq\n\n# Print 1,2,3,4 (each on new line) from heapq.merge([1,4],[2,3])\n\n",
      "fullSolution": "import heapq\nfor x in heapq.merge([1,4],[2,3]):\n    print(x)\n",
      "expectedOutput": "1\n2\n3\n4",
      "tutorial": "<p class=\"mb-4 text-gray-300\"><code>heapq.merge</code> lazily merges sorted iterables.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import heapq\nfor x in heapq.merge([1,4],[2,3]):\n    print(x)</pre></div>",
      "tags": [
        "Intermediate",
        "Control Flow",
        "Algorithms",
        "Generators"
      ]
    },
    {
      "id": 205,
      "title": "205. itertools.groupby (adjacent)",
      "language": "python",
      "description": "For 'aaabbc', print adjacent run lengths: a:3 then b:2 then c:1.",
      "initialCode": "from itertools import groupby\n\n# Using s='aaabbc', print a:3 then b:2 then c:1 (each on new line)\n\n",
      "fullSolution": "from itertools import groupby\n\ns = 'aaabbc'\nfor k, g in groupby(s):\n    print(f'{k}:{sum(1 for _ in g)}')\n",
      "expectedOutput": "a:3\nb:2\nc:1",
      "tutorial": "<p class=\"mb-4 text-gray-300\">On unsorted strings, <code>groupby</code> groups adjacent equal items.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from itertools import groupby\n\ns = 'aaabbc'\nfor k, g in groupby(s):\n    print(f'{k}:{sum(1 for _ in g)}')</pre></div>",
      "tags": [
        "Intermediate",
        "Control Flow",
        "Algorithms",
        "Functional"
      ]
    },
    {
      "id": 206,
      "title": "206. array.array sum",
      "language": "python",
      "description": "Create array('i',[1,2,3]) and print the sum (6).",
      "initialCode": "from array import array\n\n# Print sum(array('i',[1,2,3])) -> 6\n\n",
      "fullSolution": "from array import array\nprint(sum(array('i',[1,2,3])))\n",
      "expectedOutput": "6",
      "tutorial": "<p class=\"mb-4 text-gray-300\"><code>array</code> stores homogenous values efficiently; many built-ins like <code>sum</code> work directly.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from array import array\nprint(sum(array('i',[1,2,3])))</pre></div>",
      "tags": [
        "Intermediate",
        "Collections"
      ]
    },
    {
      "id": 207,
      "title": "207. dataclasses.field metadata",
      "language": "python",
      "description": "Define a dataclass with metadata and print a field's metadata value.",
      "initialCode": "from dataclasses import dataclass, field\n\n# Define User(name: str = field(metadata={'role':'admin'})); print the role metadata\n\n",
      "fullSolution": "from dataclasses import dataclass, field\n\n@dataclass\nclass User:\n    name: str = field(metadata={'role':'admin'})\n\nprint(User.__dataclass_fields__['name'].metadata['role'])\n",
      "expectedOutput": "admin",
      "tutorial": "<p class=\"mb-4 text-gray-300\"><code>field(metadata=...)</code> is a hook for frameworks and annotations.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from dataclasses import dataclass, field\n\n@dataclass\nclass User:\n    name: str = field(metadata={'role':'admin'})\n\nprint(User.__dataclass_fields__['name'].metadata['role'])</pre></div>",
      "tags": [
        "Intermediate",
        "Control Flow",
        "OOP",
        "Decorators"
      ]
    },
    {
      "id": 208,
      "title": "208. typing.NamedTuple",
      "language": "python",
      "description": "Define Person(name,id) as NamedTuple, create ('Ada',1), and print the name.",
      "initialCode": "from typing import NamedTuple\n\n# Define Person(name:str,id:int); print Person('Ada',1).name\n\n",
      "fullSolution": "from typing import NamedTuple\n\nclass Person(NamedTuple):\n    name: str\n    id: int\n\nprint(Person('Ada',1).name)\n",
      "expectedOutput": "Ada",
      "tutorial": "<p class=\"mb-4 text-gray-300\"><code>NamedTuple</code> provides lightweight, typed, immutable records.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from typing import NamedTuple\n\nclass Person(NamedTuple):\n    name: str\n    id: int\n\nprint(Person('Ada',1).name)</pre></div>",
      "tags": [
        "Intermediate",
        "OOP",
        "Type System"
      ]
    },
    {
      "id": 209,
      "title": "209. Path.read_text().upper()",
      "language": "python",
      "description": "Write 'ok' to d/t.txt and print its uppercase content 'OK'.",
      "initialCode": "from pathlib import Path\n\n# Write 'ok' to d/t.txt, then print Path('d/t.txt').read_text().upper()\n\n",
      "fullSolution": "from pathlib import Path\n\nd = Path('d'); d.mkdir(exist_ok=True)\n(d/'t.txt').write_text('ok')\nprint((d/'t.txt').read_text().upper())\n",
      "expectedOutput": "OK",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Combine <code>Path.write_text</code> and <code>Path.read_text</code> for simple text IO.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from pathlib import Path\n\nd = Path('d'); d.mkdir(exist_ok=True)\n(d/'t.txt').write_text('ok')\nprint((d/'t.txt').read_text().upper())</pre></div>",
      "tags": [
        "Intermediate",
        "Control Flow",
        "Strings",
        "I/O"
      ]
    },
    {
      "id": 210,
      "title": "210. asyncio.wait_for timeout",
      "language": "python",
      "description": "Timeout a slow coroutine and print 'timeout'.",
      "initialCode": "import asyncio\n\n# Use asyncio.wait_for on a 0.2s sleep with 0.05s timeout; print 'timeout'\n\n",
      "fullSolution": "import asyncio\n\nasync def slow():\n    await asyncio.sleep(0.2)\n\ntry:\n    asyncio.run(asyncio.wait_for(slow(), 0.05))\n    print('ok')\nexcept asyncio.TimeoutError:\n    print('timeout')\n",
      "expectedOutput": "timeout",
      "tutorial": "<p class=\"mb-4 text-gray-300\"><code>wait_for</code> cancels if the operation exceeds the timeout.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import asyncio\n\nasync def slow():\n    await asyncio.sleep(0.2)\n\ntry:\n    asyncio.run(asyncio.wait_for(slow(), 0.05))\n    print('ok')\nexcept asyncio.TimeoutError:\n    print('timeout')</pre></div>",
      "tags": [
        "Intermediate",
        "Control Flow",
        "Functions",
        "Async",
        "Error Handling"
      ]
    },
    {
      "id": 211,
      "title": "211. itertools.accumulate (product)",
      "language": "python",
      "description": "Multiply 1..4 via accumulate and print final result (24).",
      "initialCode": "from itertools import accumulate\nimport operator\n\n# Compute product of 1..4 using accumulate and print 24\n\n",
      "fullSolution": "from itertools import accumulate\nimport operator\n\nxs = list(accumulate([1,2,3,4], operator.mul))\nprint(xs[-1])\n",
      "expectedOutput": "24",
      "tutorial": "<p class=\"mb-4 text-gray-300\"><code>accumulate</code> can fold a sequence with a custom operator.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from itertools import accumulate\nimport operator\n\nxs = list(accumulate([1,2,3,4], operator.mul))\nprint(xs[-1])</pre></div>",
      "tags": [
        "Intermediate",
        "Collections",
        "Functional"
      ]
    },
    {
      "id": 212,
      "title": "212. re.sub replace digits",
      "language": "python",
      "description": "Replace digits in 'a1b22' with '#' and print 'a#b##'.",
      "initialCode": "import re\n\n# Print re.sub(r'\\d', '#', 'a1b22') -> a#b##\n\n",
      "fullSolution": "import re\nprint(re.sub(r'\\d', '#', 'a1b22'))\n",
      "expectedOutput": "a#b##",
      "tutorial": "<p class=\"mb-4 text-gray-300\"><code>re.sub</code> replaces all matches; escape <code>\\\\d</code> properly.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import re\nprint(re.sub(r'\\d', '#', 'a1b22'))</pre></div>",
      "tags": [
        "Intermediate",
        "Regex"
      ]
    },
    {
      "title": "213. Assertions for Lightweight Tests",
      "language": "python",
      "description": "Implement add(a, b) and verify with assert; print OK when all tests pass.",
      "initialCode": "def add(a, b):\n    # TODO: return the sum\n    pass\n\n# Add a couple of asserts and print \"OK\" if they pass\n",
      "fullSolution": "def add(a, b):\n    return a + b\n\nassert add(2, 3) == 5\nassert add(-1, 1) == 0\nprint(\"OK\")\n",
      "expectedOutput": "OK",
      "tutorial": "<p class=\"mb-4 text-gray-300\">assert is a simple built-in way to check expectations while coding. If the condition is False, Python raises AssertionError and stops; if all asserts pass, execution continues.</p>\n<h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4>\n<div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">def square(x):\n    return x * x\n\nassert square(3) == 9\nprint(\"OK\")</pre></div>",
      "id": 213,
      "tags": [
        "Intermediate",
        "Testing",
        "Control Flow",
        "Functions"
      ]
    },
    {
      "title": "214. Regex Basics: Extract Email",
      "language": "python",
      "description": "Use re.search to find and print the email in the given text.",
      "initialCode": "import re\ntext = \"Contact us at support@example.com for help.\"\n# Print the email address from text\n",
      "fullSolution": "import re\ntext = \"Contact us at support@example.com for help.\"\nm = re.search(r\"[\\w\\.-]+@[\\w\\.-]+\", text)\nif m:\n    print(m.group(0))\n",
      "expectedOutput": "support@example.com",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Regular expressions match patterns in text. Use re.search to find the first match, and groups to extract portions.</p>\n<h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4>\n<div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import re\nm = re.search(r\"\\d+\", \"Order A-1023\")\nprint(m.group(0))  # 1023</pre></div>",
      "id": 214,
      "tags": [
        "Intermediate",
        "Control Flow",
        "Strings",
        "Algorithms",
        "Regex"
      ]
    },
    {
      "title": "215. JSON Encode/Decode",
      "language": "python",
      "description": "Serialize a dict to JSON and parse it back; print the name value.",
      "initialCode": "import json\ndata = {\"name\": \"Alice\", \"age\": 30}\n# Dump to JSON, load it back, then print the name\n",
      "fullSolution": "import json\ndata = {\"name\": \"Alice\", \"age\": 30}\ns = json.dumps(data)\nobj = json.loads(s)\nprint(obj[\"name\"])\n",
      "expectedOutput": "Alice",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Use the json module to convert between Python objects and JSON strings: dumps() to serialize, loads() to parse.</p>\n<h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4>\n<div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import json\npayload = {\"ok\": True}\ns = json.dumps(payload)\nprint(s)  # {\"ok\": true}</pre></div>",
      "id": 215,
      "tags": [
        "Intermediate",
        "Collections",
        "Serialization",
        "Parsing"
      ]
    },
    {
      "title": "216. asyncio.Semaphore (limit concurrency)",
      "language": "python",
      "description": "Run 4 async tasks with a concurrency limit of 2 using Semaphore; print the total tasks run (4).",
      "initialCode": "import asyncio\n\n# Use an asyncio.Semaphore to limit concurrency to 2 while running 4 tasks.\n# Each task should return 1; after gathering, print the sum (4).\n\n",
      "fullSolution": "import asyncio\n\nasync def worker(sema):\n    async with sema:\n        await asyncio.sleep(0.05)\n        return 1\n\nasync def main():\n    sema = asyncio.Semaphore(2)\n    tasks = [asyncio.create_task(worker(sema)) for _ in range(4)]\n    results = await asyncio.gather(*tasks)\n    print(sum(results))\n\nasyncio.run(main())\n",
      "expectedOutput": "4",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Use <code>asyncio.Semaphore</code> to bound simultaneous operations (e.g., API calls, file I/O). It prevents too many tasks from running at once.</p>\n<h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4>\n<div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import asyncio\nsema = asyncio.Semaphore(2)\nasync def work():\n    async with sema:\n        await asyncio.sleep(0.01)\n        return 1\n</pre></div>",
      "id": 216,
      "tags": [
        "Intermediate",
        "Control Flow",
        "Functions",
        "Concurrency",
        "Async"
      ]
    },
    {
      "title": "217. ProcessPoolExecutor (sum of cubes)",
      "language": "python",
      "description": "Use ProcessPoolExecutor to compute the sum of cubes from 1..50 and print it.",
      "initialCode": "from concurrent.futures import ProcessPoolExecutor\n\n# Define a top-level cube(x) and safely run a ProcessPoolExecutor\n# to sum x*x*x for x in 1..50, then print the total.\n\n",
      "fullSolution": "from concurrent.futures import ProcessPoolExecutor\n\ndef cube(x):\n    return x*x*x\n\nif __name__ == '__main__':\n    with ProcessPoolExecutor() as ex:\n        total = sum(ex.map(cube, range(1, 51)))\n        print(total)\n",
      "expectedOutput": "1625625",
      "tutorial": "<p class=\"mb-4 text-gray-300\">CPU-bound work scales with processes, not threads. Use <code>ProcessPoolExecutor</code> to fan out heavy computation across cores and then reduce results.</p>\n<h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4>\n<div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from concurrent.futures import ProcessPoolExecutor\ndef f(x):\n    return x*x\nif __name__ == '__main__':\n    with ProcessPoolExecutor() as ex:\n        print(sum(ex.map(f, range(5))))  # 0+1+4+9+16 = 30</pre></div>",
      "id": 217,
      "tags": [
        "Intermediate",
        "Control Flow",
        "Functions",
        "Concurrency",
        "Async"
      ]
    },
    {
      "title": "218. asyncio.Queue producer/consumer",
      "language": "python",
      "description": "Use an asyncio.Queue with a producer that enqueues 5 items and a consumer that counts them; print 5.",
      "initialCode": "import asyncio\n\n# Create an asyncio.Queue. Producer should put 5 items then a sentinel (None).\n# Consumer should count items until sentinel, then print the count (5).\n\n",
      "fullSolution": "import asyncio\n\nasync def producer(q):\n    for i in range(5):\n        await q.put(i)\n    await q.put(None)  # sentinel\n\nasync def consumer(q):\n    count = 0\n    while True:\n        item = await q.get()\n        if item is None:\n            print(count)\n            return\n        count += 1\n\nasync def main():\n    q = asyncio.Queue()\n    await asyncio.gather(producer(q), consumer(q))\n\nasyncio.run(main())\n",
      "expectedOutput": "5",
      "tutorial": "<p class=\"mb-4 text-gray-300\"><code>asyncio.Queue</code> coordinates producers and consumers without busy-waiting. Use a sentinel to signal completion.</p>\n<h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4>\n<div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">q = asyncio.Queue()\n# producer: await q.put(x)\n# consumer: x = await q.get()\n</pre></div>",
      "id": 218,
      "tags": [
        "Intermediate",
        "Control Flow",
        "Functions",
        "Async"
      ]
    },
    {
      "title": "219. contextlib.ExitStack (multiple resources)",
      "language": "python",
      "description": "Use ExitStack to manage two file handles, write 'A' and 'B', then read both and print AB.",
      "initialCode": "from contextlib import ExitStack\n\n# Open a.txt and b.txt with ExitStack, write 'A' and 'B' respectively.\n# Reopen and read both, then print their concatenation (AB).\n\n",
      "fullSolution": "from contextlib import ExitStack\n\nwith ExitStack() as stack:\n    fa = stack.enter_context(open('a.txt', 'w'))\n    fb = stack.enter_context(open('b.txt', 'w'))\n    fa.write('A')\n    fb.write('B')\n\nwith ExitStack() as stack:\n    fa = stack.enter_context(open('a.txt'))\n    fb = stack.enter_context(open('b.txt'))\n    print(fa.read() + fb.read())\n",
      "expectedOutput": "AB",
      "tutorial": "<p class=\"mb-4 text-gray-300\"><code>ExitStack</code> lets you dynamically compose multiple context managers (files, locks, etc.) and guarantees cleanup in reverse order.</p>\n<h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4>\n<div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from contextlib import ExitStack\nwith ExitStack() as stack:\n    f1 = stack.enter_context(open('x.txt', 'w'))\n    f2 = stack.enter_context(open('y.txt', 'w'))\n    f1.write('X'); f2.write('Y')\n</pre></div>",
      "id": 219,
      "tags": [
        "Intermediate",
        "Collections",
        "I/O",
        "Concurrency"
      ]
    },
    {
      "id": 220,
      "title": "220. sqlite3 in-memory (row count)",
      "language": "python",
      "description": "Create an in-memory SQLite DB, insert two rows, and print the count (2).",
      "initialCode": "import sqlite3\n\n# Create :memory: DB, table users(id INT, name TEXT), insert two rows, then SELECT COUNT(*) and print it\n\n",
      "fullSolution": "import sqlite3\n\nconn = sqlite3.connect(':memory:')\nc = conn.cursor()\nc.execute('CREATE TABLE users(id INT, name TEXT)')\nc.executemany('INSERT INTO users VALUES(?,?)', [(1,'Alice'), (2,'Bob')])\nconn.commit()\ncount = c.execute('SELECT COUNT(*) FROM users').fetchone()[0]\nprint(count)\n",
      "expectedOutput": "2",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Use the built-in <code>sqlite3</code> module for lightweight relational storage. <code>':memory:'</code> keeps data ephemeral.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">conn = sqlite3.connect(':memory:')\nc = conn.cursor()\nc.execute('CREATE TABLE t(x)')\nc.execute('INSERT INTO t VALUES(1)')\nprint(c.execute('SELECT COUNT(*) FROM t').fetchone()[0])</pre></div>",
      "tags": [
        "Intermediate",
        "Control Flow",
        "Databases"
      ]
    },
    {
      "id": 221,
      "title": "221. dataclasses ordering",
      "language": "python",
      "description": "Define an ordered dataclass User(age, name), sort, and print the youngest name (Anna).",
      "initialCode": "from dataclasses import dataclass\n\n# Define @dataclass(order=True) User with fields: age:int, name:str\n# Sort [User(30,'Zoe'), User(20,'Anna')] and print the first name\n\n",
      "fullSolution": "from dataclasses import dataclass\n\n@dataclass(order=True)\nclass User:\n    age: int\n    name: str\n\nusers = [User(30,'Zoe'), User(20,'Anna')]\nusers.sort()\nprint(users[0].name)\n",
      "expectedOutput": "Anna",
      "tutorial": "<p class=\"mb-4 text-gray-300\">With <code>@dataclass(order=True)</code>, Python generates comparison methods using field order, enabling natural sorting.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">@dataclass(order=True)\nclass Point: x: int; y: int\nprint(sorted([Point(1,2), Point(0,9)]))</pre></div>",
      "tags": [
        "Advanced",
        "OOP",
        "Algorithms",
        "Decorators"
      ]
    },
    {
      "id": 222,
      "title": "222. functools.singledispatch",
      "language": "python",
      "description": "Dispatch a function on argument type; print 'int:1' then 'str:a'.",
      "initialCode": "from functools import singledispatch\n\n# Define show(x) using @singledispatch with int and str specializations\n# Call show(1) then show('a') and print per-type results\n\n",
      "fullSolution": "from functools import singledispatch\n\n@singledispatch\ndef show(x):\n    return f'obj:{x}'\n\n@show.register(int)\ndef _(x: int):\n    return f'int:{x}'\n\n@show.register(str)\ndef _(x: str):\n    return f'str:{x}'\n\nprint(show(1))\nprint(show('a'))\n",
      "expectedOutput": "int:1\nstr:a",
      "tutorial": "<p class=\"mb-4 text-gray-300\"><code>@singledispatch</code> enables type-based function overloading for the first argument, keeping APIs clean.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">@singledispatch\ndef f(x): ...\n@f.register(list)\ndef _(x): ...</pre></div>",
      "tags": [
        "Advanced",
        "Control Flow",
        "Functions",
        "Collections",
        "Functional"
      ]
    },
    {
      "id": 223,
      "title": "223. itertools.accumulate (running sum)",
      "language": "python",
      "description": "Use accumulate to print running sums for [1,2,3]: 1, 3, 6 (each on new line).",
      "initialCode": "from itertools import accumulate\n\n# For [1,2,3], print running sums using accumulate (each on its own line)\n\n",
      "fullSolution": "from itertools import accumulate\nfor s in accumulate([1,2,3]):\n    print(s)\n",
      "expectedOutput": "1\n3\n6",
      "tutorial": "<p class=\"mb-4 text-gray-300\"><code>accumulate</code> computes prefix results (default: sums). Supply a function for other reductions (e.g., <code>max</code>).</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from itertools import accumulate\nprint(list(accumulate([1,2,3])))  # [1, 3, 6]</pre></div>",
      "tags": [
        "Advanced",
        "Control Flow",
        "Functions",
        "Collections",
        "Functional"
      ]
    },
    {
      "id": 224,
      "title": "224. bisect_right (insertion index)",
      "language": "python",
      "description": "Find the right-side insertion index of 3 in [1,2,3,4] and print 3.",
      "initialCode": "import bisect\n\n# Print bisect.bisect_right([1,2,3,4], 3)\n\n",
      "fullSolution": "import bisect\nprint(bisect.bisect_right([1,2,3,4], 3))\n",
      "expectedOutput": "3",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Use <code>bisect_right</code> for stable insertion after existing equals; <code>bisect_left</code> inserts before.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import bisect\nxs = [1,2,3,4]\nprint(bisect.bisect_right(xs, 3))  # 3</pre></div>",
      "tags": [
        "Advanced",
        "Control Flow"
      ]
    },
    {
      "id": 225,
      "title": "225. pathlib.glob (*.txt count)",
      "language": "python",
      "description": "Create a.txt, b.py, c.txt then print how many *.txt files exist (2).",
      "initialCode": "from pathlib import Path\n\n# Create files a.txt, b.py, c.txt in CWD\n# Use Path('.').glob('*.txt') to count and print 2\n\n",
      "fullSolution": "from pathlib import Path\nPath('a.txt').write_text('A')\nPath('b.py').write_text('print(1)')\nPath('c.txt').write_text('C')\nprint(sum(1 for _ in Path('.').glob('*.txt')))\n",
      "expectedOutput": "2",
      "tutorial": "<p class=\"mb-4 text-gray-300\"><code>pathlib</code> provides object-oriented paths. <code>glob</code> returns matching entries lazily.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from pathlib import Path\n# Count *.py files in current dir\nprint(sum(1 for _ in Path('.').glob('*.py')))</pre></div>",
      "tags": [
        "Advanced",
        "Control Flow",
        "OOP",
        "I/O"
      ]
    },
    {
      "id": 226,
      "title": "226. subprocess.run (call Python)",
      "language": "python",
      "description": "Spawn a child Python process that prints OK and relay the output.",
      "initialCode": "import subprocess, sys\n\n# Use subprocess.run to invoke the current Python to print 'OK'\n# Hint: [sys.executable, '-c', \"print('OK')\"]\n\n",
      "fullSolution": "import subprocess, sys\nres = subprocess.run([sys.executable, '-c', \"print('OK')\"], capture_output=True, text=True)\nprint(res.stdout.strip())\n",
      "expectedOutput": "OK",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Use <code>subprocess.run</code> for child processes. Prefer explicit <code>args</code> and capture outputs deterministically.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import subprocess, sys\nsubprocess.run([sys.executable, '-c', \"print('hi')\"])</pre></div>",
      "tags": [
        "Advanced",
        "Control Flow",
        "Strings"
      ]
    },
    {
      "id": 227,
      "title": "227. hashlib.sha256",
      "language": "python",
      "description": "Compute the SHA-256 hex digest of 'abc' and print it.",
      "initialCode": "import hashlib\n\n# Print hashlib.sha256(b'abc').hexdigest()\n\n",
      "fullSolution": "import hashlib\nprint(hashlib.sha256(b'abc').hexdigest())\n",
      "expectedOutput": "ba7816bf8f01cfea414140de5dae2223b00361a396177a9cb410ff61f20015ad",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Use <code>hashlib</code> for cryptographic hashes (integrity checks, fingerprints).</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import hashlib\nprint(hashlib.sha256(b'abc').hexdigest())</pre></div>",
      "tags": [
        "Advanced",
        "Control Flow",
        "Algorithms",
        "Security"
      ]
    },
    {
      "id": 228,
      "title": "228. zipfile write/read (count)",
      "language": "python",
      "description": "Create a zip with two files then open and print the number of entries (2).",
      "initialCode": "import zipfile, pathlib\n\n# Create files a.txt and b.txt, zip them to x.zip, then reopen and print len(namelist())\n\n",
      "fullSolution": "import zipfile, pathlib\npathlib.Path('a.txt').write_text('A')\npathlib.Path('b.txt').write_text('B')\nwith zipfile.ZipFile('x.zip','w') as z:\n    z.write('a.txt')\n    z.write('b.txt')\nwith zipfile.ZipFile('x.zip') as z:\n    print(len(z.namelist()))\n",
      "expectedOutput": "2",
      "tutorial": "<p class=\"mb-4 text-gray-300\"><code>zipfile</code> packs multiple files; <code>namelist()</code> lists contained paths.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import zipfile\nwith zipfile.ZipFile('x.zip','w') as z:\n    z.writestr('t.txt', 'data')\nprint(len(zipfile.ZipFile('x.zip').namelist()))</pre></div>",
      "tags": [
        "Advanced",
        "Collections",
        "I/O"
      ]
    },
    {
      "id": 229,
      "title": "229. datetime with UTC tz",
      "language": "python",
      "description": "Create 2020-01-02 03:04:05 UTC and print ISO 8601 string.",
      "initialCode": "from datetime import datetime, timezone\n\n# Build aware datetime(2020,1,2,3,4,5, tzinfo=timezone.utc) and print .isoformat()\n\n",
      "fullSolution": "from datetime import datetime, timezone\nprint(datetime(2020,1,2,3,4,5, tzinfo=timezone.utc).isoformat())\n",
      "expectedOutput": "2020-01-02T03:04:05+00:00",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Always prefer timezone-aware datetimes for correctness across zones; UTC is a reliable default.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from datetime import datetime, timezone\nprint(datetime.now(timezone.utc).isoformat())</pre></div>",
      "tags": [
        "Advanced",
        "Control Flow",
        "Date/Time"
      ]
    },
    {
      "id": 230,
      "title": "230. lru_cache Fibonacci",
      "language": "python",
      "description": "Use functools.lru_cache to compute fib(30) and print the result (832040).",
      "initialCode": "from functools import lru_cache\n\n# Implement memoized fib(n) with @lru_cache and print fib(30)\n\n",
      "fullSolution": "from functools import lru_cache\n\n@lru_cache(maxsize=None)\ndef fib(n: int) -> int:\n    return n if n < 2 else fib(n-1) + fib(n-2)\n\nprint(fib(30))\n",
      "expectedOutput": "832040",
      "tutorial": "<p class=\"mb-4 text-gray-300\"><code>lru_cache</code> provides transparent memoization for pure functions, dramatically improving performance.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from functools import lru_cache\n@lru_cache(maxsize=None)\ndef f(n): return 1 if n<2 else f(n-1)+f(n-2)\nprint(f(10))  # 89</pre></div>",
      "tags": [
        "Advanced",
        "Control Flow",
        "Functions",
        "Performance",
        "Functional"
      ]
    },
    {
      "id": 231,
      "title": "231. collections.Counter.most_common",
      "language": "python",
      "description": "Count letters in 'aabbbc' and print the most common entry b:3.",
      "initialCode": "from collections import Counter\n\n# Print the most common letter and count from 'aabbbc' in format k:v (b:3)\n\n",
      "fullSolution": "from collections import Counter\n(k,v), = Counter('aabbbc').most_common(1)\nprint(f'{k}:{v}')\n",
      "expectedOutput": "b:3",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Counters tally occurrences quickly; use <code>most_common(1)</code> for the top item.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from collections import Counter\nprint(Counter('abca').most_common(1))</pre></div>",
      "tags": [
        "Advanced",
        "Control Flow",
        "Strings",
        "Collections"
      ]
    },
    {
      "id": 232,
      "title": "232. struct pack/unpack (big-endian)",
      "language": "python",
      "description": "Pack 1024 as a big-endian unsigned int and unpack; print 1024.",
      "initialCode": "import struct\n\n# Pack 1024 with '>I' then unpack and print the value\n\n",
      "fullSolution": "import struct\nblob = struct.pack('>I', 1024)\nprint(struct.unpack('>I', blob)[0])\n",
      "expectedOutput": "1024",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Use <code>struct</code> for binary protocols; format strings control width and endianness.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import struct\nprint(struct.unpack('>H', b'\\x00\\x2a')[0])  # 42</pre></div>",
      "tags": [
        "Advanced",
        "Control Flow",
        "Strings",
        "Type System"
      ]
    },
    {
      "id": 233,
      "title": "233. contextlib.suppress",
      "language": "python",
      "description": "Delete a non-existent file without raising and print OK.",
      "initialCode": "from contextlib import suppress\nfrom pathlib import Path\n\n# Safely suppress FileNotFoundError when removing missing file, then print 'OK'\n\n",
      "fullSolution": "from contextlib import suppress\nfrom pathlib import Path\nwith suppress(FileNotFoundError):\n    Path('nope.txt').unlink()\nprint('OK')\n",
      "expectedOutput": "OK",
      "tutorial": "<p class=\"mb-4 text-gray-300\"><code>suppress</code> keeps code concise by ignoring specific, expected exceptions.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from contextlib import suppress\nwith suppress(ZeroDivisionError):\n    1/0</pre></div>",
      "tags": [
        "Advanced",
        "I/O"
      ]
    },
    {
      "id": 234,
      "title": "234. threading.Event (signal)",
      "language": "python",
      "description": "Use a worker thread to set an Event; main waits then prints 'done'.",
      "initialCode": "import threading, time\n\n# Start a thread that sleeps briefly then sets an Event. Main waits and prints 'done'.\n\n",
      "fullSolution": "import threading, time\n\nflag = threading.Event()\n\ndef worker():\n    time.sleep(0.02)\n    flag.set()\n\nthreading.Thread(target=worker).start()\nflag.wait()\nprint('done')\n",
      "expectedOutput": "done",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Use <code>Event</code> for one-shot signaling between threads without busy-waiting.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import threading, time\nflag = threading.Event()\nthreading.Thread(target=lambda: (time.sleep(0.01), flag.set())).start()\nflag.wait()</pre></div>",
      "tags": [
        "Advanced",
        "Control Flow",
        "Functions",
        "Collections",
        "Concurrency"
      ]
    },
    {
      "id": 235,
      "title": "235. unittest Smoke Test",
      "language": "python",
      "description": "Create a TestCase that asserts normalize_name trims and title-cases input, then print the test summary.",
      "initialCode": "import unittest\nimport io\n\n\ndef normalize_name(name: str) -> str:\n    return name.strip().title()\n\n\n# Build a unittest.TestCase with one method named test_normalizes_name.\n# Load the suite and run it with TextTestRunner(stream=io.StringIO()).\n# Finally, print \"Tests run: X, failures: Y\" using result data.",
      "fullSolution": "import unittest\nimport io\n\n\ndef normalize_name(name: str) -> str:\n    return name.strip().title()\n\n\nclass NormalizeNameTests(unittest.TestCase):\n    def test_normalizes_name(self):\n        self.assertEqual(normalize_name('  ada lovelace  '), 'Ada Lovelace')\n\n\nsuite = unittest.defaultTestLoader.loadTestsFromTestCase(NormalizeNameTests)\nresult = unittest.TextTestRunner(stream=io.StringIO()).run(suite)\nprint(f\"Tests run: {result.testsRun}, failures: {len(result.failures)}\")",
      "expectedOutput": "Tests run: 1, failures: 0",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Python's <code>unittest</code> module lets you organize assertions into classes so they can run in CI the same way every time.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import unittest\n\nclass Sample(unittest.TestCase):\n    def test_truth(self):\n        self.assertTrue(True)\n\nif __name__ == \"__main__\":\n    unittest.main()</pre></div>",
      "tags": [
        "Advanced",
        "Control Flow",
        "Functions",
        "Strings",
        "OOP"
      ]
    },
    {
      "id": 236,
      "title": "236. setUp/tearDown Cleanup",
      "language": "python",
      "description": "Use setUp to create a temporary directory and tearDown to remove it, then report the cleanup flag.",
      "initialCode": "import unittest\nimport tempfile\nimport io\nfrom pathlib import Path\n\n\nCLEANED = False\n\n\nclass MessageWriter:\n    def __init__(self, directory: Path):\n        self.path = directory / \"message.txt\"\n\n    def write(self, text: str) -> None:\n        self.path.write_text(text, encoding=\"utf-8\")\n\n\n# Implement a unittest.TestCase that:\n#   * creates a TemporaryDirectory and MessageWriter in setUp\n#   * writes \"hello\" and asserts the file contains it in a test method\n#   * cleans up the directory in tearDown and sets the CLEANED flag\n# Run the suite with TextTestRunner(stream=io.StringIO()) and print \"Tests run: X, cleaned: Y\".",
      "fullSolution": "import unittest\nimport tempfile\nimport io\nfrom pathlib import Path\n\n\nCLEANED = False\n\n\nclass MessageWriter:\n    def __init__(self, directory: Path):\n        self.path = directory / \"message.txt\"\n\n    def write(self, text: str) -> None:\n        self.path.write_text(text, encoding=\"utf-8\")\n\n\nclass MessageWriterTests(unittest.TestCase):\n    def setUp(self):\n        self.tmp = tempfile.TemporaryDirectory()\n        self.directory = Path(self.tmp.name)\n        self.writer = MessageWriter(self.directory)\n\n    def tearDown(self):\n        global CLEANED\n        self.tmp.cleanup()\n        CLEANED = not self.directory.exists()\n\n    def test_write_persists_content(self):\n        self.writer.write(\"hello\")\n        self.assertEqual(\n            self.writer.path.read_text(encoding=\"utf-8\"),\n            \"hello\",\n        )\n\n\nsuite = unittest.defaultTestLoader.loadTestsFromTestCase(MessageWriterTests)\nresult = unittest.TextTestRunner(stream=io.StringIO()).run(suite)\nprint(f\"Tests run: {result.testsRun}, cleaned: {CLEANED}\")",
      "expectedOutput": "Tests run: 1, cleaned: True",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Use <code>setUp</code>/<code>tearDown</code> to prepare shared fixtures and guarantee cleanup, which keeps tests isolated and production-like.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import unittest\n\nclass Demo(unittest.TestCase):\n    def setUp(self):\n        self.value = []\n\n    def tearDown(self):\n        self.value.clear()\n\n    def test_append(self):\n        self.value.append(1)\n        self.assertEqual(self.value, [1])</pre></div>",
      "tags": [
        "Advanced",
        "Testing",
        "Functions",
        "OOP",
        "I/O"
      ]
    },
    {
      "id": 237,
      "title": "237. Mocking Collaborators",
      "language": "python",
      "description": "Stub a dependency with unittest.mock to verify both behavior and interaction counts.",
      "initialCode": "import unittest\nimport io\nfrom unittest import mock\n\n\ndef total_order_amount(client) -> int:\n    orders = client.fetch_orders()\n    return sum(order[\"total\"] for order in orders)\n\n\n# Build a TestCase that uses a Mock client to:\n#   * stub fetch_orders() to return [{\"total\": 12}, {\"total\": 8}]\n#   * assert total_order_amount returns 20\n#   * verify fetch_orders was called exactly once\n# Run the suite with TextTestRunner(stream=io.StringIO()) and print \"Tests run: X, failures: Y\".",
      "fullSolution": "import unittest\nimport io\nfrom unittest import mock\n\n\ndef total_order_amount(client) -> int:\n    orders = client.fetch_orders()\n    return sum(order[\"total\"] for order in orders)\n\n\nclass TotalOrderAmountTests(unittest.TestCase):\n    def test_calls_client_and_sums_totals(self):\n        client = mock.Mock()\n        client.fetch_orders.return_value = [{\"total\": 12}, {\"total\": 8}]\n        self.assertEqual(total_order_amount(client), 20)\n        client.fetch_orders.assert_called_once()\n\n\nsuite = unittest.defaultTestLoader.loadTestsFromTestCase(TotalOrderAmountTests)\nresult = unittest.TextTestRunner(stream=io.StringIO()).run(suite)\nprint(f\"Tests run: {result.testsRun}, failures: {len(result.failures)}\")",
      "expectedOutput": "Tests run: 1, failures: 0",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Mocks let you isolate the unit under test and assert that collaborators were called with the right shape.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from unittest import TestCase, mock\n\nclass Example(TestCase):\n    def test_uses_api(self):\n        api = mock.Mock()\n        api.fetch.return_value = [1, 2]\n        api.fetch()\n        api.fetch.assert_called_once()</pre></div>",
      "tags": [
        "Advanced",
        "Control Flow",
        "Functions",
        "OOP",
        "Networking"
      ]
    },
    {
      "id": 238,
      "title": "238. Table-Driven Assertions",
      "language": "python",
      "description": "Drive multiple expectations through subTest and report which strong passwords passed.",
      "initialCode": "import unittest\nimport io\n\n\ndef is_strong_password(text: str) -> bool:\n    return (\n        len(text) >= 8\n        and any(ch.islower() for ch in text)\n        and any(ch.isupper() for ch in text)\n        and any(ch.isdigit() for ch in text)\n    )\n\n\nSTRONG_CASES = []\n\n\n# Write a TestCase with a single test that iterates through password cases using subTest.\n# Collect passwords expected to be strong in STRONG_CASES when they pass.\n# After running the suite, print \"Tests run: X, failures: Y, passed: LIST\" where LIST is sorted(STRONG_CASES).",
      "fullSolution": "import unittest\nimport io\n\n\ndef is_strong_password(text: str) -> bool:\n    return (\n        len(text) >= 8\n        and any(ch.islower() for ch in text)\n        and any(ch.isupper() for ch in text)\n        and any(ch.isdigit() for ch in text)\n    )\n\n\nSTRONG_CASES = []\n\n\nclass PasswordStrengthTests(unittest.TestCase):\n    def test_password_matrix(self):\n        cases = {\n            \"Password1\": True,\n            \"weak\": False,\n            \"Aa123456\": True,\n            \"NoDigits!!\": False,\n        }\n        for password, expected in cases.items():\n            with self.subTest(password=password):\n                result = is_strong_password(password)\n                if expected and result:\n                    STRONG_CASES.append(password)\n                self.assertEqual(result, expected)\n\n\nsuite = unittest.defaultTestLoader.loadTestsFromTestCase(PasswordStrengthTests)\nresult = unittest.TextTestRunner(stream=io.StringIO()).run(suite)\nprint(\n    f\"Tests run: {result.testsRun}, failures: {len(result.failures)}, passed: {sorted(STRONG_CASES)}\"\n)",
      "expectedOutput": "Tests run: 1, failures: 0, passed: ['Aa123456', 'Password1']",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Data-driven tests make it easy to bolt on new scenarios without duplicating assertion code.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import unittest\n\nclass Example(unittest.TestCase):\n    def test_values(self):\n        for value, expected in [(2, True), (3, False)]:\n            with self.subTest(value=value):\n                self.assertEqual(value % 2 == 0, expected)</pre></div>",
      "tags": [
        "Advanced",
        "Control Flow",
        "Functions",
        "Collections",
        "OOP"
      ]
    },
    {
      "id": 239,
      "title": "239. Capstone: Test Gate Report",
      "language": "python",
      "description": "Summarize mixed test and coverage results to decide if deployment stays blocked.",
      "initialCode": "results = [\n    {\"name\": \"unit\", \"status\": \"passed\", \"duration\": 58.1},\n    {\"name\": \"api\", \"status\": \"failed\", \"duration\": 120.4},\n    {\"name\": \"smoke\", \"status\": \"passed\", \"duration\": 30.0},\n]\n\ncoverage = {\"backend\": 0.91, \"frontend\": 0.82}\nTHRESHOLD = 0.85\n\n\n# Build an operations summary:\n# * Count total suites and failures.\n# * Collect coverage alerts for modules below THRESHOLD formatted like \"frontend<0.85\".\n# * Print three lines exactly:\n#     Tests run: <total>, failed: <failures>\n#     Coverage alerts: <comma-separated alerts or \"none\">\n#     Gate: <ALLOW or BLOCK>\n# Gate stays BLOCK if any failures or coverage alerts exist.",
      "fullSolution": "results = [\n    {\"name\": \"unit\", \"status\": \"passed\", \"duration\": 58.1},\n    {\"name\": \"api\", \"status\": \"failed\", \"duration\": 120.4},\n    {\"name\": \"smoke\", \"status\": \"passed\", \"duration\": 30.0},\n]\n\ncoverage = {\"backend\": 0.91, \"frontend\": 0.82}\nTHRESHOLD = 0.85\n\nfailures = [r for r in results if r[\"status\"] != \"passed\"]\nalerts = [f\"{name}<{THRESHOLD:.2f}\" for name, value in coverage.items() if value < THRESHOLD]\n\nprint(f\"Tests run: {len(results)}, failed: {len(failures)}\")\nif alerts:\n    print(\"Coverage alerts: \" + \", \".join(alerts))\nelse:\n    print(\"Coverage alerts: none\")\n\ngate = \"BLOCK\" if failures or alerts else \"ALLOW\"\nprint(f\"Gate: {gate}\")",
      "expectedOutput": "Tests run: 3, failed: 1\nCoverage alerts: frontend<0.85\nGate: BLOCK",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Senior engineers wire automated gates that turn raw test metrics into a single go/no-go signal.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">failures = 2\nalerts = ['docs<0.80']\ndecision = 'BLOCK' if failures or alerts else 'ALLOW'\nprint(decision)</pre></div>",
      "tags": [
        "Advanced",
        "Control Flow",
        "Strings",
        "Concurrency"
      ]
    },
    {
      "id": 240,
      "title": "240. Architecture Boundary Audit",
      "language": "python",
      "description": "Flag service or domain modules that depend upward on higher layers and recommend refactor status.",
      "initialCode": "components = [\n    {\"name\": \"ui.dashboard\", \"layer\": \"presentation\", \"depends\": [\"service.reports\"]},\n    {\"name\": \"service.reports\", \"layer\": \"service\", \"depends\": [\"domain.analytics\", \"infra.db\"]},\n    {\"name\": \"domain.analytics\", \"layer\": \"domain\", \"depends\": [\"domain.models\"]},\n    {\"name\": \"domain.models\", \"layer\": \"domain\", \"depends\": []},\n    {\"name\": \"service.billing\", \"layer\": \"service\", \"depends\": [\"ui.dashboard\", \"domain.ledger\"]},\n    {\"name\": \"domain.ledger\", \"layer\": \"domain\", \"depends\": [\"infra.db\"]},\n    {\"name\": \"domain.audit\", \"layer\": \"domain\", \"depends\": [\"service.reports\", \"infra.db\"]},\n    {\"name\": \"infra.db\", \"layer\": \"infrastructure\", \"depends\": []},\n]\n\nLAYER_ORDER = {\n    \"presentation\": 3,\n    \"service\": 2,\n    \"domain\": 1,\n    \"infrastructure\": 0,\n}\n\n# Build an audit that prints three lines:\n# Modules checked: <count>\n# Violations: <\"none\" or each on its own line prefixed with \"- \">\n# Status: <ALIGNED or REFACTOR>\n# A violation occurs when a component depends on another component in a higher-numbered layer.\n# Status is REFACTOR when any violations exist, else ALIGNED.",
      "fullSolution": "components = [\n    {\"name\": \"ui.dashboard\", \"layer\": \"presentation\", \"depends\": [\"service.reports\"]},\n    {\"name\": \"service.reports\", \"layer\": \"service\", \"depends\": [\"domain.analytics\", \"infra.db\"]},\n    {\"name\": \"domain.analytics\", \"layer\": \"domain\", \"depends\": [\"domain.models\"]},\n    {\"name\": \"domain.models\", \"layer\": \"domain\", \"depends\": []},\n    {\"name\": \"service.billing\", \"layer\": \"service\", \"depends\": [\"ui.dashboard\", \"domain.ledger\"]},\n    {\"name\": \"domain.ledger\", \"layer\": \"domain\", \"depends\": [\"infra.db\"]},\n    {\"name\": \"domain.audit\", \"layer\": \"domain\", \"depends\": [\"service.reports\", \"infra.db\"]},\n    {\"name\": \"infra.db\", \"layer\": \"infrastructure\", \"depends\": []},\n]\n\nLAYER_ORDER = {\n    \"presentation\": 3,\n    \"service\": 2,\n    \"domain\": 1,\n    \"infrastructure\": 0,\n}\n\nlayer_by_name = {c[\"name\"]: c[\"layer\"] for c in components}\nviolations = []\n\nfor component in components:\n    from_layer = component[\"layer\"]\n    from_level = LAYER_ORDER[from_layer]\n    for dependency in component[\"depends\"]:\n        dep_layer = layer_by_name.get(dependency)\n        if dep_layer is None:\n            continue\n        dep_level = LAYER_ORDER[dep_layer]\n        if from_level < dep_level:\n            violations.append(\n                f\"- {component['name']} -> {dependency} ({from_layer} -> {dep_layer})\"\n            )\n\nprint(f\"Modules checked: {len(components)}\")\nif violations:\n    print(\"Violations:\")\n    for violation in violations:\n        print(violation)\nelse:\n    print(\"Violations: none\")\n\nstatus = \"REFACTOR\" if violations else \"ALIGNED\"\nprint(f\"Status: {status}\")",
      "expectedOutput": "Modules checked: 8\nViolations:\n- service.billing -> ui.dashboard (service -> presentation)\n- domain.audit -> service.reports (domain -> service)\nStatus: REFACTOR",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Layered architectures keep dependencies flowing inward; surfacing violations early prevents hard-to-untangle coupling.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">if layer_order[from_layer] &lt; layer_order[to_layer]:\nprint(\"violation\")</pre></div>",
      "tags": [
        "Advanced",
        "Control Flow",
        "Packaging"
      ]
    },
    {
      "id": 241,
      "title": "241. ADR: Layered Refactor Decision",
      "language": "python",
      "description": "Assemble a structured ADR string from provided context, marking the decision as approved.",
      "initialCode": "adr = {\n    \"id\": \"ADR-017\",\n    \"title\": \"Flatten cross-layer dependencies\",\n    \"status\": \"Approved\",\n    \"context\": [\n        \"Audit flagged service -> presentation dependency\",\n        \"Domain audit depends on service to pull metrics\",\n        \"Refactor must complete before Q4 release\"\n    ],\n    \"decision\": \"Create anti-corruption layer for presentation data and move audit metrics into domain adapters.\",\n    \"consequences\": [\n        \"Short-term velocity dip while services stabilize\",\n        \"Clear ownership of data transformations\"\n    ]\n}\n\n# Print an ADR with the following exact section order and headings:\n# ADR-017: Flatten cross-layer dependencies\n# Status: Approved\n# Context:\n# - ...\n# - ...\n# Decision:\n# <decision sentence>\n# Consequences:\n# - ...\n# - ...",
      "fullSolution": "adr = {\n    \"id\": \"ADR-017\",\n    \"title\": \"Flatten cross-layer dependencies\",\n    \"status\": \"Approved\",\n    \"context\": [\n        \"Audit flagged service -> presentation dependency\",\n        \"Domain audit depends on service to pull metrics\",\n        \"Refactor must complete before Q4 release\"\n    ],\n    \"decision\": \"Create anti-corruption layer for presentation data and move audit metrics into domain adapters.\",\n    \"consequences\": [\n        \"Short-term velocity dip while services stabilize\",\n        \"Clear ownership of data transformations\"\n    ]\n}\n\nprint(f\"{adr['id']}: {adr['title']}\")\nprint(f\"Status: {adr['status']}\")\nprint(\"Context:\")\nfor item in adr[\"context\"]:\n    print(f\"- {item}\")\nprint(\"Decision:\")\nprint(adr[\"decision\"])\nprint(\"Consequences:\")\nfor item in adr[\"consequences\"]:\n    print(f\"- {item}\")",
      "expectedOutput": "ADR-017: Flatten cross-layer dependencies\nStatus: Approved\nContext:\n- Audit flagged service -> presentation dependency\n- Domain audit depends on service to pull metrics\n- Refactor must complete before Q4 release\nDecision:\nCreate anti-corruption layer for presentation data and move audit metrics into domain adapters.\nConsequences:\n- Short-term velocity dip while services stabilize\n- Clear ownership of data transformations",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Architecture Decision Records capture why a change exists. Senior engineers keep them terse, ordered, and easy to scan.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">print(\"ADR-001: Adopt feature flags\")\nprint(\"Status: Accepted\")</pre></div>",
      "tags": [
        "Advanced",
        "Control Flow",
        "CLI",
        "Packaging"
      ]
    },
    {
      "id": 242,
      "title": "242. Error Budget Burn Forecast",
      "language": "python",
      "description": "Calculate consumed error budget, project 30-day burn, and flag the service as healthy or at risk.",
      "initialCode": "error_budget_minutes = 43.2\ndowntime_minutes = [12.0, 4.5, 0, 9.3, 5.1]\ndays_elapsed = 18\nPERIOD_DAYS = 30\n\n# Compute the total downtime spent, remaining budget, and projected burn for the full period.\n# Print exactly four lines:\n# Error budget: <value> min\n# Spent: <value> min\n# Remaining: <value> min\n# Status: <HEALTHY or AT_RISK>\n# Values should be rounded to one decimal place using round(value, 1).\n# Status is AT_RISK when the projected burn (current average * PERIOD_DAYS) exceeds the budget.",
      "fullSolution": "error_budget_minutes = 43.2\ndowntime_minutes = [12.0, 4.5, 0, 9.3, 5.1]\ndays_elapsed = 18\nPERIOD_DAYS = 30\n\nspent = round(sum(downtime_minutes), 1)\nremaining = round(error_budget_minutes - spent, 1)\nburn_per_day = sum(downtime_minutes) / days_elapsed\nprojected = burn_per_day * PERIOD_DAYS\nstatus = \"AT_RISK\" if projected > error_budget_minutes else \"HEALTHY\"\n\nprint(f\"Error budget: {round(error_budget_minutes, 1)} min\")\nprint(f\"Spent: {spent} min\")\nprint(f\"Remaining: {remaining} min\")\nprint(f\"Status: {status}\")",
      "expectedOutput": "Error budget: 43.2 min\nSpent: 30.9 min\nRemaining: 12.3 min\nStatus: AT_RISK",
      "tutorial": "<p class=\"mb-4 text-gray-300\">SRE leadership tracks burn rate to see whether the team is on pace to blow past the error budget.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">spent = sum(incidents)\nrate = spent / days\nprojected = rate * 30</pre></div>",
      "tags": [
        "Advanced",
        "Control Flow",
        "Math and Stats"
      ]
    },
    {
      "id": 243,
      "title": "243. Binary Search Implementation",
      "language": "python",
      "description": "Implement an iterative binary_search that returns the index of the target or -1 when missing.",
      "initialCode": "def binary_search(nums, target):\n    # TODO: implement iterative binary search\n    pass\n\n\nprint(binary_search([1, 4, 7, 9, 11, 15], 9))\nprint(binary_search([1, 4, 7, 9, 11, 15], 5))\n",
      "fullSolution": "def binary_search(nums, target):\n    left, right = 0, len(nums) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if nums[mid] == target:\n            return mid\n        if nums[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1\n\n\nprint(binary_search([1, 4, 7, 9, 11, 15], 9))\nprint(binary_search([1, 4, 7, 9, 11, 15], 5))\n",
      "expectedOutput": "3\n-1",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Binary search keeps halving the interval until only the answer remains. Track low and high pointers and shift them based on how the midpoint compares to the target.</p>\n<h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4>\n<div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">nums = [1, 4, 7, 9]\n# mid = 7 -> move the right pointer because 7 is above the target</pre></div>",
      "tags": [
        "Advanced",
        "Control Flow",
        "Functions",
        "Algorithms"
      ]
    },
    {
      "id": 244,
      "title": "244. Merge Sort Recursion",
      "language": "python",
      "description": "Write merge_sort that uses divide and conquer to return a new sorted list.",
      "initialCode": "def merge_sort(nums):\n    # TODO: implement merge sort that returns a new sorted list\n    return nums\n\n\nprint(merge_sort([5, 1, 4, 2, 8]))\n",
      "fullSolution": "def merge_sort(nums):\n    if len(nums) <= 1:\n        return nums\n    mid = len(nums) // 2\n    left = merge_sort(nums[:mid])\n    right = merge_sort(nums[mid:])\n    merged = []\n    i = j = 0\n    while i < len(left) and j < len(right):\n        if left[i] <= right[j]:\n            merged.append(left[i])\n            i += 1\n        else:\n            merged.append(right[j])\n            j += 1\n    merged.extend(left[i:])\n    merged.extend(right[j:])\n    return merged\n\n\nprint(merge_sort([5, 1, 4, 2, 8]))\n",
      "expectedOutput": "[1, 2, 4, 5, 8]",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Merge sort splits the list, sorts each half, and merges the halves back together in order. The merge step walks each list once, giving O(n log n) time.</p>\n<h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4>\n<div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">merge_sort([4, 1, 3, 2]) -> split into [4, 1] and [3, 2]</pre></div>",
      "tags": [
        "Advanced",
        "Control Flow",
        "Functions",
        "Strings",
        "Collections"
      ]
    },
    {
      "id": 245,
      "title": "245. Reverse Singly Linked List",
      "language": "python",
      "description": "Reverse a singly linked list iteratively and return the new head.",
      "initialCode": "class ListNode:\n    def __init__(self, val, next=None):\n        self.val = val\n        self.next = next\n\n\ndef reverse_list(head):\n    # TODO: reverse the list iteratively\n    return head\n\n\nhead = ListNode(1, ListNode(2, ListNode(3, ListNode(4))))\nnode = reverse_list(head)\nvalues = []\nwhile node:\n    values.append(node.val)\n    node = node.next\nprint(values)\n",
      "fullSolution": "class ListNode:\n    def __init__(self, val, next=None):\n        self.val = val\n        self.next = next\n\n\ndef reverse_list(head):\n    prev = None\n    current = head\n    while current:\n        nxt = current.next\n        current.next = prev\n        prev = current\n        current = nxt\n    return prev\n\n\nhead = ListNode(1, ListNode(2, ListNode(3, ListNode(4))))\nnode = reverse_list(head)\nvalues = []\nwhile node:\n    values.append(node.val)\n    node = node.next\nprint(values)\n",
      "expectedOutput": "[4, 3, 2, 1]",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Walk the list once, rewiring each node to point to the previous node. Keep track of the next pointer before rewriting it.</p>\n<h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4>\n<div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">prev = None -> 1 -> 2 -> 3\n# rewire 1.next to prev, slide pointers forward</pre></div>",
      "tags": [
        "Advanced",
        "Control Flow",
        "Functions",
        "Collections",
        "OOP"
      ]
    },
    {
      "id": 246,
      "title": "246. BFS Shortest Path",
      "language": "python",
      "description": "Use breadth-first search to return the number of edges between start and goal, or -1 when unreachable.",
      "initialCode": "from collections import deque\n\ngraph = {\n    'A': ['B', 'C'],\n    'B': ['D', 'E'],\n    'C': ['F'],\n    'D': [],\n    'E': ['F'],\n    'F': []\n}\n\n\ndef shortest_path(graph, start, goal):\n    # TODO: implement BFS to find the shortest path length\n    return -1\n\n\nprint(shortest_path(graph, 'A', 'F'))\nprint(shortest_path(graph, 'B', 'C'))\n",
      "fullSolution": "from collections import deque\n\ngraph = {\n    'A': ['B', 'C'],\n    'B': ['D', 'E'],\n    'C': ['F'],\n    'D': [],\n    'E': ['F'],\n    'F': []\n}\n\n\ndef shortest_path(graph, start, goal):\n    visited = {start}\n    queue = deque([(start, 0)])\n    while queue:\n        node, depth = queue.popleft()\n        if node == goal:\n            return depth\n        for neighbor in graph.get(node, []):\n            if neighbor not in visited:\n                visited.add(neighbor)\n                queue.append((neighbor, depth + 1))\n    return -1\n\n\nprint(shortest_path(graph, 'A', 'F'))\nprint(shortest_path(graph, 'B', 'C'))\n",
      "expectedOutput": "2\n-1",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Breadth-first search explores neighbors level by level. Use a queue to store (node, depth) pairs so the first time you reach the goal you have the minimum edge count.</p>\n<h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4>\n<div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">deque([(start, 0)]) -> pop, enqueue neighbors with depth + 1</pre></div>",
      "tags": [
        "Advanced",
        "Control Flow",
        "Functions",
        "Collections",
        "Algorithms"
      ]
    },
    {
      "id": 247,
      "title": "247. Dijkstra Shortest Path Cost",
      "language": "python",
      "description": "Implement Dijkstra's algorithm to return the minimal cost between two nodes.",
      "initialCode": "import heapq\n\ngraph = {\n    'A': [('B', 1), ('C', 4)],\n    'B': [('C', 2), ('D', 5)],\n    'C': [('D', 1)],\n    'D': [('E', 3)],\n    'E': []\n}\n\n\ndef dijkstra(graph, start, goal):\n    # TODO: return the minimal traversal cost or float(\"inf\") if unreachable\n    return float('inf')\n\n\nprint(dijkstra(graph, 'A', 'E'))\n",
      "fullSolution": "import heapq\n\ngraph = {\n    'A': [('B', 1), ('C', 4)],\n    'B': [('C', 2), ('D', 5)],\n    'C': [('D', 1)],\n    'D': [('E', 3)],\n    'E': []\n}\n\n\ndef dijkstra(graph, start, goal):\n    heap = [(0, start)]\n    distances = {start: 0}\n    while heap:\n        cost, node = heapq.heappop(heap)\n        if node == goal:\n            return cost\n        if cost > distances.get(node, float('inf')):\n            continue\n        for neighbor, weight in graph.get(node, []):\n            new_cost = cost + weight\n            if new_cost < distances.get(neighbor, float('inf')):\n                distances[neighbor] = new_cost\n                heapq.heappush(heap, (new_cost, neighbor))\n    return float('inf')\n\n\nprint(dijkstra(graph, 'A', 'E'))\n",
      "expectedOutput": "7",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Dijkstra's algorithm keeps a priority queue of frontier nodes ordered by current distance. When you pop a node, its distance is finalized; relax each neighbor and push improved costs.</p>\n<h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4>\n<div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">heapq.heappush(queue, (distance + weight, neighbor))</pre></div>",
      "tags": [
        "Advanced",
        "Control Flow",
        "Functions",
        "Collections",
        "Algorithms"
      ]
    },
    {
      "id": 248,
      "title": "248. LRU Cache with OrderedDict",
      "language": "python",
      "description": "Build a fixed-capacity LRU cache supporting get and put with eviction of the oldest entry.",
      "initialCode": "from collections import OrderedDict\n\nclass LRUCache:\n    def __init__(self, capacity):\n        self.capacity = capacity\n        self.data = OrderedDict()\n\n    def get(self, key):\n        # TODO: return the value when present and move the key to the end\n        return -1\n\n    def put(self, key, value):\n        # TODO: insert or update, then evict the least recently used key when over capacity\n        pass\n\n\ncache = LRUCache(2)\ncache.put('user:1', 'alice')\ncache.put('user:2', 'bob')\nprint(cache.get('user:1'))\ncache.put('user:3', 'charlie')\nprint(cache.get('user:2'))\nprint(cache.get('user:3'))\n",
      "fullSolution": "from collections import OrderedDict\n\nclass LRUCache:\n    def __init__(self, capacity):\n        self.capacity = capacity\n        self.data = OrderedDict()\n\n    def get(self, key):\n        if key not in self.data:\n            return -1\n        value = self.data.pop(key)\n        self.data[key] = value\n        return value\n\n    def put(self, key, value):\n        if key in self.data:\n            self.data.pop(key)\n        self.data[key] = value\n        if len(self.data) > self.capacity:\n            self.data.popitem(last=False)\n\n\ncache = LRUCache(2)\ncache.put('user:1', 'alice')\ncache.put('user:2', 'bob')\nprint(cache.get('user:1'))\ncache.put('user:3', 'charlie')\nprint(cache.get('user:2'))\nprint(cache.get('user:3'))\n",
      "expectedOutput": "alice\n-1\ncharlie",
      "tutorial": "<p class=\"mb-4 text-gray-300\">OrderedDict keeps keys in insertion order. When you read a key, re-insert it to mark it as most recent. When capacity is exceeded, popitem(last=False) to remove the oldest entry.</p>\n<h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4>\n<div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">cache.data.popitem(last=False)  # evict least recently used</pre></div>",
      "tags": [
        "Advanced",
        "Control Flow",
        "Functions",
        "Collections",
        "OOP"
      ]
    },
    {
      "id": 249,
      "title": "249. Dynamic Programming: Min Coins",
      "language": "python",
      "description": "Compute the minimum number of coins needed to reach a target amount, or -1 when it is not possible.",
      "initialCode": "def min_coins(amount, coins):\n    # TODO: bottom-up dynamic programming to find the fewest coins\n    return -1\n\n\nprint(min_coins(11, [1, 2, 5]))\nprint(min_coins(3, [2]))\n",
      "fullSolution": "def min_coins(amount, coins):\n    dp = [float('inf')] * (amount + 1)\n    dp[0] = 0\n    for coin in coins:\n        for value in range(coin, amount + 1):\n            dp[value] = min(dp[value], dp[value - coin] + 1)\n    return dp[amount] if dp[amount] != float('inf') else -1\n\n\nprint(min_coins(11, [1, 2, 5]))\nprint(min_coins(3, [2]))\n",
      "expectedOutput": "3\n-1",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Build up answers for every amount up to the target. Each coin lets you reuse the best answer for amount - coin plus one more coin.</p>\n<h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4>\n<div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">dp[value] = min(dp[value], dp[value - coin] + 1)</pre></div>",
      "tags": [
        "Advanced",
        "Control Flow",
        "Functions",
        "Algorithms"
      ]
    },
    {
      "id": 250,
      "title": "250. Dynamic Programming: LIS Length",
      "language": "python",
      "description": "Return the length of the longest increasing subsequence using the O(n log n) patience algorithm.",
      "initialCode": "import bisect\n\n\ndef lis_length(nums):\n    # TODO: maintain a tails list and use binary search to place each value\n    return 0\n\n\nprint(lis_length([10, 9, 2, 5, 3, 7, 101, 18]))\nprint(lis_length([7, 7, 7, 7, 7]))\n",
      "fullSolution": "import bisect\n\n\ndef lis_length(nums):\n    tails = []\n    for num in nums:\n        idx = bisect.bisect_left(tails, num)\n        if idx == len(tails):\n            tails.append(num)\n        else:\n            tails[idx] = num\n    return len(tails)\n\n\nprint(lis_length([10, 9, 2, 5, 3, 7, 101, 18]))\nprint(lis_length([7, 7, 7, 7, 7]))\n",
      "expectedOutput": "4\n1",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Keep a list of the smallest tail seen for each subsequence length. Binary search finds where the current number slots in, giving an O(n log n) solution.</p>\n<h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4>\n<div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">tails = [2, 3, 7, 18]</pre></div>",
      "tags": [
        "Advanced",
        "Control Flow",
        "Functions",
        "Collections",
        "Algorithms"
      ]
    },
    {
      "id": 251,
      "title": "251. System Design: Read-Heavy Scale Plan",
      "language": "python",
      "description": "Summarize a scale plan for a read-heavy service highlighting data, cache, async, and observability decisions.",
      "initialCode": "plan = {\n    'service': 'ProductCatalog',\n    'traffic': '120k req/s peak',\n    'primary_db': 'PostgreSQL with read replicas',\n    'cache': 'Redis cluster (sharded)',\n    'async': ['Kafka event bus', 'Inventory projector'],\n    'observability': ['Red metrics dashboard', 'Trace sampling 15%']\n}\n\n# TODO: print the plan in the exact format:\n# ProductCatalog Service Scale Plan\n# Peak load: 120k req/s peak\n# Primary store: PostgreSQL with read replicas\n# Cache: Redis cluster (sharded)\n# Async pipelines:\n# - Kafka event bus\n# - Inventory projector\n# Observability:\n# - Red metrics dashboard\n# - Trace sampling 15%\n",
      "fullSolution": "plan = {\n    'service': 'ProductCatalog',\n    'traffic': '120k req/s peak',\n    'primary_db': 'PostgreSQL with read replicas',\n    'cache': 'Redis cluster (sharded)',\n    'async': ['Kafka event bus', 'Inventory projector'],\n    'observability': ['Red metrics dashboard', 'Trace sampling 15%']\n}\n\nprint(f\"{plan['service']} Service Scale Plan\")\nprint(f\"Peak load: {plan['traffic']}\")\nprint(f\"Primary store: {plan['primary_db']}\")\nprint(f\"Cache: {plan['cache']}\")\nprint('Async pipelines:')\nfor item in plan['async']:\n    print(f\"- {item}\")\nprint('Observability:')\nfor item in plan['observability']:\n    print(f\"- {item}\")\n",
      "expectedOutput": "ProductCatalog Service Scale Plan\nPeak load: 120k req/s peak\nPrimary store: PostgreSQL with read replicas\nCache: Redis cluster (sharded)\nAsync pipelines:\n- Kafka event bus\n- Inventory projector\nObservability:\n- Red metrics dashboard\n- Trace sampling 15%",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Senior engineers narrate the plan across data, caching, async flows, and observability so stakeholders see the trade-offs quickly.</p>\n<h4 class=\"font-semibold text-gray-200 mb-2\">Checklist:</h4>\n<div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">print('Async pipelines:')\nfor item in plan['async']:\n    print(f\"- {item}\")</pre></div>",
      "tags": [
        "Advanced",
        "Control Flow",
        "Strings",
        "Databases",
        "Async"
      ]
    },
    {
      "id": 252,
      "title": "252. Database Scaling Playbook",
      "language": "python",
      "description": "Lay out an ordered database scaling plan plus the observability guardrails that keep it safe.",
      "initialCode": "playbook = {\n    'order': [\n        'Add read replicas for reporting',\n        'Shard tenants by region',\n        'Introduce write-ahead queue for spikes'\n    ],\n    'observability': [\n        'Slow query log sampled 1%',\n        'Replication lag alert at 30s'\n    ]\n}\n\n# TODO: print the playbook in the exact format:\n# Database Scaling Playbook\n# 1. Add read replicas for reporting\n# 2. Shard tenants by region\n# 3. Introduce write-ahead queue for spikes\n# Observability:\n# - Slow query log sampled 1%\n# - Replication lag alert at 30s\n",
      "fullSolution": "playbook = {\n    'order': [\n        'Add read replicas for reporting',\n        'Shard tenants by region',\n        'Introduce write-ahead queue for spikes'\n    ],\n    'observability': [\n        'Slow query log sampled 1%',\n        'Replication lag alert at 30s'\n    ]\n}\n\nprint('Database Scaling Playbook')\nfor idx, step in enumerate(playbook['order'], start=1):\n    print(f\"{idx}. {step}\")\nprint('Observability:')\nfor item in playbook['observability']:\n    print(f\"- {item}\")\n",
      "expectedOutput": "Database Scaling Playbook\n1. Add read replicas for reporting\n2. Shard tenants by region\n3. Introduce write-ahead queue for spikes\nObservability:\n- Slow query log sampled 1%\n- Replication lag alert at 30s",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Scaling plans need deliberate steps plus the telemetry that proves the system is healthy at each stage.</p>\n<h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4>\n<div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">for idx, step in enumerate(playbook['order'], start=1):\n    print(f\"{idx}. {step}\")</pre></div>",
      "tags": [
        "Advanced",
        "Control Flow",
        "Strings",
        "Collections",
        "Databases"
      ]
    },
    {
      "id": 253,
      "title": "253. Security Threat Modeling Summary",
      "language": "python",
      "description": "Summarize key entry points, threats, and mitigations for a payments API.",
      "initialCode": "threat_model = {\n    'system': 'Payments API',\n    'entrypoints': ['Public REST gateway', 'Admin console'],\n    'threats': ['Replay attacks', 'Privilege escalation', 'Secrets exfiltration'],\n    'controls': ['Idempotency keys', 'Fine-grained RBAC', 'Vault auto-rotation']\n}\n\n# TODO: print the summary in the exact format:\n# Payments API Threat Model\n# Entry points:\n# - Public REST gateway\n# - Admin console\n# Key threats:\n# - ...\n# Mitigations:\n# - ...\n",
      "fullSolution": "threat_model = {\n    'system': 'Payments API',\n    'entrypoints': ['Public REST gateway', 'Admin console'],\n    'threats': ['Replay attacks', 'Privilege escalation', 'Secrets exfiltration'],\n    'controls': ['Idempotency keys', 'Fine-grained RBAC', 'Vault auto-rotation']\n}\n\nprint(f\"{threat_model['system']} Threat Model\")\nprint('Entry points:')\nfor item in threat_model['entrypoints']:\n    print(f\"- {item}\")\nprint('Key threats:')\nfor item in threat_model['threats']:\n    print(f\"- {item}\")\nprint('Mitigations:')\nfor item in threat_model['controls']:\n    print(f\"- {item}\")\n",
      "expectedOutput": "Payments API Threat Model\nEntry points:\n- Public REST gateway\n- Admin console\nKey threats:\n- Replay attacks\n- Privilege escalation\n- Secrets exfiltration\nMitigations:\n- Idempotency keys\n- Fine-grained RBAC\n- Vault auto-rotation",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Threat modeling forces you to enumerate entry points, likely attacks, and concrete controls. Keep the summary short so stakeholders can act.</p>\n<h4 class=\"font-semibold text-gray-200 mb-2\">Reminder:</h4>\n<div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">print('Key threats:')\nfor threat in threat_model['threats']:\n    print(f\"- {threat}\")</pre></div>",
      "tags": [
        "Advanced",
        "Control Flow",
        "Strings",
        "Security"
      ]
    },
    {
      "id": 254,
      "title": "254. Edge & CDN Strategy Snapshot",
      "language": "python",
      "description": "Capture the key configuration choices for an edge delivery and CDN strategy.",
      "initialCode": "edge_plan = {\n    'provider': 'CloudFront multi-region',\n    'ttl': '120s default',\n    'origin_shield': 'Enabled',\n    'regional_edges': ['us-east-1', 'eu-west-1', 'ap-southeast-1'],\n    'failover': ['Health check every 30s', 'Multi-origin failover policy']\n}\n\n# TODO: print the snapshot in the exact format:\n# Edge Delivery Strategy\n# CDN provider: CloudFront multi-region\n# Cache TTL: 120s default\n# Origin shield: Enabled\n# Regional edge cache:\n# - us-east-1\n# - eu-west-1\n# - ap-southeast-1\n# Failover:\n# - Health check every 30s\n# - Multi-origin failover policy\n",
      "fullSolution": "edge_plan = {\n    'provider': 'CloudFront multi-region',\n    'ttl': '120s default',\n    'origin_shield': 'Enabled',\n    'regional_edges': ['us-east-1', 'eu-west-1', 'ap-southeast-1'],\n    'failover': ['Health check every 30s', 'Multi-origin failover policy']\n}\n\nprint('Edge Delivery Strategy')\nprint(f\"CDN provider: {edge_plan['provider']}\")\nprint(f\"Cache TTL: {edge_plan['ttl']}\")\nprint(f\"Origin shield: {edge_plan['origin_shield']}\")\nprint('Regional edge cache:')\nfor region in edge_plan['regional_edges']:\n    print(f\"- {region}\")\nprint('Failover:')\nfor item in edge_plan['failover']:\n    print(f\"- {item}\")\n",
      "expectedOutput": "Edge Delivery Strategy\nCDN provider: CloudFront multi-region\nCache TTL: 120s default\nOrigin shield: Enabled\nRegional edge cache:\n- us-east-1\n- eu-west-1\n- ap-southeast-1\nFailover:\n- Health check every 30s\n- Multi-origin failover policy",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Edge plans outline cache behaviour, origin shielding, and failover so traffic stays fast and resilient during global peaks.</p>\n<h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4>\n<div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">for region in edge_plan['regional_edges']:\n    print(f\"- {region}\")</pre></div>",
      "tags": [
        "Advanced",
        "Control Flow",
        "Strings"
      ]
    },
    {
      "id": 255,
      "title": "255. Event Pipeline Case Study",
      "language": "python",
      "description": "Summarize the multi-region fanout architecture from the provided scenario dictionary.",
      "initialCode": "scenario = {\n    \"service\": \"SocialFeedFanout\",\n    \"regions\": [\"us-east-1\", \"eu-west-1\"],\n    \"ingest_rate\": \"85k events/s avg\",\n    \"queue\": \"Kafka (24 partitions)\",\n    \"fanout\": \"Go workers push to Redis channels\",\n    \"persistence\": [\"Aurora followers table\", \"S3 activity log\"],\n    \"observability\": [\"Lag dashboard < 2s\", \"Fanout error budget 0.2%\"]\n}\n\n# TODO: print the summary exactly as:\n# SocialFeedFanout Event Pipeline\n# Ingest rate: 85k events/s avg\n# Regions: us-east-1, eu-west-1\n# Queue: Kafka (24 partitions)\n# Fanout workers: Go workers push to Redis channels\n# Persistence:\n# - Aurora followers table\n# - S3 activity log\n# Observability:\n# - Lag dashboard < 2s\n# - Fanout error budget 0.2%\n",
      "fullSolution": "scenario = {\n    \"service\": \"SocialFeedFanout\",\n    \"regions\": [\"us-east-1\", \"eu-west-1\"],\n    \"ingest_rate\": \"85k events/s avg\",\n    \"queue\": \"Kafka (24 partitions)\",\n    \"fanout\": \"Go workers push to Redis channels\",\n    \"persistence\": [\"Aurora followers table\", \"S3 activity log\"],\n    \"observability\": [\"Lag dashboard < 2s\", \"Fanout error budget 0.2%\"]\n}\n\nprint(f\"{scenario['service']} Event Pipeline\")\nprint(f\"Ingest rate: {scenario['ingest_rate']}\")\nprint(f\"Regions: {', '.join(scenario['regions'])}\")\nprint(f\"Queue: {scenario['queue']}\")\nprint(f\"Fanout workers: {scenario['fanout']}\")\nprint(\"Persistence:\")\nfor item in scenario['persistence']:\n    print(f\"- {item}\")\nprint(\"Observability:\")\nfor item in scenario['observability']:\n    print(f\"- {item}\")\n",
      "expectedOutput": "SocialFeedFanout Event Pipeline\nIngest rate: 85k events/s avg\nRegions: us-east-1, eu-west-1\nQueue: Kafka (24 partitions)\nFanout workers: Go workers push to Redis channels\nPersistence:\n- Aurora followers table\n- S3 activity log\nObservability:\n- Lag dashboard < 2s\n- Fanout error budget 0.2%",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Architectural narratives should surface throughput, geography, queues, persistence, and guardrails so stakeholders see blast radius and resilience at a glance.</p>\n<h4 class=\"font-semibold text-gray-200 mb-2\">Checklist:</h4>\n<div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">print(\"Persistence:\")\nfor item in scenario['persistence']:\n    print(f\"- {item}\")</pre></div>",
      "tags": [
        "Advanced",
        "Control Flow",
        "Strings",
        "Collections",
        "Algorithms"
      ]
    },
    {
      "id": 256,
      "title": "256. Capacity Planning Calculator",
      "language": "python",
      "description": "Compute the server count for peak and average load with redundancy.",
      "initialCode": "import math\n\nrequests_peak = 180_000\nrequests_avg = 90_000\ntps_per_server = 4_500\nredundancy_factor = 1.25\n\n# TODO: compute ceil((load / tps_per_server) * redundancy_factor) for peak and average.\n# Print exactly:\n# Peak servers needed: 50\n# Average servers needed: 25\n",
      "fullSolution": "import math\n\nrequests_peak = 180_000\nrequests_avg = 90_000\ntps_per_server = 4_500\nredundancy_factor = 1.25\n\npeak_servers = math.ceil((requests_peak / tps_per_server) * redundancy_factor)\navg_servers = math.ceil((requests_avg / tps_per_server) * redundancy_factor)\n\nprint(f\"Peak servers needed: {peak_servers}\")\nprint(f\"Average servers needed: {avg_servers}\")\n",
      "expectedOutput": "Peak servers needed: 50\nAverage servers needed: 25",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Translate requirements per second into capacity, then add the agreed redundancy factor so a single AZ failure still leaves headroom.</p>\n<h4 class=\"font-semibold text-gray-200 mb-2\">Formula:</h4>\n<div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">math.ceil((load / tps_per_server) * redundancy)</pre></div>",
      "tags": [
        "Advanced",
        "Control Flow",
        "Math and Stats",
        "Networking"
      ]
    },
    {
      "id": 257,
      "title": "257. Global Cache Strategy Brief",
      "language": "python",
      "description": "Lay out the cache mode, primaries, mitigations, and fallback from the decision dictionary.",
      "initialCode": "decision = {\n    \"mode\": \"Read-through cache with regional write-behind\",\n    \"primaries\": [\"us-east-1 primary\", \"ap-southeast-1 primary\"],\n    \"consistency\": \"Multi-region eventual\",\n    \"mitigations\": [\"Versioned writes\", \"Conflict alarms 5/min\"],\n    \"fallback\": \"Read from regional replica when cache miss > 150ms\"\n}\n\n# TODO: print exactly:\n# Global Cache Strategy\n# Mode: Read-through cache with regional write-behind\n# Primaries: us-east-1 primary, ap-southeast-1 primary\n# Consistency: Multi-region eventual\n# Mitigations:\n# - Versioned writes\n# - Conflict alarms 5/min\n# Fallback: Read from regional replica when cache miss > 150ms\n",
      "fullSolution": "decision = {\n    \"mode\": \"Read-through cache with regional write-behind\",\n    \"primaries\": [\"us-east-1 primary\", \"ap-southeast-1 primary\"],\n    \"consistency\": \"Multi-region eventual\",\n    \"mitigations\": [\"Versioned writes\", \"Conflict alarms 5/min\"],\n    \"fallback\": \"Read from regional replica when cache miss > 150ms\"\n}\n\nprint(\"Global Cache Strategy\")\nprint(f\"Mode: {decision['mode']}\")\nprint(f\"Primaries: {', '.join(decision['primaries'])}\")\nprint(f\"Consistency: {decision['consistency']}\")\nprint(\"Mitigations:\")\nfor item in decision['mitigations']:\n    print(f\"- {item}\")\nprint(f\"Fallback: {decision['fallback']}\")\n",
      "expectedOutput": "Global Cache Strategy\nMode: Read-through cache with regional write-behind\nPrimaries: us-east-1 primary, ap-southeast-1 primary\nConsistency: Multi-region eventual\nMitigations:\n- Versioned writes\n- Conflict alarms 5/min\nFallback: Read from regional replica when cache miss > 150ms",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Great cache briefs frame how reads behave, where writes land, and which guardrails keep drift in check.</p>\n<h4 class=\"font-semibold text-gray-200 mb-2\">Reminder:</h4>\n<div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">print(\"Mitigations:\")</pre></div>",
      "tags": [
        "Advanced",
        "Control Flow",
        "Strings"
      ]
    },
    {
      "id": 258,
      "title": "258. Python Profiling Runbook",
      "language": "python",
      "description": "Turn the runbook dictionary into an ordered profiling checklist.",
      "initialCode": "runbook = {\n    \"cprofile\": \"python -m cProfile -o stats run_workload.py\",\n    \"visualize\": [\n        \"snakeviz stats\",\n        \"python -m viztracer run_workload.py\",\n        \"vizviewer\"\n    ],\n    \"sampling\": \"py-spy top --pid 1234\"\n}\n\n# TODO: print exactly:\n# Python Performance Profiling\n# cProfile: python -m cProfile -o stats run_workload.py\n# Visualization:\n# - snakeviz stats\n# - python -m viztracer run_workload.py\n# - vizviewer\n# Sampling: py-spy top --pid 1234\n",
      "fullSolution": "runbook = {\n    \"cprofile\": \"python -m cProfile -o stats run_workload.py\",\n    \"visualize\": [\n        \"snakeviz stats\",\n        \"python -m viztracer run_workload.py\",\n        \"vizviewer\"\n    ],\n    \"sampling\": \"py-spy top --pid 1234\"\n}\n\nprint(\"Python Performance Profiling\")\nprint(f\"cProfile: {runbook['cprofile']}\")\nprint(\"Visualization:\")\nfor step in runbook['visualize']:\n    print(f\"- {step}\")\nprint(f\"Sampling: {runbook['sampling']}\")\n",
      "expectedOutput": "Python Performance Profiling\ncProfile: python -m cProfile -o stats run_workload.py\nVisualization:\n- snakeviz stats\n- python -m viztracer run_workload.py\n- vizviewer\nSampling: py-spy top --pid 1234",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Operational runbooks call out deterministic commands for profiling, visualization, and sampling so responders waste zero cycles guessing flags.</p>\n<h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4>\n<div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">for step in runbook['visualize']:\n    print(f\"- {step}\")</pre></div>",
      "tags": [
        "Advanced",
        "Control Flow",
        "Web",
        "CLI",
        "Performance"
      ]
    },
    {
      "id": 259,
      "title": "259. Network Diagnostics Checklist",
      "language": "python",
      "description": "Print the network investigation commands in the required order.",
      "initialCode": "checks = {\n    \"latency\": \"mtr --report 10 api.prod\",\n    \"packet_capture\": \"sudo tcpdump -ni eth0 host 203.0.113.8\",\n    \"dns\": \"dig +trace api.prod\",\n    \"http\": \"curl -w '\\nconnect: %{time_connect}s total: %{time_total}s\\n' https://api.prod/health\"\n}\n\n# TODO: print exactly:\n# Network Diagnostics Checklist\n# Latency: mtr --report 10 api.prod\n# Packet capture: sudo tcpdump -ni eth0 host 203.0.113.8\n# DNS: dig +trace api.prod\n# HTTP timing: curl -w '\nconnect: %{time_connect}s total: %{time_total}s\n' https://api.prod/health\n",
      "fullSolution": "checks = {\n    \"latency\": \"mtr --report 10 api.prod\",\n    \"packet_capture\": \"sudo tcpdump -ni eth0 host 203.0.113.8\",\n    \"dns\": \"dig +trace api.prod\",\n    \"http\": \"curl -w '\\nconnect: %{time_connect}s total: %{time_total}s\\n' https://api.prod/health\"\n}\n\nprint(\"Network Diagnostics Checklist\")\nprint(f\"Latency: {checks['latency']}\")\nprint(f\"Packet capture: {checks['packet_capture']}\")\nprint(f\"DNS: {checks['dns']}\")\nprint(f\"HTTP timing: {checks['http']}\")\n",
      "expectedOutput": "Network Diagnostics Checklist\nLatency: mtr --report 10 api.prod\nPacket capture: sudo tcpdump -ni eth0 host 203.0.113.8\nDNS: dig +trace api.prod\nHTTP timing: curl -w '\nconnect: %{time_connect}s total: %{time_total}s\n' https://api.prod/health",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Pull latency, capture, DNS, and HTTP timing data in one pass so you can isolate whether the issue is network, resolution, or origin service.</p>\n<h4 class=\"font-semibold text-gray-200 mb-2\">Tip:</h4>\n<div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">print(f\"HTTP timing: {checks['http']}\")</pre></div>",
      "tags": [
        "Advanced",
        "Networking",
        "Performance"
      ]
    },
    {
      "id": 260,
      "title": "260. Behavioral Story Outline: Incident Leadership",
      "language": "python",
      "description": "Turn the STAR components into a structured incident leadership story.",
      "initialCode": "story = {\n    \"situation\": \"Peak sale traffic saturated checkout service\",\n    \"task\": \"Restore cart checkout under 10 minutes\",\n    \"actions\": [\n        \"Declared incident and spun up war room\",\n        \"Throttled recommendation calls at ingress\",\n        \"Coordinated rollback of faulty feature flag\"\n    ],\n    \"result\": \"Checkout error rate dropped from 35% to 1.2% in 7 minutes\"\n}\n\n# TODO: print exactly:\n# STAR Incident Leadership Story\n# Situation: Peak sale traffic saturated checkout service\n# Task: Restore cart checkout under 10 minutes\n# Actions:\n# - Declared incident and spun up war room\n# - Throttled recommendation calls at ingress\n# - Coordinated rollback of faulty feature flag\n# Result: Checkout error rate dropped from 35% to 1.2% in 7 minutes\n",
      "fullSolution": "story = {\n    \"situation\": \"Peak sale traffic saturated checkout service\",\n    \"task\": \"Restore cart checkout under 10 minutes\",\n    \"actions\": [\n        \"Declared incident and spun up war room\",\n        \"Throttled recommendation calls at ingress\",\n        \"Coordinated rollback of faulty feature flag\"\n    ],\n    \"result\": \"Checkout error rate dropped from 35% to 1.2% in 7 minutes\"\n}\n\nprint(\"STAR Incident Leadership Story\")\nprint(f\"Situation: {story['situation']}\")\nprint(f\"Task: {story['task']}\")\nprint(\"Actions:\")\nfor action in story['actions']:\n    print(f\"- {action}\")\nprint(f\"Result: {story['result']}\")\n",
      "expectedOutput": "STAR Incident Leadership Story\nSituation: Peak sale traffic saturated checkout service\nTask: Restore cart checkout under 10 minutes\nActions:\n- Declared incident and spun up war room\n- Throttled recommendation calls at ingress\n- Coordinated rollback of faulty feature flag\nResult: Checkout error rate dropped from 35% to 1.2% in 7 minutes",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Top-tier interviews expect crisp STAR stories that highlight ownership, cross-team orchestration, and quantitative outcomes.</p>\n<h4 class=\"font-semibold text-gray-200 mb-2\">Pattern:</h4>\n<div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">print(\"Actions:\")\nfor action in story['actions']:\n    print(f\"- {action}\")</pre></div>",
      "tags": [
        "Advanced",
        "Control Flow",
        "Web"
      ]
    },
    {
      "id": 261,
      "title": "261. SQL SELECT Builder: Active Customers",
      "description": "Build a SELECT statement string using the provided columns, table, predicate, and order clause.",
      "initialCode": "columns = [\"id\", \"email\", \"tier\"]\ntable = \"customers\"\npredicate = \"status = 'ACTIVE'\"\norder_by = \"last_login DESC\"\n\n# TODO: build and print the SELECT statement described below\n",
      "fullSolution": "columns = [\"id\", \"email\", \"tier\"]\ntable = \"customers\"\npredicate = \"status = 'ACTIVE'\"\norder_by = \"last_login DESC\"\n\nselect_list = \", \".join(columns)\nstatement = f\"SELECT {select_list} FROM {table} WHERE {predicate} ORDER BY {order_by};\"\nprint(statement)\n",
      "expectedOutput": "SELECT id, email, tier FROM customers WHERE status = 'ACTIVE' ORDER BY last_login DESC;",
      "tutorial": "<p class=\"mb-4 text-gray-300\">A SELECT statement needs column names, the table, filters, and sort order. Join the columns with commas, then add WHERE and ORDER BY clauses before finishing with a semicolon.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">select_list = \", \".join([\"id\", \"email\"])\nprint(f\"SELECT {select_list} FROM customers;\")</pre></div><p class=\"mt-4 text-gray-300\">Combine the provided values into one SQL string, then print it.</p>",
      "language": "python",
      "tags": [
        "Advanced",
        "Strings",
        "Collections",
        "Algorithms",
        "Databases"
      ]
    },
    {
      "id": 262,
      "title": "262. SQL JOIN Builder: Orders + Payments",
      "description": "Format a multi-line SQL query that joins orders to customers and payments with the supplied segments.",
      "initialCode": "select_columns = [\"o.id\", \"o.total\", \"c.email\", \"p.status\"]\nbase = \"orders o\"\njoins = [\n    \"JOIN customers c ON c.id = o.customer_id\",\n    \"LEFT JOIN payments p ON p.order_id = o.id\",\n]\nfilters = [\"o.state = 'PAID'\", \"o.region = 'NA'\"]\n\n# TODO: print the formatted SQL statement described below\n",
      "fullSolution": "select_columns = [\"o.id\", \"o.total\", \"c.email\", \"p.status\"]\nbase = \"orders o\"\njoins = [\n    \"JOIN customers c ON c.id = o.customer_id\",\n    \"LEFT JOIN payments p ON p.order_id = o.id\",\n]\nfilters = [\"o.state = 'PAID'\", \"o.region = 'NA'\"]\n\nprint(\"SELECT \" + \", \".join(select_columns))\nprint(\"FROM \" + base)\nfor clause in joins:\n    print(clause)\nprint(\"WHERE \" + \" AND \".join(filters) + \";\")\n",
      "expectedOutput": "SELECT o.id, o.total, c.email, p.status\nFROM orders o\nJOIN customers c ON c.id = o.customer_id\nLEFT JOIN payments p ON p.order_id = o.id\nWHERE o.state = 'PAID' AND o.region = 'NA';",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Keep complex joins readable by printing each clause on its own line: SELECT, FROM, stacked JOINs, and the closing WHERE.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">print(\"SELECT o.id\")\nprint(\"FROM orders o\")\nprint(\"JOIN customers c ON c.id = o.customer_id\")</pre></div><p class=\"mt-4 text-gray-300\">Join the filters with AND so the final WHERE clause matches the expected format.</p>",
      "language": "python",
      "tags": [
        "Advanced",
        "Control Flow",
        "Strings",
        "Databases"
      ]
    },
    {
      "id": 263,
      "title": "263. Index Strategy Summary",
      "description": "Summarize the primary, covering, and partial indexes defined for the orders table.",
      "initialCode": "table = \"orders\"\nprimary = {\"name\": \"orders_pkey\", \"columns\": \"id\"}\ncovering = [\n    {\"name\": \"idx_orders_state_status\", \"columns\": \"state, status\"},\n    {\"name\": \"idx_orders_customer_created\", \"columns\": \"customer_id, created_at DESC\"},\n]\npartial = {\"name\": \"idx_orders_ready\", \"definition\": \"WHERE status = 'READY_TO_SHIP'\"}\n\n# TODO: print the index strategy summary exactly as described\n",
      "fullSolution": "table = \"orders\"\nprimary = {\"name\": \"orders_pkey\", \"columns\": \"id\"}\ncovering = [\n    {\"name\": \"idx_orders_state_status\", \"columns\": \"state, status\"},\n    {\"name\": \"idx_orders_customer_created\", \"columns\": \"customer_id, created_at DESC\"},\n]\npartial = {\"name\": \"idx_orders_ready\", \"definition\": \"WHERE status = 'READY_TO_SHIP'\"}\n\nprint(f\"Index Strategy: {table}\")\nprint(f\"Primary key: {primary['name']} ({primary['columns']})\")\nprint(\"Covering indexes:\")\nfor index in covering:\n    print(f\"- {index['name']} on ({index['columns']})\")\nprint(\"Partial index:\")\nprint(f\"- {partial['name']} {partial['definition']}\")\n",
      "expectedOutput": "Index Strategy: orders\nPrimary key: orders_pkey (id)\nCovering indexes:\n- idx_orders_state_status on (state, status)\n- idx_orders_customer_created on (customer_id, created_at DESC)\nPartial index:\n- idx_orders_ready WHERE status = 'READY_TO_SHIP'",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Explain which queries each index accelerates by grouping them as primary, covering, and partial definitions.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">print(\"Covering indexes:\")\nprint(\"- idx_orders_state_status on (state, status)\")</pre></div><p class=\"mt-4 text-gray-300\">Keep the headings and bullet formatting exactly as shown so the intent is obvious on review.</p>",
      "language": "python",
      "tags": [
        "Advanced",
        "Control Flow",
        "Web"
      ]
    },
    {
      "id": 264,
      "title": "264. SQLAlchemy Model Outline: Order",
      "description": "Use the provided field definitions to print a minimal SQLAlchemy declarative model for the orders table.",
      "initialCode": "fields = [\n    (\"Mapped[int]\", \"mapped_column(primary_key=True)\", \"id\"),\n    (\"Mapped[str]\", \"mapped_column(nullable=False)\", \"status\"),\n    (\"Mapped[int]\", \"mapped_column(name='customer_id')\", \"customer_id\"),\n    (\"Mapped[int]\", \"mapped_column(name='total_cents')\", \"total_cents\"),\n]\n\n# TODO: print the SQLAlchemy model snippet exactly as described\n",
      "fullSolution": "fields = [\n    (\"Mapped[int]\", \"mapped_column(primary_key=True)\", \"id\"),\n    (\"Mapped[str]\", \"mapped_column(nullable=False)\", \"status\"),\n    (\"Mapped[int]\", \"mapped_column(name='customer_id')\", \"customer_id\"),\n    (\"Mapped[int]\", \"mapped_column(name='total_cents')\", \"total_cents\"),\n]\n\nprint(\"from sqlalchemy.orm import DeclarativeBase, Mapped, mapped_column\")\nprint(\"\")\nprint(\"class Base(DeclarativeBase):\")\nprint(\"    pass\")\nprint(\"\")\nprint(\"class Order(Base):\")\nprint(\"    __tablename__ = \"orders\"\")\nprint(\"\")\nfor mapped_type, column_call, name in fields:\n    print(f\"    {name}: {mapped_type} = {column_call}\")\n",
      "expectedOutput": "from sqlalchemy.orm import DeclarativeBase, Mapped, mapped_column\n\nclass Base(DeclarativeBase):\n    pass\n\nclass Order(Base):\n    __tablename__ = \"orders\"\n\n    id: Mapped[int] = mapped_column(primary_key=True)\n    status: Mapped[str] = mapped_column(nullable=False)\n    customer_id: Mapped[int] = mapped_column(name='customer_id')\n    total_cents: Mapped[int] = mapped_column(name='total_cents')",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Declarative models expose table mappings in one place. Pair each field's type annotation with its <code>mapped_column()</code> call to show constraints and column names.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">class Order(Base):\n    __tablename__ = \"orders\"\n    id: Mapped[int] = mapped_column(primary_key=True)</pre></div><p class=\"mt-4 text-gray-300\">Use the supplied metadata to print a copy/paste-ready snippet.</p>",
      "language": "python",
      "tags": [
        "Advanced",
        "Control Flow",
        "OOP",
        "Databases"
      ]
    },
    {
      "id": 265,
      "title": "265. SQLAlchemy Repository Sketch",
      "description": "Print a repository class with imports and query helpers for the Order aggregate.",
      "initialCode": "imports = [\n    \"from datetime import datetime\",\n    \"from typing import Iterable, Optional\",\n    \"from sqlalchemy import select\",\n    \"from sqlalchemy.orm import Session\",\n    \"from .models import Order\",\n]\nmethods = [\n    \"    def __init__(self, session: Session) -> None:\",\n    \"        self._session = session\",\n    \"\",\n    \"    def get_by_external_id(self, external_id: str) -> Optional[Order]:\",\n    \"        stmt = select(Order).where(Order.external_id == external_id)\",\n    \"        return self._session.scalar(stmt)\",\n    \"\",\n    \"    def list_by_statuses(self, statuses: Iterable[str]) -> list[Order]:\",\n    \"        stmt = select(Order).where(Order.status.in_(list(statuses)))\",\n    \"        return list(self._session.scalars(stmt))\",\n    \"\",\n    \"    def find_stuck_orders(self, cutoff: datetime) -> list[Order]:\",\n    \"        stmt = select(Order).where(Order.created_at < cutoff, Order.status == \"PENDING\")\",\n    \"        return list(self._session.scalars(stmt))\",\n]\n\n# TODO: print the imports, a blank line, the class header, the methods, then the closing line\n",
      "fullSolution": "imports = [\n    \"from datetime import datetime\",\n    \"from typing import Iterable, Optional\",\n    \"from sqlalchemy import select\",\n    \"from sqlalchemy.orm import Session\",\n    \"from .models import Order\",\n]\nmethods = [\n    \"    def __init__(self, session: Session) -> None:\",\n    \"        self._session = session\",\n    \"\",\n    \"    def get_by_external_id(self, external_id: str) -> Optional[Order]:\",\n    \"        stmt = select(Order).where(Order.external_id == external_id)\",\n    \"        return self._session.scalar(stmt)\",\n    \"\",\n    \"    def list_by_statuses(self, statuses: Iterable[str]) -> list[Order]:\",\n    \"        stmt = select(Order).where(Order.status.in_(list(statuses)))\",\n    \"        return list(self._session.scalars(stmt))\",\n    \"\",\n    \"    def find_stuck_orders(self, cutoff: datetime) -> list[Order]:\",\n    \"        stmt = select(Order).where(Order.created_at < cutoff, Order.status == \"PENDING\")\",\n    \"        return list(self._session.scalars(stmt))\",\n]\n\nfor line in imports:\n    print(line)\nprint(\"\")\nprint(\"class OrderRepository:\")\nfor line in methods:\n    print(line)\n",
      "expectedOutput": "from datetime import datetime\nfrom typing import Iterable, Optional\nfrom sqlalchemy import select\nfrom sqlalchemy.orm import Session\nfrom .models import Order\n\nclass OrderRepository:\n    def __init__(self, session: Session) -> None:\n        self._session = session\n\n    def get_by_external_id(self, external_id: str) -> Optional[Order]:\n        stmt = select(Order).where(Order.external_id == external_id)\n        return self._session.scalar(stmt)\n\n    def list_by_statuses(self, statuses: Iterable[str]) -> list[Order]:\n        stmt = select(Order).where(Order.status.in_(list(statuses)))\n        return list(self._session.scalars(stmt))\n\n    def find_stuck_orders(self, cutoff: datetime) -> list[Order]:\n        stmt = select(Order).where(Order.created_at < cutoff, Order.status == \"PENDING\")\n        return list(self._session.scalars(stmt))",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Repository classes keep persistence code in one place. Print the imports first, then the class definition with purpose-built query helpers.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">class OrderRepository:\n    def __init__(self, session: Session) -> None:\n        self._session = session</pre></div><p class=\"mt-4 text-gray-300\">Match the spacing and blank lines so the snippet is ready to paste into a codebase.</p>",
      "language": "python",
      "tags": [
        "Advanced",
        "Control Flow",
        "Functions",
        "Collections",
        "OOP"
      ]
    },
    {
      "id": 266,
      "title": "266. Transactional Service Flow",
      "description": "Lay out the ordered steps for a transactional order reservation use case.",
      "initialCode": "steps = [\n    \"load order with SELECT ... FOR UPDATE\",\n    \"check inventory via inventory_gateway\",\n    \"reserve stock and update order status\",\n    \"publish OrderReserved event\",\n]\n\n# TODO: print the heading and numbered steps starting at 1\n",
      "fullSolution": "steps = [\n    \"load order with SELECT ... FOR UPDATE\",\n    \"check inventory via inventory_gateway\",\n    \"reserve stock and update order status\",\n    \"publish OrderReserved event\",\n]\n\nprint(\"Transactional Order Flow\")\nfor index, step in enumerate(steps, start=1):\n    print(f\"{index}. {step}\")\n",
      "expectedOutput": "Transactional Order Flow\n1. load order with SELECT ... FOR UPDATE\n2. check inventory via inventory_gateway\n3. reserve stock and update order status\n4. publish OrderReserved event",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Spell out each transactional hop so you can reason about locking, integration calls, and emitted events.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">for i, step in enumerate(steps, 1):\n    print(f\"{i}. {step}\")</pre></div><p class=\"mt-4 text-gray-300\">Number the steps to highlight the ordering inside the transaction boundary.</p>",
      "language": "python",
      "tags": [
        "Advanced",
        "Control Flow",
        "Databases",
        "Concurrency"
      ]
    },
    {
      "id": 267,
      "title": "267. FastAPI Security Dependency Plan",
      "description": "Summarize the key rules required to secure the order API.",
      "initialCode": "items = [\n    \"enforce HTTPS via forwarded headers middleware\",\n    \"inject OAuth2PasswordBearer dependency for protected routes\",\n    \"require admin scope for POST /admin/**\",\n    \"permit_all for GET /status\",\n]\n\n# TODO: print the heading followed by each bullet prefixed with \"- \"\n",
      "fullSolution": "items = [\n    \"enforce HTTPS via forwarded headers middleware\",\n    \"inject OAuth2PasswordBearer dependency for protected routes\",\n    \"require admin scope for POST /admin/**\",\n    \"permit_all for GET /status\",\n]\n\nprint(\"Security Dependency Plan\")\nfor item in items:\n    print(f\"- {item}\")\n",
      "expectedOutput": "Security Dependency Plan\n- enforce HTTPS via forwarded headers middleware\n- inject OAuth2PasswordBearer dependency for protected routes\n- require admin scope for POST /admin/**\n- permit_all for GET /status",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Documenting FastAPI security dependencies makes it clear which endpoints demand tokens, scopes, or elevated roles.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">print(\"- require admin scope for POST /admin/**\")</pre></div><p class=\"mt-4 text-gray-300\">Keep each bullet concise so the enforcement story is easy to scan.</p>",
      "language": "python",
      "tags": [
        "Advanced",
        "Control Flow",
        "Algorithms",
        "Networking",
        "Web"
      ]
    },
    {
      "id": 268,
      "title": "268. Integration Test Checklist: Order API",
      "description": "List the container, migration, seeding, and verification steps for a full-stack test.",
      "initialCode": "tasks = [\n    \"start PostgreSQL Testcontainer\",\n    \"apply Alembic migrations\",\n    \"seed reference products\",\n    \"call POST /orders\",\n    \"assert 201 status and Location header\",\n    \"query database for saved order\",\n]\n\n# TODO: print the heading and each bullet prefixed with \"- \"\n",
      "fullSolution": "tasks = [\n    \"start PostgreSQL Testcontainer\",\n    \"apply Alembic migrations\",\n    \"seed reference products\",\n    \"call POST /orders\",\n    \"assert 201 status and Location header\",\n    \"query database for saved order\",\n]\n\nprint(\"Integration Test Checklist\")\nfor task in tasks:\n    print(f\"- {task}\")\n",
      "expectedOutput": "Integration Test Checklist\n- start PostgreSQL Testcontainer\n- apply Alembic migrations\n- seed reference products\n- call POST /orders\n- assert 201 status and Location header\n- query database for saved order",
      "tutorial": "<p class=\"mb-4 text-gray-300\">High-signal integration tests spin up real infrastructure, hit the HTTP layer, and confirm persistence side effects.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">print(\"- start PostgreSQL Testcontainer\")</pre></div><p class=\"mt-4 text-gray-300\">List each step so a failing checklist item points straight to the culprit.</p>",
      "language": "python",
      "tags": [
        "Advanced",
        "Control Flow",
        "Collections",
        "Networking",
        "Databases"
      ]
    },
    {
      "id": 269,
      "title": "269. Docker Compose Outline: Order Service",
      "description": "Summarize the docker-compose services, including builds, environment variables, and dependencies.",
      "initialCode": "services = {\n    \"app\": [\"build ./\", \"env APP_ENV=prod\", \"depends_on db\"],\n    \"db\": [\"image postgres:16\", \"env POSTGRES_DB=orders\", \"volumes ./data:/var/lib/postgresql/data\"],\n}\n\n# TODO: print the docker-compose summary exactly as described\n",
      "fullSolution": "services = {\n    \"app\": [\"build ./\", \"env APP_ENV=prod\", \"depends_on db\"],\n    \"db\": [\"image postgres:16\", \"env POSTGRES_DB=orders\", \"volumes ./data:/var/lib/postgresql/data\"],\n}\n\nprint(\"docker-compose.yml\")\nprint(\"services:\")\nfor name, details in services.items():\n    print(f\"- {name} -> {', '.join(details)}\")\n",
      "expectedOutput": "docker-compose.yml\nservices:\n- app -> build ./, env APP_ENV=prod, depends_on db\n- db -> image postgres:16, env POSTGRES_DB=orders, volumes ./data:/var/lib/postgresql/data",
      "tutorial": "<p class=\"mb-4 text-gray-300\">A concise compose summary communicates how each container builds, which settings it needs, and the dependencies between services.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">print(\"- app -> build ./, env APP_ENV=prod\")</pre></div><p class=\"mt-4 text-gray-300\">Iterate in insertion order so the output mirrors the compose file.</p>",
      "language": "python",
      "tags": [
        "Advanced",
        "Tooling",
        "Control Flow",
        "Strings",
        "Databases"
      ]
    },
    {
      "id": 270,
      "title": "270. CI Pipeline Stages: Order Service",
      "description": "List the continuous integration stages needed before shipping the service.",
      "initialCode": "stages = [\n    \"checkout\",\n    \"setup Python 3.11\",\n    \"install dependencies\",\n    \"run pytest\",\n    \"build docker image\",\n    \"push image to registry\",\n]\n\n# TODO: print the heading and numbered stages starting at 1\n",
      "fullSolution": "stages = [\n    \"checkout\",\n    \"setup Python 3.11\",\n    \"install dependencies\",\n    \"run pytest\",\n    \"build docker image\",\n    \"push image to registry\",\n]\n\nprint(\"CI Pipeline\")\nfor index, stage in enumerate(stages, start=1):\n    print(f\"{index}. {stage}\")\n",
      "expectedOutput": "CI Pipeline\n1. checkout\n2. setup Python 3.11\n3. install dependencies\n4. run pytest\n5. build docker image\n6. push image to registry",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Enumerate each stage so build failures point directly to checkouts, dependency setup, tests, or packaging.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">for i, stage in enumerate(stages, 1):\n    print(f\"{i}. {stage}\")</pre></div><p class=\"mt-4 text-gray-300\">Number the stages to show the promotion path toward deployable artifacts.</p>",
      "language": "python",
      "tags": [
        "Advanced",
        "Testing",
        "Tooling",
        "Control Flow",
        "Collections"
      ]
    },
    {
      "id": 271,
      "title": "271. Kubernetes Deployment Snippet",
      "description": "Output the key manifest lines for running the service on Kubernetes.",
      "initialCode": "lines = [\n    \"apiVersion: apps/v1\",\n    \"kind: Deployment\",\n    \"metadata:\",\n    \"  name: orders-api\",\n    \"spec:\",\n    \"  replicas: 3\",\n    \"  template:\",\n    \"    spec:\",\n    \"      containers:\",\n    \"      - name: app\",\n    \"        image: ghcr.io/acme/orders-api:latest\",\n    \"        env:\",\n    \"        - name: APP_ENV\",\n    \"          value: prod\",\n]\n\n# TODO: print each line in order\n",
      "fullSolution": "lines = [\n    \"apiVersion: apps/v1\",\n    \"kind: Deployment\",\n    \"metadata:\",\n    \"  name: orders-api\",\n    \"spec:\",\n    \"  replicas: 3\",\n    \"  template:\",\n    \"    spec:\",\n    \"      containers:\",\n    \"      - name: app\",\n    \"        image: ghcr.io/acme/orders-api:latest\",\n    \"        env:\",\n    \"        - name: APP_ENV\",\n    \"          value: prod\",\n]\n\nfor line in lines:\n    print(line)\n",
      "expectedOutput": "apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: orders-api\nspec:\n  replicas: 3\n  template:\n    spec:\n      containers:\n      - name: app\n        image: ghcr.io/acme/orders-api:latest\n        env:\n        - name: APP_ENV\n          value: prod",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Indentation communicates pod structure. Capture the apiVersion, metadata, and container spec so the manifest is deploy-ready.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">print(\"kind: Deployment\")\nprint(\"  name: orders-api\")</pre></div><p class=\"mt-4 text-gray-300\">Print each line without extra spaces or missing indentation.</p>",
      "language": "python",
      "tags": [
        "Advanced",
        "Control Flow",
        "Web",
        "Packaging"
      ]
    },
    {
      "id": 272,
      "title": "272. AWS Reference Stack: Orders",
      "description": "Summarize the core AWS services powering the production deployment.",
      "initialCode": "components = [\n    \"API Gateway -> Lambda webhook fanout\",\n    \"ECS service -> orders-api (Fargate, 3 tasks)\",\n    \"RDS cluster -> aurora-postgresql\",\n    \"SQS queue -> orders-events\",\n    \"CloudWatch alarms -> p95 latency > 500ms\",\n]\n\n# TODO: print the heading and bullet list\n",
      "fullSolution": "components = [\n    \"API Gateway -> Lambda webhook fanout\",\n    \"ECS service -> orders-api (Fargate, 3 tasks)\",\n    \"RDS cluster -> aurora-postgresql\",\n    \"SQS queue -> orders-events\",\n    \"CloudWatch alarms -> p95 latency > 500ms\",\n]\n\nprint(\"AWS Reference Stack\")\nfor component in components:\n    print(f\"- {component}\")\n",
      "expectedOutput": "AWS Reference Stack\n- API Gateway -> Lambda webhook fanout\n- ECS service -> orders-api (Fargate, 3 tasks)\n- RDS cluster -> aurora-postgresql\n- SQS queue -> orders-events\n- CloudWatch alarms -> p95 latency > 500ms",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Tie each AWS service to the responsibility it owns so stakeholders understand the deployment topology.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">print(\"- RDS cluster -> aurora-postgresql\")</pre></div><p class=\"mt-4 text-gray-300\">Keep the bullets concise but descriptive enough to guide on-call responders.</p>",
      "language": "python",
      "tags": [
        "Advanced",
        "Control Flow",
        "Functions",
        "Collections",
        "Databases"
      ]
    },
    {
      "id": 273,
      "title": "273. Observability Instrumentation Map",
      "description": "Describe the metrics, logs, and traces that give production insight into orders.",
      "initialCode": "plan = {\n    \"Metrics\": [\"order_submitted_total (counter)\", \"payment_latency_seconds (histogram)\"],\n    \"Logs\": [\"structured JSON with order_id, trace_id, status\"],\n    \"Traces\": [\"name HTTP POST /orders\", \"propagate traceparent header\"],\n}\n\n# TODO: print the heading followed by each category and its bullet items\n",
      "fullSolution": "plan = {\n    \"Metrics\": [\"order_submitted_total (counter)\", \"payment_latency_seconds (histogram)\"],\n    \"Logs\": [\"structured JSON with order_id, trace_id, status\"],\n    \"Traces\": [\"name HTTP POST /orders\", \"propagate traceparent header\"],\n}\n\nprint(\"Observability Plan\")\nfor category, items in plan.items():\n    print(f\"{category}:\")\n    for item in items:\n        print(f\"- {item}\")\n",
      "expectedOutput": "Observability Plan\nMetrics:\n- order_submitted_total (counter)\n- payment_latency_seconds (histogram)\nLogs:\n- structured JSON with order_id, trace_id, status\nTraces:\n- name HTTP POST /orders\n- propagate traceparent header",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Link metrics, logs, and traces so incident responders can triangulate failures quickly.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">print(\"Metrics:\")\nprint(\"- order_submitted_total (counter)\")</pre></div><p class=\"mt-4 text-gray-300\">Group signals by type to highlight any instrumentation gaps.</p>",
      "language": "python",
      "tags": [
        "Advanced",
        "Control Flow",
        "Collections",
        "Serialization",
        "Networking"
      ]
    },
    {
      "id": 274,
      "title": "274. Resume Bullet Transformer",
      "description": "Convert accomplishment data into a compelling resume bullet.",
      "initialCode": "headline = \"Scaled FastAPI order service to 120k req/min\"\nactions = [\"introducing Redis caching\", \"async fulfillment\"]\nimpact = \"cut p95 from 940ms to 210ms\"\n\n# TODO: print the heading followed by the completed resume bullet\n",
      "fullSolution": "headline = \"Scaled FastAPI order service to 120k req/min\"\nactions = [\"introducing Redis caching\", \"async fulfillment\"]\nimpact = \"cut p95 from 940ms to 210ms\"\n\naction_text = \" and \".join(actions)\nprint(\"Resume Bullet\")\nprint(f\"{headline} by {action_text}; {impact}.\")\n",
      "expectedOutput": "Resume Bullet\nScaled FastAPI order service to 120k req/min by introducing Redis caching and async fulfillment; cut p95 from 940ms to 210ms.",
      "tutorial": "<p class=\"mb-4 text-gray-300\">High-impact resume bullets lead with scale, describe the leverage you applied, and quantify the outcome.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">print(\"Scaled platform X by introducing Y; improved Z.\")</pre></div><p class=\"mt-4 text-gray-300\">Join the provided fragments into one strong sentence.</p>",
      "language": "python",
      "tags": [
        "Advanced",
        "Strings",
        "Web",
        "Async"
      ]
    },
    {
      "id": 275,
      "title": "275. Senior Interview Prep Sprint",
      "description": "Draft a five-day prep plan covering system design, coding, behavioral, architecture, and negotiation drills.",
      "initialCode": "plan = {\n    \"Day 1\": \"system design -> design global rate limiter\",\n    \"Day 2\": \"coding -> implement LRU cache in 30 min\",\n    \"Day 3\": \"behavioral -> lead incident retrospective story\",\n    \"Day 4\": \"architecture -> review service observability\",\n    \"Day 5\": \"negotiation -> target base + equity bands\",\n}\n\n# TODO: print the heading then each day entry on its own line\n",
      "fullSolution": "plan = {\n    \"Day 1\": \"system design -> design global rate limiter\",\n    \"Day 2\": \"coding -> implement LRU cache in 30 min\",\n    \"Day 3\": \"behavioral -> lead incident retrospective story\",\n    \"Day 4\": \"architecture -> review service observability\",\n    \"Day 5\": \"negotiation -> target base + equity bands\",\n}\n\nprint(\"Interview Prep Sprint\")\nfor day, focus in plan.items():\n    print(f\"{day}: {focus}\")\n",
      "expectedOutput": "Interview Prep Sprint\nDay 1: system design -> design global rate limiter\nDay 2: coding -> implement LRU cache in 30 min\nDay 3: behavioral -> lead incident retrospective story\nDay 4: architecture -> review service observability\nDay 5: negotiation -> target base + equity bands",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Plan a focused prep sprint so you rotate through every interview discipline without last-minute panic.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">print(\"Day 1: system design -> practice high-scale feeds\")</pre></div><p class=\"mt-4 text-gray-300\">Keep the schedule ordered so it doubles as a checklist during prep week.</p>",
      "language": "python",
      "tags": [
        "Advanced",
        "Control Flow",
        "Web"
      ]
    },
    {
      "id": 276,
      "title": "276. Error Budget Dashboard Row",
      "language": "python",
      "description": "Given counts and budget limits, compute the current error rate and how much budget remains, then print the report.",
      "initialCode": "service = \"auth-api\"\ntotal_requests = 100000\nallowed_error_budget_pct = 2.0\nobserved_errors = 420\n\n# TODO: calculate the error rate and remaining budget, then print each line of the summary\n",
      "fullSolution": "service = \"auth-api\"\ntotal_requests = 100000\nallowed_error_budget_pct = 2.0\nobserved_errors = 420\n\nerror_rate = (observed_errors / total_requests) * 100\nbudget_remaining = allowed_error_budget_pct - error_rate\n\nprint(f\"Service: {service}\")\nprint(f\"Requests: {total_requests}\")\nprint(f\"Errors: {observed_errors}\")\nprint(f\"Error Rate: {error_rate:.2f}%\")\nprint(f\"Budget Remaining: {budget_remaining:.2f}%\")\n",
      "expectedOutput": "Service: auth-api\nRequests: 100000\nErrors: 420\nError Rate: 0.42%\nBudget Remaining: 1.58%",
      "tutorial": "<p class=\"mb-4 text-gray-300\">SLO dashboards track how quickly you burn through the allowed failure budget. Turn the counts into percentages so leadership can react before the budget hits zero.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">error_rate = (failures / requests) * 100\nprint(f\"Error Rate: {error_rate:.2f}%\")</pre></div><p class=\"mt-4 text-gray-300\">Format with two decimal places to match how SRE teams report weekly burn.</p>",
      "tags": [
        "Advanced",
        "Control Flow",
        "Strings",
        "Math and Stats",
        "Networking"
      ]
    },
    {
      "id": 277,
      "title": "277. Incident Timeline Reporter",
      "language": "python",
      "description": "Print a minute-by-minute incident log by iterating through the provided events.",
      "initialCode": "events = [\n    (\"07:05\", \"PagerDuty triggered for elevated 5xx\"),\n    (\"07:09\", \"Incident commander assigned\"),\n    (\"07:14\", \"Rolled back payment service\"),\n    (\"07:21\", \"Error rates normalized\"),\n]\n\n# TODO: print the heading then each time and note, formatted with a dash\n",
      "fullSolution": "events = [\n    (\"07:05\", \"PagerDuty triggered for elevated 5xx\"),\n    (\"07:09\", \"Incident commander assigned\"),\n    (\"07:14\", \"Rolled back payment service\"),\n    (\"07:21\", \"Error rates normalized\"),\n]\n\nprint(\"Incident Timeline\")\nfor timestamp, note in events:\n    print(f\"{timestamp} - {note}\")\n",
      "expectedOutput": "Incident Timeline\n07:05 - PagerDuty triggered for elevated 5xx\n07:09 - Incident commander assigned\n07:14 - Rolled back payment service\n07:21 - Error rates normalized",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Operational reviews rely on clear timelines. Loop through each (time, note) pair and unpack it inside the for loop header.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">for time, message in updates:\n    print(f\"{time} - {message}\")</pre></div><p class=\"mt-4 text-gray-300\">A heading line makes it easy to paste into a post-incident document.</p>",
      "tags": [
        "Advanced",
        "Control Flow",
        "Web"
      ]
    },
    {
      "id": 278,
      "title": "278. Canary Analysis Summary",
      "language": "python",
      "description": "Compare baseline and canary metrics and print the delta for each signal to decide whether to promote the release.",
      "initialCode": "metrics = {\n    \"latency_p95_ms\": {\"baseline\": 340, \"canary\": 360},\n    \"error_rate_pct\": {\"baseline\": 0.7, \"canary\": 0.9},\n    \"cpu_pct\": {\"baseline\": 52, \"canary\": 49},\n}\n\n# TODO: print a heading then each metric with baseline, canary, and the signed delta\n",
      "fullSolution": "metrics = {\n    \"latency_p95_ms\": {\"baseline\": 340, \"canary\": 360},\n    \"error_rate_pct\": {\"baseline\": 0.7, \"canary\": 0.9},\n    \"cpu_pct\": {\"baseline\": 52, \"canary\": 49},\n}\n\nprint(\"Canary Analysis\")\nfor metric, values in metrics.items():\n    delta = values[\"canary\"] - values[\"baseline\"]\n    print(f\"{metric}: baseline={values['baseline']}, canary={values['canary']}, delta={delta:+.2f}\")\n",
      "expectedOutput": "Canary Analysis\nlatency_p95_ms: baseline=340, canary=360, delta=+20.00\nerror_rate_pct: baseline=0.7, canary=0.9, delta=+0.20\ncpu_pct: baseline=52, canary=49, delta=-3.00",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Canary reports highlight how much the new version deviates from the last stable build. Calculating a signed delta quickly shows regressions.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">delta = values[\"canary\"] - values[\"baseline\"]\nprint(f\"delta={delta:+.2f}\")</pre></div><p class=\"mt-4 text-gray-300\">The <code>+</code> flag keeps the + or - sign so reviewers know the direction of change.</p>",
      "tags": [
        "Advanced",
        "Control Flow",
        "Web"
      ]
    },
    {
      "id": 279,
      "title": "279. Feature Flag Rollout Planner",
      "language": "python",
      "description": "Transform the staged rollout data into a readable execution checklist.",
      "initialCode": "flag_name = \"checkout_redesign\"\npercentages = [5, 25, 50, 100]\nnotes = [\n    \"internal users only\",\n    \"beta cohort rollout\",\n    \"enable for all EU traffic\",\n    \"global enablement\",\n]\n\n# TODO: print the plan header, the flag name, then each stage with percentage and note\n",
      "fullSolution": "flag_name = \"checkout_redesign\"\npercentages = [5, 25, 50, 100]\nnotes = [\n    \"internal users only\",\n    \"beta cohort rollout\",\n    \"enable for all EU traffic\",\n    \"global enablement\",\n]\n\nprint(\"Feature Flag Plan\")\nprint(f\"Flag: {flag_name}\")\nfor index, note in enumerate(notes):\n    rollout_pct = percentages[index]\n    print(f\"Stage {index + 1}: {rollout_pct}% - {note}\")\n",
      "expectedOutput": "Feature Flag Plan\nFlag: checkout_redesign\nStage 1: 5% - internal users only\nStage 2: 25% - beta cohort rollout\nStage 3: 50% - enable for all EU traffic\nStage 4: 100% - global enablement",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Staged rollouts help you gate new experiences. Enumerate each step so on-call engineers know the precise order.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">for index, pct in enumerate(percentages):\n    print(f\"Stage {index + 1}: {pct}%\")</pre></div><p class=\"mt-4 text-gray-300\">Pair the percentage with the human-readable note to create a one-glance plan.</p>",
      "tags": [
        "Advanced",
        "Control Flow"
      ]
    },
    {
      "id": 280,
      "title": "280. Capacity Forecast Table",
      "language": "python",
      "description": "Project request-per-second capacity across the next three quarters using the provided growth rates.",
      "initialCode": "current_rps = 1800\ngrowth_rates = [0.15, 0.22, 0.18]\nplanning_horizon = [\"Q1\", \"Q2\", \"Q3\"]\n\n# TODO: print a heading then loop through the horizon, compounding growth each step\n",
      "fullSolution": "current_rps = 1800\ngrowth_rates = [0.15, 0.22, 0.18]\nplanning_horizon = [\"Q1\", \"Q2\", \"Q3\"]\n\nprint(\"Capacity Forecast\")\nprojected = current_rps\nfor period, rate in zip(planning_horizon, growth_rates):\n    projected *= 1 + rate\n    print(f\"{period}: {round(projected)} rps\")\n",
      "expectedOutput": "Capacity Forecast\nQ1: 2070 rps\nQ2: 2525 rps\nQ3: 2980 rps",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Traffic rarely stays flat. Compound each growth rate so leadership can size hardware orders before you hit the wall.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">projected *= 1 + rate\nprint(round(projected))</pre></div><p class=\"mt-4 text-gray-300\">Use <code>zip()</code> to advance through periods and growth rates in lockstep.</p>",
      "tags": [
        "Advanced",
        "Control Flow",
        "Networking",
        "Concurrency"
      ]
    },
    {
      "id": 281,
      "title": "281. Service Dependency Matrix",
      "language": "python",
      "description": "Summarize each platform service with its owning team and downstream dependencies.",
      "initialCode": "services = {\n    \"checkout\": [\"payments\", \"inventory\", \"notifications\"],\n    \"payments\": [\"risk\", \"ledger\"],\n    \"search\": []\n}\n\nowners = {\n    \"checkout\": \"Growth\",\n    \"payments\": \"Core Banking\",\n    \"search\": \"Discovery\"\n}\n\n# TODO: print a heading then each service with its team and dependency list (use \"none\" when empty)\n",
      "fullSolution": "services = {\n    \"checkout\": [\"payments\", \"inventory\", \"notifications\"],\n    \"payments\": [\"risk\", \"ledger\"],\n    \"search\": []\n}\n\nowners = {\n    \"checkout\": \"Growth\",\n    \"payments\": \"Core Banking\",\n    \"search\": \"Discovery\"\n}\n\nprint(\"Service Dependencies\")\nfor service, deps in services.items():\n    team = owners[service]\n    dependency_list = \", \".join(deps) if deps else \"none\"\n    print(f\"{service} (team: {team}) -> {dependency_list}\")\n",
      "expectedOutput": "Service Dependencies\ncheckout (team: Growth) -> payments, inventory, notifications\npayments (team: Core Banking) -> risk, ledger\nsearch (team: Discovery) -> none",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Platform maps often tie each service to an owning team and the dependencies they call. Iterate through the dictionary with items() so you have the service name plus its downstream list.</p>\n<h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4>\n<div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">for service, deps in services.items():\n    print(service, deps)</pre></div>\n<p class=\"mt-4 text-gray-300\">Swap in \"none\" when the dependency list is empty so runbooks do not leave gaps.</p>",
      "tags": [
        "Advanced",
        "Control Flow",
        "Strings",
        "Collections",
        "Algorithms"
      ]
    },
    {
      "id": 282,
      "title": "282. Incident Action Agenda",
      "language": "python",
      "description": "Turn the post-incident actions into a one-glance checklist with owners and due dates.",
      "initialCode": "actions = [\n    {\n        \"item\": \"Add circuit breaker to retries\",\n        \"owner\": \"SRE\",\n        \"due\": \"2024-08-01\"\n    },\n    {\n        \"item\": \"Publish synthetic monitor runbook\",\n        \"owner\": \"Platform\",\n        \"due\": \"2024-08-05\"\n    },\n    {\n        \"item\": \"Schedule chaos drill follow up\",\n        \"owner\": \"Incident Lead\",\n        \"due\": \"2024-08-12\"\n    }\n]\n\n# TODO: print a heading then each action as - Owner to task (due date)\n",
      "fullSolution": "actions = [\n    {\n        \"item\": \"Add circuit breaker to retries\",\n        \"owner\": \"SRE\",\n        \"due\": \"2024-08-01\"\n    },\n    {\n        \"item\": \"Publish synthetic monitor runbook\",\n        \"owner\": \"Platform\",\n        \"due\": \"2024-08-05\"\n    },\n    {\n        \"item\": \"Schedule chaos drill follow up\",\n        \"owner\": \"Incident Lead\",\n        \"due\": \"2024-08-12\"\n    }\n]\n\nprint(\"Incident Action Items\")\nfor entry in actions:\n    print(f\"- {entry[\"owner\"]} to {entry[\"item\"]} (due {entry[\"due\"]})\")\n",
      "expectedOutput": "Incident Action Items\n- SRE to Add circuit breaker to retries (due 2024-08-01)\n- Platform to Publish synthetic monitor runbook (due 2024-08-05)\n- Incident Lead to Schedule chaos drill follow up (due 2024-08-12)",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Retrospectives should end with clear owners and dates. Loop through the structured data so every line answers who does what by when.</p>\n<h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4>\n<div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">for entry in actions:\n    print(entry[\"owner\"], entry[\"due\"])</pre></div>\n<p class=\"mt-4 text-gray-300\">Formatting each bullet consistently helps the on-call lead copy it into the follow-up tracker.</p>",
      "tags": [
        "Advanced",
        "Control Flow",
        "Async"
      ]
    },
    {
      "id": 283,
      "title": "283. Architecture Trade-off Matrix",
      "language": "python",
      "description": "Compare platform options on latency, delivery time, and operational burden to justify a senior-level architecture review.",
      "initialCode": "options = [\n    {\"name\": \"Monolith\", \"latency_ms\": 140, \"dev_weeks\": 4, \"ops_burden\": \"low\"},\n    {\"name\": \"Services\", \"latency_ms\": 95, \"dev_weeks\": 10, \"ops_burden\": \"high\"},\n    {\"name\": \"Event Hub\", \"latency_ms\": 120, \"dev_weeks\": 7, \"ops_burden\": \"medium\"},\n]\n\n# TODO: print \"Architecture Trade-offs\" then each option as:\n# Name - latency: Xms, build: Y weeks, ops: Z\n",
      "fullSolution": "options = [\n    {\"name\": \"Monolith\", \"latency_ms\": 140, \"dev_weeks\": 4, \"ops_burden\": \"low\"},\n    {\"name\": \"Services\", \"latency_ms\": 95, \"dev_weeks\": 10, \"ops_burden\": \"high\"},\n    {\"name\": \"Event Hub\", \"latency_ms\": 120, \"dev_weeks\": 7, \"ops_burden\": \"medium\"},\n]\n\nprint(\"Architecture Trade-offs\")\nfor option in options:\n    print(\n        f\"{option['name']} - latency: {option['latency_ms']}ms, build: {option['dev_weeks']} weeks, ops: {option['ops_burden']}\"\n    )\n",
      "expectedOutput": "Architecture Trade-offs\nMonolith - latency: 140ms, build: 4 weeks, ops: low\nServices - latency: 95ms, build: 10 weeks, ops: high\nEvent Hub - latency: 120ms, build: 7 weeks, ops: medium",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Senior engineers surface trade-offs explicitly so stakeholders see speed, performance, and operational cost in one view. Iterate the structured data rather than hard-coding each line.</p>\n<h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4>\n<div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">for option in options:\n    print(option[\"name\"], option[\"latency_ms\"])</pre></div>\n<p class=\"mt-4 text-gray-300\">Consistent formatting keeps the architecture conversation focused on evidence, not on deciphering the summary.</p>",
      "tags": [
        "Advanced",
        "Control Flow",
        "Web",
        "Performance"
      ]
    },
    {
      "id": 284,
      "title": "284. Reliability Risk Register",
      "language": "python",
      "description": "Quantify incident risk by multiplying impact and likelihood for each major component.",
      "initialCode": "risks = [\n    {\"component\": \"Checkout API\", \"impact\": 5, \"likelihood\": 3},\n    {\"component\": \"Worker Queue\", \"impact\": 4, \"likelihood\": 2},\n    {\"component\": \"Search Index\", \"impact\": 3, \"likelihood\": 4},\n]\n\n# TODO: print the heading then each item showing impact, likelihood, and severity (impact * likelihood)\n",
      "fullSolution": "risks = [\n    {\"component\": \"Checkout API\", \"impact\": 5, \"likelihood\": 3},\n    {\"component\": \"Worker Queue\", \"impact\": 4, \"likelihood\": 2},\n    {\"component\": \"Search Index\", \"impact\": 3, \"likelihood\": 4},\n]\n\nprint(\"Reliability Risk Register\")\nfor entry in risks:\n    severity = entry[\"impact\"] * entry[\"likelihood\"]\n    print(\n        f\"{entry['component']} - impact: {entry['impact']}, likelihood: {entry['likelihood']}, severity: {severity}\"\n    )\n",
      "expectedOutput": "Reliability Risk Register\nCheckout API - impact: 5, likelihood: 3, severity: 15\nWorker Queue - impact: 4, likelihood: 2, severity: 8\nSearch Index - impact: 3, likelihood: 4, severity: 12",
      "tutorial": "      <p class=\"mb-4 text-gray-300\">Turning qualitative risk notes into severity scores helps prioritize mitigations. Multiply the integers directly in the loop.</p>\n      <h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4>\n      <div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">severity = impact * likelihood\nprint(severity)</pre></div>\n      <p class=\"mt-4 text-gray-300\">Clear scoring lets product and SRE leaders agree on which fires to fight first.</p>",
      "tags": [
        "Advanced",
        "Control Flow",
        "Collections",
        "Algorithms"
      ]
    },
    {
      "id": 285,
      "title": "285. Migration Cutover Timeline",
      "language": "python",
      "description": "Lay out a time-ordered migration plan with owners so the cutover room stays coordinated.",
      "initialCode": "steps = [\n    (\"T-24h\", \"freeze writes\", \"Platform\"),\n    (\"T-6h\", \"back up primary database\", \"DBA\"),\n    (\"T-0\", \"switch traffic to new cluster\", \"SRE\"),\n    (\"T+1h\", \"run smoke tests\", \"QA\"),\n]\n\n# TODO: print the heading then each step as Time: Owner -> Task\n",
      "fullSolution": "steps = [\n    (\"T-24h\", \"freeze writes\", \"Platform\"),\n    (\"T-6h\", \"back up primary database\", \"DBA\"),\n    (\"T-0\", \"switch traffic to new cluster\", \"SRE\"),\n    (\"T+1h\", \"run smoke tests\", \"QA\"),\n]\n\nprint(\"Migration Cutover Timeline\")\nfor timestamp, task, owner in steps:\n    print(f\"{timestamp}: {owner} -> {task}\")\n",
      "expectedOutput": "Migration Cutover Timeline\nT-24h: Platform -> freeze writes\nT-6h: DBA -> back up primary database\nT-0: SRE -> switch traffic to new cluster\nT+1h: QA -> run smoke tests",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Major migrations hinge on everyone knowing who owns each moment. Unpack the tuple directly in the loop so the output stays readable under pressure.</p>\n<h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4>\n<div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">for time, action, owner in steps:\n    print(time, owner, action)</pre></div>\n<p class=\"mt-4 text-gray-300\">Explicit owner cues prevent last-minute scrambling during cutover calls.</p>",
      "tags": [
        "Advanced",
        "Control Flow",
        "Collections",
        "Databases"
      ]
    },
    {
      "id": 286,
      "title": "286. Security Control Coverage",
      "language": "python",
      "description": "Summarize security initiatives by domain to show coverage heading into a compliance review.",
      "initialCode": "domains = {\n    \"Authentication\": [\"MFA enforcement\", \"Session timeout review\"],\n    \"Data Protection\": [\"Rotate KMS keys\", \"Encrypt S3 buckets\"],\n    \"Observability\": [\"Audit log retention\", \"Alert on IAM anomalies\"],\n}\n\n# TODO: print a heading then each domain followed by its controls prefixed with \"- \"\n",
      "fullSolution": "domains = {\n    \"Authentication\": [\"MFA enforcement\", \"Session timeout review\"],\n    \"Data Protection\": [\"Rotate KMS keys\", \"Encrypt S3 buckets\"],\n    \"Observability\": [\"Audit log retention\", \"Alert on IAM anomalies\"],\n}\n\nprint(\"Security Control Coverage\")\nfor domain, controls in domains.items():\n    print(f\"{domain}:\")\n    for control in controls:\n        print(f\"- {control}\")\n",
      "expectedOutput": "Security Control Coverage\nAuthentication:\n- MFA enforcement\n- Session timeout review\nData Protection:\n- Rotate KMS keys\n- Encrypt S3 buckets\nObservability:\n- Audit log retention\n- Alert on IAM anomalies",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Audit prep demands a crisp accounting of safeguards by category. Nest one loop inside another to keep each domain grouped with its actions.</p>\n<h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4>\n<div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">for domain, controls in domains.items():\n    for control in controls:\n        print(control)</pre></div>\n<p class=\"mt-4 text-gray-300\">Well-structured coverage tables help security and engineering align on remaining gaps.</p>",
      "tags": [
        "Advanced",
        "Control Flow",
        "Web",
        "Security"
      ]
    },
    {
      "id": 287,
      "title": "287. Cost Efficiency Report",
      "language": "python",
      "description": "Quantify spend deltas and percentage change so finance partners see the impact of engineering optimizations.",
      "initialCode": "services = [\n    {\"name\": \"api-gateway\", \"baseline\": 3200, \"current\": 2800},\n    {\"name\": \"batch-jobs\", \"baseline\": 4100, \"current\": 4800},\n    {\"name\": \"stream-processor\", \"baseline\": 2900, \"current\": 2550},\n]\n\n# TODO: print a heading then each service with baseline, current, dollar delta, and percentage change (one decimal, signed)\n",
      "fullSolution": "services = [\n    {\"name\": \"api-gateway\", \"baseline\": 3200, \"current\": 2800},\n    {\"name\": \"batch-jobs\", \"baseline\": 4100, \"current\": 4800},\n    {\"name\": \"stream-processor\", \"baseline\": 2900, \"current\": 2550},\n]\n\nprint(\"Cost Efficiency Report\")\nfor service in services:\n    delta = service[\"current\"] - service[\"baseline\"]\n    change_pct = (delta / service[\"baseline\"]) * 100\n    print(\n        f\"{service['name']}: baseline=${service['baseline']}, current=${service['current']}, delta=${delta:+}, change={change_pct:+.1f}%\"\n    )\n",
      "expectedOutput": "Cost Efficiency Report\napi-gateway: baseline=$3200, current=$2800, delta=$-400, change=-12.5%\nbatch-jobs: baseline=$4100, current=$4800, delta=$+700, change=+17.1%\nstream-processor: baseline=$2900, current=$2550, delta=$-350, change=-12.1%",
      "tutorial": "      <p class=\"mb-4 text-gray-300\">Senior ICs translate optimizations into dollars. Use the <code>+\" format flag to always show direction on both raw and percentage deltas.</p>\n      <h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4>\n      <div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">print(f\"delta={value:+}\")\nprint(f\"change={pct:+.1f}%\")</pre></div>\n      <p class=\"mt-4 text-gray-300\">That clarity helps finance and engineering track whether initiatives are paying off.</p>",
      "tags": [
        "Advanced",
        "Control Flow",
        "Strings",
        "Math and Stats"
      ]
    },
    {
      "id": 288,
      "title": "288. Mentorship Pairing Planner",
      "language": "python",
      "description": "Outline mentor-mentee matches with focus goals to support org-level talent development.",
      "initialCode": "pairings = [\n    (\"Alice\", \"Ravi\", \"modernize reporting ETL\"),\n    (\"Morgan\", \"Chen\", \"k8s deployment playbook\"),\n    (\"Jamie\", \"Inez\", \"observability dashboards\"),\n]\n\n# TODO: print the heading then each pairing as Mentor -> Mentee: focus area\n",
      "fullSolution": "pairings = [\n    (\"Alice\", \"Ravi\", \"modernize reporting ETL\"),\n    (\"Morgan\", \"Chen\", \"k8s deployment playbook\"),\n    (\"Jamie\", \"Inez\", \"observability dashboards\"),\n]\n\nprint(\"Mentorship Pairings\")\nfor mentor, mentee, focus in pairings:\n    print(f\"{mentor} -> {mentee}: {focus}\")\n",
      "expectedOutput": "Mentorship Pairings\nAlice -> Ravi: modernize reporting ETL\nMorgan -> Chen: k8s deployment playbook\nJamie -> Inez: observability dashboards",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Leadership readiness includes creating growth plans. Loop through the tuples and format each pairing consistently.</p>\n<h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4>\n<div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">for mentor, mentee, topic in pairings:\n    print(mentor, mentee, topic)</pre></div>\n<p class=\"mt-4 text-gray-300\">Clear articulation of focus areas keeps mentorship aligned with org objectives.</p>",
      "tags": [
        "Advanced",
        "Control Flow",
        "Strings"
      ]
    },
    {
      "id": 289,
      "title": "289. Roadmap Pillar Summary",
      "language": "python",
      "description": "Group key initiatives under roadmap pillars so product, engineering, and execs stay aligned on strategy.",
      "initialCode": "pillars = {\n    \"Reliability\": [\"Implement region failover\", \"Drop MTTR below 20m\"],\n    \"Product\": [\"Adaptive pricing\", \"Cross-store search\"],\n    \"Platform\": [\"Unified CI/CD pipeline\"],\n}\n\n# TODO: print \"Roadmap Pillars\" then each pillar and its initiatives prefixed with \"- \"\n",
      "fullSolution": "pillars = {\n    \"Reliability\": [\"Implement region failover\", \"Drop MTTR below 20m\"],\n    \"Product\": [\"Adaptive pricing\", \"Cross-store search\"],\n    \"Platform\": [\"Unified CI/CD pipeline\"],\n}\n\nprint(\"Roadmap Pillars\")\nfor pillar, items in pillars.items():\n    print(f\"{pillar}:\")\n    for item in items:\n        print(f\"- {item}\")\n",
      "expectedOutput": "Roadmap Pillars\nReliability:\n- Implement region failover\n- Drop MTTR below 20m\nProduct:\n- Adaptive pricing\n- Cross-store search\nPlatform:\n- Unified CI/CD pipeline",
      "tutorial": "      <p class=\"mb-4 text-gray-300\">Senior ICs frequently narrate the strategy. Group initiatives under each pillar so stakeholders can skim the plan in one glance.</p>\n      <h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4>\n      <div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">print(\"Platform:\")\nprint(\"- Unified CI/CD pipeline\")</pre></div>\n      <p class=\"mt-4 text-gray-300\">Readable pillar summaries simplify roadmap reviews with product and leadership.</p>",
      "tags": [
        "Advanced",
        "Control Flow",
        "Algorithms",
        "Web"
      ]
    },
    {
      "id": 290,
      "title": "290. Experiment Result Synthesizer",
      "language": "python",
      "description": "Summarize experiment deltas and percentage lift to make promote-or-rollback calls easy during reviews.",
      "initialCode": "experiments = [\n    {\"name\": \"Checkout copy\", \"metric\": \"conversion\", \"control\": 0.342, \"treatment\": 0.361},\n    {\"name\": \"Recommendation ranking\", \"metric\": \"session revenue\", \"control\": 7.80, \"treatment\": 8.05},\n]\n\n# TODO: print the heading then each experiment with signed delta (3 decimals) and percentage lift (2 decimals)\n",
      "fullSolution": "experiments = [\n    {\"name\": \"Checkout copy\", \"metric\": \"conversion\", \"control\": 0.342, \"treatment\": 0.361},\n    {\"name\": \"Recommendation ranking\", \"metric\": \"session revenue\", \"control\": 7.80, \"treatment\": 8.05},\n]\n\nprint(\"Experiment Results\")\nfor exp in experiments:\n    delta = exp[\"treatment\"] - exp[\"control\"]\n    lift = 0.0 if exp[\"control\"] == 0 else (delta / exp[\"control\"]) * 100\n    print(\n        f\"{exp['name']} ({exp['metric']}): delta={delta:+.3f}, lift={lift:+.2f}%\"\n    )\n",
      "expectedOutput": "Experiment Results\nCheckout copy (conversion): delta=+0.019, lift=+5.56%\nRecommendation ranking (session revenue): delta=+0.250, lift=+3.21%",
      "tutorial": "      <p class=\"mb-4 text-gray-300\">Outcome reviews demand both absolute change and percentage lift. Use the <code>+\" flag to keep the sign and round to the precision analysts expect.</p>\n      <h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4>\n      <div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">delta = treatment - control\nprint(f\"{delta:+.3f}\")</pre></div>\n      <p class=\"mt-4 text-gray-300\">Clear metrics help product and engineering align on launch decisions without re-running the math.</p>",
      "tags": [
        "Advanced",
        "Control Flow",
        "Web"
      ]
    },
    {
      "id": 291,
      "title": "291. asyncio.wait FIRST_COMPLETED",
      "language": "python",
      "description": "Race fast and slow tasks, cancel the slower one, and print the first result.",
      "initialCode": "import asyncio\n\nasync def slow():\n    await asyncio.sleep(0.2)\n    return \"slow\"\n\nasync def fast():\n    await asyncio.sleep(0.05)\n    return \"fast\"\n\nasync def main():\n    # TODO: launch both tasks, wait for FIRST_COMPLETED, cancel the slower one, and print the first result\n    pass\n\nasyncio.run(main())\n",
      "fullSolution": "import asyncio\n\nasync def slow():\n    await asyncio.sleep(0.2)\n    return \"slow\"\n\nasync def fast():\n    await asyncio.sleep(0.05)\n    return \"fast\"\n\nasync def main():\n    tasks = {asyncio.create_task(slow()), asyncio.create_task(fast())}\n    done, pending = await asyncio.wait(tasks, return_when=asyncio.FIRST_COMPLETED)\n    for task in pending:\n        task.cancel()\n    if pending:\n        await asyncio.gather(*pending, return_exceptions=True)\n    first = next(iter(done))\n    print(first.result())\n\nasyncio.run(main())\n",
      "expectedOutput": "fast",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Use <code>asyncio.wait</code> with <code>FIRST_COMPLETED</code> to respond to whichever coroutine finishes first. Cancel or clean up the slower tasks so they do not leak.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import asyncio\n\nasync def main():\n    done, pending = await asyncio.wait(\n        {asyncio.create_task(asyncio.sleep(0.1, result=\"fast\"))},\n        return_when=asyncio.FIRST_COMPLETED,\n    )\n    print(next(iter(done)).result())\n\nasyncio.run(main())</pre></div>",
      "tags": [
        "Advanced",
        "Control Flow",
        "Functions",
        "Async"
      ]
    },
    {
      "id": 292,
      "title": "292. asyncio.Event broadcast",
      "language": "python",
      "description": "Coordinate workers with an Event so they start together and print their status once released.",
      "initialCode": "import asyncio\n\nasync def worker(name, evt):\n    await evt.wait()\n    return f\"{name} started\"\n\nasync def main():\n    evt = asyncio.Event()\n    tasks = [\n        asyncio.create_task(worker(\"A\", evt)),\n        asyncio.create_task(worker(\"B\", evt)),\n    ]\n    # TODO: give the workers a moment, set the event, gather results, then print each line\n    pass\n\nasyncio.run(main())\n",
      "fullSolution": "import asyncio\n\nasync def worker(name, evt):\n    await evt.wait()\n    return f\"{name} started\"\n\nasync def main():\n    evt = asyncio.Event()\n    tasks = [\n        asyncio.create_task(worker(\"A\", evt)),\n        asyncio.create_task(worker(\"B\", evt)),\n    ]\n    await asyncio.sleep(0.05)\n    evt.set()\n    results = await asyncio.gather(*tasks)\n    for item in results:\n        print(item)\n\nasyncio.run(main())\n",
      "expectedOutput": "A started\nB started",
      "tutorial": "<p class=\"mb-4 text-gray-300\">An <code>Event</code> lets one task signal many waiters. Call <code>set()</code> when the shared condition is ready and every waiting coroutine resumes immediately.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import asyncio\n\nasync def wait_on(evt):\n    await evt.wait()\n    return \"go\"\n\nasync def main():\n    evt = asyncio.Event()\n    task = asyncio.create_task(wait_on(evt))\n    evt.set()\n    print(await task)\n\nasyncio.run(main())</pre></div>",
      "tags": [
        "Advanced",
        "Control Flow",
        "Functions",
        "Collections",
        "Async"
      ]
    },
    {
      "id": 293,
      "title": "293. asyncio.Lock critical section",
      "language": "python",
      "description": "Protect a shared counter with an asyncio.Lock so two workers increment safely and print 200.",
      "initialCode": "import asyncio\n\nasync def main():\n    lock = asyncio.Lock()\n    counter = 0\n\n    async def worker():\n        nonlocal counter\n        for _ in range(100):\n            # TODO: acquire the lock before updating the counter\n            counter += 1\n\n    # TODO: run two workers concurrently and print the final counter\n    pass\n\nasyncio.run(main())\n",
      "fullSolution": "import asyncio\n\nasync def main():\n    lock = asyncio.Lock()\n    counter = 0\n\n    async def worker():\n        nonlocal counter\n        for _ in range(100):\n            async with lock:\n                counter += 1\n\n    await asyncio.gather(worker(), worker())\n    print(counter)\n\nasyncio.run(main())\n",
      "expectedOutput": "200",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Use <code>asyncio.Lock</code> to ensure only one coroutine changes shared state at a time. Wrap the mutation in <code>async with lock</code> just like a synchronous context manager.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import asyncio\n\nlock = asyncio.Lock()\n\nasync def bump():\n    async with lock:\n        ...</pre></div>",
      "tags": [
        "Advanced",
        "Control Flow",
        "Functions",
        "Concurrency",
        "Async"
      ]
    },
    {
      "id": 294,
      "title": "294. contextlib.AsyncExitStack",
      "language": "python",
      "description": "Use AsyncExitStack to manage two async resources and print their names joined by a comma.",
      "initialCode": "import asyncio\nfrom contextlib import AsyncExitStack, asynccontextmanager\n\n@asynccontextmanager\nasync def connect(name):\n    await asyncio.sleep(0.01)\n    try:\n        yield name\n    finally:\n        await asyncio.sleep(0.01)\n\nasync def main():\n    # TODO: enter both connections with AsyncExitStack and print \"primary,replica\"\n    pass\n\nasyncio.run(main())\n",
      "fullSolution": "import asyncio\nfrom contextlib import AsyncExitStack, asynccontextmanager\n\n@asynccontextmanager\nasync def connect(name):\n    await asyncio.sleep(0.01)\n    try:\n        yield name\n    finally:\n        await asyncio.sleep(0.01)\n\nasync def main():\n    async with AsyncExitStack() as stack:\n        primary = await stack.enter_async_context(connect(\"primary\"))\n        replica = await stack.enter_async_context(connect(\"replica\"))\n        print(f\"{primary},{replica}\")\n\nasyncio.run(main())\n",
      "expectedOutput": "primary,replica",
      "tutorial": "<p class=\"mb-4 text-gray-300\"><code>AsyncExitStack</code> lets you dynamically compose multiple async context managers while guaranteeing cleanup in reverse order.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from contextlib import AsyncExitStack\n\nasync with AsyncExitStack() as stack:\n    conn = await stack.enter_async_context(connect(\"primary\"))</pre></div>",
      "tags": [
        "Advanced",
        "Control Flow",
        "Functions",
        "Collections",
        "Async"
      ]
    },
    {
      "id": 295,
      "title": "295. asyncio.Condition queue",
      "language": "python",
      "description": "Coordinate a producer and consumer with asyncio.Condition and print items as they are consumed.",
      "initialCode": "import asyncio\n\nasync def main():\n    cond = asyncio.Condition()\n    queue = []\n\n    async def producer():\n        for item in [1, 2, 3, None]:\n            async with cond:\n                queue.append(item)\n                cond.notify_all()\n            await asyncio.sleep(0.01)\n\n    async def consumer():\n        while True:\n            async with cond:\n                while not queue:\n                    await cond.wait()\n                item = queue.pop(0)\n            if item is None:\n                print(\"done\")\n                return\n            print(item)\n\n    # TODO: run producer and consumer and wait for them to finish\n    pass\n\nasyncio.run(main())\n",
      "fullSolution": "import asyncio\n\nasync def main():\n    cond = asyncio.Condition()\n    queue = []\n\n    async def producer():\n        for item in [1, 2, 3, None]:\n            async with cond:\n                queue.append(item)\n                cond.notify_all()\n            await asyncio.sleep(0.01)\n\n    async def consumer():\n        while True:\n            async with cond:\n                while not queue:\n                    await cond.wait()\n                item = queue.pop(0)\n            if item is None:\n                print(\"done\")\n                return\n            print(item)\n\n    await asyncio.gather(producer(), consumer())\n\nasyncio.run(main())\n",
      "expectedOutput": "1\n2\n3\ndone",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Use <code>asyncio.Condition</code> when you need both mutual exclusion and a notification channel. Producers append work, call <code>notify_all()</code>, and consumers loop until the shared predicate becomes true.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">async with cond:\n    while not ready:\n        await cond.wait()\n    process()</pre></div>",
      "tags": [
        "Advanced",
        "Control Flow",
        "Functions",
        "Collections",
        "Async"
      ]
    },
    {
      "id": 296,
      "title": "296. asyncio.to_thread offload",
      "language": "python",
      "description": "Offload a blocking function to a worker thread with asyncio.to_thread and print its result.",
      "initialCode": "import asyncio\nimport time\n\ndef blocking():\n    time.sleep(0.05)\n    return \"OK\"\n\nasync def main():\n    # TODO: call blocking() without blocking the loop and print the result\n    pass\n\nasyncio.run(main())\n",
      "fullSolution": "import asyncio\nimport time\n\ndef blocking():\n    time.sleep(0.05)\n    return \"OK\"\n\nasync def main():\n    result = await asyncio.to_thread(blocking)\n    print(result)\n\nasyncio.run(main())\n",
      "expectedOutput": "OK",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Use <code>asyncio.to_thread</code> to run blocking callables in a thread pool without freezing the event loop.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">result = await asyncio.to_thread(open, \"data.txt\", \"r\")</pre></div>",
      "tags": [
        "Advanced",
        "Functions",
        "Concurrency",
        "Async"
      ]
    },
    {
      "id": 297,
      "title": "297. asyncio.TaskGroup fan-in",
      "language": "python",
      "description": "Launch two coroutines inside asyncio.TaskGroup, collect their results, and print them joined by commas.",
      "initialCode": "import asyncio\n\nasync def fetch(name, delay):\n    await asyncio.sleep(delay)\n    return name\n\nasync def main():\n    # TODO: launch fast and slow under asyncio.TaskGroup and print \"fast,slow\"\n    pass\n\nasyncio.run(main())\n",
      "fullSolution": "import asyncio\n\nasync def fetch(name, delay):\n    await asyncio.sleep(delay)\n    return name\n\nasync def main():\n    async with asyncio.TaskGroup() as tg:\n        fast = tg.create_task(fetch(\"fast\", 0.05))\n        slow = tg.create_task(fetch(\"slow\", 0.1))\n    results = [fast.result(), slow.result()]\n    print(\",\".join(results))\n\nasyncio.run(main())\n",
      "expectedOutput": "fast,slow",
      "tutorial": "<p class=\"mb-4 text-gray-300\">asyncio.TaskGroup brings structured concurrency to Python 3.11, letting you treat a cluster of tasks as one unit: if any member fails, the rest are cancelled.</p>\n<h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4>\n<div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">async with asyncio.TaskGroup() as tg:\n    worker = tg.create_task(fetch_user())\n</pre></div>\n<p class=\"mt-4 text-gray-300\">Collect task results after the context exits; TaskGroup waits for every member before handing back control.</p>",
      "tags": [
        "Advanced",
        "Control Flow",
        "Functions",
        "Strings",
        "Async"
      ]
    },
    {
      "id": 298,
      "title": "298. asyncio.timeout context",
      "language": "python",
      "description": "Guard a slow coroutine with asyncio.timeout and print \"timeout\" when it exceeds the limit.",
      "initialCode": "import asyncio\n\nasync def slow():\n    await asyncio.sleep(0.2)\n\nasync def main():\n    # TODO: wrap slow() in asyncio.timeout(0.1) and print \"timeout\" when it expires\n    pass\n\nasyncio.run(main())\n",
      "fullSolution": "import asyncio\n\nasync def slow():\n    await asyncio.sleep(0.2)\n\nasync def main():\n    try:\n        async with asyncio.timeout(0.1):\n            await slow()\n    except asyncio.TimeoutError:\n        print(\"timeout\")\n    else:\n        print(\"done\")\n\nasyncio.run(main())\n",
      "expectedOutput": "timeout",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Use <code>asyncio.timeout</code> as an async context manager when you need to bound a sequence of awaits without manually juggling wait_for calls.</p>\n<h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4>\n<div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">try:\n    async with asyncio.timeout(0.5):\n        await op()\nexcept asyncio.TimeoutError:\n    handle_timeout()\n</pre></div>\n<p class=\"mt-4 text-gray-300\">The context automatically cancels the protected work and raises TimeoutError when the budget is exhausted.</p>",
      "tags": [
        "Advanced",
        "Control Flow",
        "Functions",
        "Async",
        "Error Handling"
      ]
    },
    {
      "id": 299,
      "title": "299. asyncio.Runner embed",
      "language": "python",
      "description": "Use asyncio.Runner to drive a coroutine from synchronous code and print its return value.",
      "initialCode": "import asyncio\n\nasync def fetch():\n    await asyncio.sleep(0.01)\n    return \"ready\"\n\n# TODO: create an asyncio.Runner, run fetch(), and print the result\n",
      "fullSolution": "import asyncio\n\nasync def fetch():\n    await asyncio.sleep(0.01)\n    return \"ready\"\n\nwith asyncio.Runner() as runner:\n    result = runner.run(fetch())\n    print(result)\n",
      "expectedOutput": "ready",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Use <code>asyncio.Runner</code> when embedding asyncio inside synchronous entry points such as CLI tools or tests. The runner owns the loop lifecycle and cleans it up automatically.</p>\n<h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4>\n<div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">with asyncio.Runner() as runner:\n    result = runner.run(coro())\n</pre></div>\n<p class=\"mt-4 text-gray-300\">This pattern avoids creating global event loops while still giving you a single awaitable result.</p>",
      "tags": [
        "Advanced",
        "Control Flow",
        "Functions",
        "Async",
        "CLI"
      ]
    },
    {
      "id": 300,
      "title": "300. asyncio.TaskGroup failures",
      "language": "python",
      "description": "Handle an ExceptionGroup raised from asyncio.TaskGroup and print the underlying RuntimeError message.",
      "initialCode": "import asyncio\n\nasync def backend(name, delay):\n    await asyncio.sleep(delay)\n    if name == \"api\":\n        raise RuntimeError(\"api down\")\n    return f\"{name} ok\"\n\nasync def main():\n    try:\n        async with asyncio.TaskGroup() as tg:\n            tg.create_task(backend(\"api\", 0.01))\n            tg.create_task(backend(\"cache\", 0.05))\n    except* RuntimeError as group:\n        # TODO: print the first error message from the exception group\n        pass\n\nasyncio.run(main())\n",
      "fullSolution": "import asyncio\n\nasync def backend(name, delay):\n    await asyncio.sleep(delay)\n    if name == \"api\":\n        raise RuntimeError(\"api down\")\n    return f\"{name} ok\"\n\nasync def main():\n    try:\n        async with asyncio.TaskGroup() as tg:\n            tg.create_task(backend(\"api\", 0.01))\n            tg.create_task(backend(\"cache\", 0.05))\n    except* RuntimeError as group:\n        first = group.exceptions[0]\n        print(first.args[0])\n\nasyncio.run(main())\n",
      "expectedOutput": "api down",
      "tutorial": "<p class=\"mb-4 text-gray-300\">When a <code>TaskGroup</code> member fails, Python raises an <code>ExceptionGroup</code>. Use <code>except*</code> to handle only the relevant exception types and introspect their messages.</p>\n<h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4>\n<div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">try:\n    async with asyncio.TaskGroup() as tg:\n        tg.create_task(do_work())\nexcept* ValueError as group:\n    for exc in group.exceptions:\n        log(exc)\n</pre></div>\n<p class=\"mt-4 text-gray-300\">This keeps error paths explicit while TaskGroup cancels any surviving coroutines for you.</p>",
      "tags": [
        "Advanced",
        "Control Flow",
        "Functions",
        "Async"
      ]
    },
    {
      "id": 301,
      "title": "301. Pyproject Dependency Summary",
      "language": "python",
      "description": "Summarize runtime and dev dependencies plus the build backend for a pyproject.toml entry.",
      "initialCode": "project = {\n    \"name\": \"inventory-api\",\n    \"version\": \"1.2.0\",\n    \"runtime\": [\n        \"fastapi>=0.110\",\n        \"uvicorn[standard]>=0.29\",\n    ],\n    \"dev\": [\n        \"pytest\",\n        \"mypy\",\n        \"ruff\",\n    ],\n    \"build_backend\": \"setuptools.build_meta\",\n}\n\n# TODO: print the summary in the exact format:\n# Pyproject Summary\n# Name: inventory-api\n# Version: 1.2.0\n# Runtime deps:\n# - fastapi>=0.110\n# - uvicorn[standard]>=0.29\n# Dev deps:\n# - pytest\n# - mypy\n# - ruff\n# Build backend: setuptools.build_meta\n",
      "fullSolution": "project = {\n    \"name\": \"inventory-api\",\n    \"version\": \"1.2.0\",\n    \"runtime\": [\n        \"fastapi>=0.110\",\n        \"uvicorn[standard]>=0.29\",\n    ],\n    \"dev\": [\n        \"pytest\",\n        \"mypy\",\n        \"ruff\",\n    ],\n    \"build_backend\": \"setuptools.build_meta\",\n}\n\nprint(\"Pyproject Summary\")\nprint(f\"Name: {project['name']}\")\nprint(f\"Version: {project['version']}\")\nprint(\"Runtime deps:\")\nfor dep in project[\"runtime\"]:\n    print(f\"- {dep}\")\nprint(\"Dev deps:\")\nfor dep in project[\"dev\"]:\n    print(f\"- {dep}\")\nprint(f\"Build backend: {project['build_backend']}\")\n",
      "expectedOutput": "Pyproject Summary\nName: inventory-api\nVersion: 1.2.0\nRuntime deps:\n- fastapi>=0.110\n- uvicorn[standard]>=0.29\nDev deps:\n- pytest\n- mypy\n- ruff\nBuild backend: setuptools.build_meta",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Surface runtime versus development dependencies so reviewers can spot environment drift before release.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Tip:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">print(\"Runtime deps:\")</pre></div>",
      "tags": [
        "Advanced",
        "Control Flow",
        "Strings",
        "Serialization",
        "Web"
      ]
    },
    {
      "id": 302,
      "title": "302. Wheel Release Checklist",
      "language": "python",
      "description": "Lay out the exact commands for building and publishing a wheel to PyPI.",
      "initialCode": "steps = [\n    (\"Environment\", \"python -m pip install --upgrade build twine\"),\n    (\"Build\", \"python -m build\"),\n    (\"Verify\", \"python -m twine check dist/*\"),\n    (\"Publish\", \"python -m twine upload dist/*\"),\n]\n\n# TODO: print the heading and numbered steps exactly as required:\n# Wheel Release Checklist\n# 1. Environment: python -m pip install --upgrade build twine\n# 2. Build: python -m build\n# 3. Verify: python -m twine check dist/*\n# 4. Publish: python -m twine upload dist/*\n",
      "fullSolution": "steps = [\n    (\"Environment\", \"python -m pip install --upgrade build twine\"),\n    (\"Build\", \"python -m build\"),\n    (\"Verify\", \"python -m twine check dist/*\"),\n    (\"Publish\", \"python -m twine upload dist/*\"),\n]\n\nprint(\"Wheel Release Checklist\")\nfor index, (label, command) in enumerate(steps, start=1):\n    print(f\"{index}. {label}: {command}\")\n",
      "expectedOutput": "Wheel Release Checklist\n1. Environment: python -m pip install --upgrade build twine\n2. Build: python -m build\n3. Verify: python -m twine check dist/*\n4. Publish: python -m twine upload dist/*",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Pair each stage name with the exact command so release engineers can copy and execute without guesswork.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Reminder:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">for index, step in enumerate(steps, start=1):</pre></div>",
      "tags": [
        "Advanced",
        "Tooling",
        "Control Flow",
        "Packaging"
      ]
    },
    {
      "id": 303,
      "title": "303. Mypy Strict Profile",
      "language": "python",
      "description": "Print a strict type-checking profile highlighting the most important flags.",
      "initialCode": "config = {\n    \"python_version\": \"3.12\",\n    \"disallow_untyped_defs\": True,\n    \"warn_return_any\": True,\n    \"warn_unused_ignores\": True,\n    \"plugins\": [\"pydantic.mypy\"],\n}\n\n# TODO: print the profile in the exact format:\n# Mypy Strict Profile\n# Python version: 3.12\n# Disallow untyped defs: True\n# Warn return any: True\n# Warn unused ignores: True\n# Plugins:\n# - pydantic.mypy\n",
      "fullSolution": "config = {\n    \"python_version\": \"3.12\",\n    \"disallow_untyped_defs\": True,\n    \"warn_return_any\": True,\n    \"warn_unused_ignores\": True,\n    \"plugins\": [\"pydantic.mypy\"],\n}\n\nprint(\"Mypy Strict Profile\")\nprint(f\"Python version: {config['python_version']}\")\nprint(f\"Disallow untyped defs: {config['disallow_untyped_defs']}\")\nprint(f\"Warn return any: {config['warn_return_any']}\")\nprint(f\"Warn unused ignores: {config['warn_unused_ignores']}\")\nprint(\"Plugins:\")\nfor plugin in config[\"plugins\"]:\n    print(f\"- {plugin}\")\n",
      "expectedOutput": "Mypy Strict Profile\nPython version: 3.12\nDisallow untyped defs: True\nWarn return any: True\nWarn unused ignores: True\nPlugins:\n- pydantic.mypy",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Document the strict flags so the whole team aligns on the safety net enforced by CI.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Pattern:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">print(\"Plugins:\")</pre></div>",
      "tags": [
        "Advanced",
        "Control Flow",
        "Strings",
        "CLI",
        "Type System"
      ]
    },
    {
      "id": 304,
      "title": "304. Pytest Fixture & Parametrization",
      "language": "python",
      "description": "Produce a pytest example that combines a reusable fixture with a parametrized test.",
      "initialCode": "lines = [\n    \"import pytest\",\n    \"\",\n    \"@pytest.fixture\",\n    \"def api_client():\",\n    \"    return {\\\"base_url\\\": \\\"http://localhost:8000\\\"}\",\n    \"\",\n    \"@pytest.mark.parametrize('status_code', [200, 503])\",\n    \"def test_health_check(api_client, status_code):\",\n    \"    assert status_code in (200, 503)\",\n    \"    assert api_client['base_url'].startswith('http://')\",\n]\n\n# TODO: join the lines with newlines and print the result\n",
      "fullSolution": "lines = [\n    \"import pytest\",\n    \"\",\n    \"@pytest.fixture\",\n    \"def api_client():\",\n    \"    return {\\\"base_url\\\": \\\"http://localhost:8000\\\"}\",\n    \"\",\n    \"@pytest.mark.parametrize('status_code', [200, 503])\",\n    \"def test_health_check(api_client, status_code):\",\n    \"    assert status_code in (200, 503)\",\n    \"    assert api_client['base_url'].startswith('http://')\",\n]\n\nprint(\"\\n\".join(lines))\n",
      "expectedOutput": "import pytest\n\n@pytest.fixture\ndef api_client():\n    return {\"base_url\": \"http://localhost:8000\"}\n\n@pytest.mark.parametrize('status_code', [200, 503])\ndef test_health_check(api_client, status_code):\n    assert status_code in (200, 503)\n    assert api_client['base_url'].startswith('http://')",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Show the fixture, parametrization, and assertions together so reviewers see the whole testing pattern at a glance.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">print(\"\n\".join(lines))</pre></div>",
      "tags": [
        "Advanced",
        "Functions",
        "Strings",
        "Networking",
        "Web"
      ]
    },
    {
      "id": 305,
      "title": "305. multiprocessing Pool Sum",
      "language": "python",
      "description": "Use multiprocessing.Pool to square numbers across workers and print the total.",
      "initialCode": "from multiprocessing import Pool\n\nnumbers = [1, 2, 3, 4, 5]\n\n\ndef square(value: int) -> int:\n    return value * value\n\n\nif __name__ == \"__main__\":\n    # TODO: map the square function across the numbers with a Pool and print the sum\n    pass\n",
      "fullSolution": "from multiprocessing import Pool\n\nnumbers = [1, 2, 3, 4, 5]\n\n\ndef square(value: int) -> int:\n    return value * value\n\n\nif __name__ == \"__main__\":\n    with Pool(processes=2) as pool:\n        results = pool.map(square, numbers)\n    print(sum(results))\n",
      "expectedOutput": "55",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Always guard Pool work with <code>if __name__ == \"__main__\"</code> so Windows and macOS spawn workers safely.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Reminder:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">with Pool(processes=2) as pool:</pre></div>",
      "tags": [
        "Advanced",
        "Control Flow",
        "Functions",
        "Collections",
        "Functional"
      ]
    },
    {
      "id": 306,
      "title": "306. logging.dictConfig",
      "language": "python",
      "description": "Apply a dictConfig definition and emit a log line from the deploy logger.",
      "initialCode": "import logging\nimport logging.config\n\nconfig = {\n    \"version\": 1,\n    \"disable_existing_loggers\": False,\n    \"formatters\": {\n        \"standard\": {\"format\": \"%(levelname)s:%(name)s:%(message)s\"}\n    },\n    \"handlers\": {\n        \"console\": {\n            \"class\": \"logging.StreamHandler\",\n            \"formatter\": \"standard\",\n            \"level\": \"INFO\",\n            \"stream\": \"ext://sys.stdout\",\n        }\n    },\n    \"loggers\": {\n        \"deploy\": {\n            \"handlers\": [\"console\"],\n            \"level\": \"INFO\",\n        }\n    },\n}\n\n# TODO: apply the config and log \"ready\" via the deploy logger\n",
      "fullSolution": "import logging\nimport logging.config\n\nconfig = {\n    \"version\": 1,\n    \"disable_existing_loggers\": False,\n    \"formatters\": {\n        \"standard\": {\"format\": \"%(levelname)s:%(name)s:%(message)s\"}\n    },\n    \"handlers\": {\n        \"console\": {\n            \"class\": \"logging.StreamHandler\",\n            \"formatter\": \"standard\",\n            \"level\": \"INFO\",\n            \"stream\": \"ext://sys.stdout\",\n        }\n    },\n    \"loggers\": {\n        \"deploy\": {\n            \"handlers\": [\"console\"],\n            \"level\": \"INFO\",\n        }\n    },\n}\n\nlogging.config.dictConfig(config)\nlogger = logging.getLogger(\"deploy\")\nlogger.info(\"ready\")\n",
      "expectedOutput": "INFO:deploy:ready",
      "tutorial": "<p class=\"mb-4 text-gray-300\">dictConfig lets you ship logging policy as data so ops can override handlers without code edits. Route the stream handler to stdout via <code>ext://sys.stdout</code> so automated runners capture the output.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Snippet:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">logging.config.dictConfig(config)</pre></div>",
      "tags": [
        "Advanced",
        "Tooling",
        "Strings",
        "OOP",
        "Debugging"
      ]
    },
    {
      "id": 307,
      "title": "307. typing.Annotated Summary",
      "language": "python",
      "description": "Inspect Annotated metadata with get_type_hints(include_extras=True) and report each entry.",
      "initialCode": "from typing import Annotated, get_args, get_type_hints\n\n\ndef schedule(\n    hours: Annotated[int, \"per_week\"],\n    location: Annotated[str, \"timezone\"],\n) -> Annotated[str, \"label\"]:\n    return f\"{hours}h@{location}\"\n\n\n# TODO: print the annotated summary exactly as shown:\n# Annotated Summary\n# hours -> int ['per_week']\n# location -> str ['timezone']\n# return -> str ['label']\n",
      "fullSolution": "from typing import Annotated, get_args, get_type_hints\n\n\ndef schedule(\n    hours: Annotated[int, \"per_week\"],\n    location: Annotated[str, \"timezone\"],\n) -> Annotated[str, \"label\"]:\n    return f\"{hours}h@{location}\"\n\n\ndef describe(name: str, annotated):\n    base, *meta = get_args(annotated)\n    print(f\"{name} -> {base.__name__} {meta}\")\n\nprint(\"Annotated Summary\")\nfor field in (\"hours\", \"location\", \"return\"):\n    describe(field, get_type_hints(schedule, include_extras=True)[field])\n",
      "expectedOutput": "Annotated Summary\nhours -> int ['per_week']\nlocation -> str ['timezone']\nreturn -> str ['label']",
      "tutorial": "<p class=\"mb-4 text-gray-300\">include_extras keeps the metadata attached to Annotated types, which is invaluable for validators and documentation generators.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Pattern:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">base, *meta = get_args(annotated)</pre></div>",
      "tags": [
        "Advanced",
        "Control Flow",
        "Functions",
        "Type System",
        "Date/Time"
      ]
    },
    {
      "id": 308,
      "title": "308. typing.Self Fluent Builder",
      "language": "python",
      "description": "Use typing.Self to build a chainable QueryBuilder and print the combined clauses.",
      "initialCode": "from typing import TypeVar, List\n\ntry:\n    from typing import Self\nexcept ImportError:  # Python < 3.11\n    Self = TypeVar(\"Self\")  # type: ignore[misc]\n\nclass QueryBuilder:\n    def __init__(self) -> None:\n        self.clauses: List[str] = []\n\n    def where(self, clause: str) -> Self:\n        # TODO: append clause and return self to enable fluent chaining\n        pass\n\n    def build(self) -> str:\n        return \" AND \".join(self.clauses)\n\nbuilder = QueryBuilder()\n# TODO: chain two where() calls (status and retries) and print builder.build()\n",
      "fullSolution": "from typing import TypeVar, List\n\ntry:\n    from typing import Self\nexcept ImportError:  # Python < 3.11\n    Self = TypeVar(\"Self\")  # type: ignore[misc]\n\nclass QueryBuilder:\n    def __init__(self) -> None:\n        self.clauses: List[str] = []\n\n    def where(self, clause: str) -> Self:\n        self.clauses.append(clause)\n        return self\n\n    def build(self) -> str:\n        return \" AND \".join(self.clauses)\n\nbuilder = QueryBuilder()\nquery = builder.where(\"status = 'active'\").where(\"retries < 5\").build()\nprint(query)\n",
      "expectedOutput": "status = 'active' AND retries < 5",
      "tutorial": "<p class=\"mb-4 text-gray-300\">typing.Self keeps fluent APIs type-safe (fall back to a TypeVar on Python &lt; 3.11). Each call returns the builder instance so chains preserve the concrete subtype.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">builder.where(...).where(...)</pre></div>",
      "tags": [
        "Advanced",
        "Functions",
        "Strings",
        "Collections",
        "Databases"
      ]
    },
    {
      "id": 309,
      "title": "309. graphlib.TopologicalSorter Deployment",
      "language": "python",
      "description": "Resolve deployment dependencies with graphlib.TopologicalSorter and print the order.",
      "initialCode": "from graphlib import TopologicalSorter\n\ndependencies = {\n    \"db\": set(),\n    \"migrate\": {\"db\"},\n    \"seed\": {\"migrate\"},\n    \"deploy\": {\"seed\"},\n    \"notify\": {\"deploy\"},\n}\n\n# TODO: compute the execution order with TopologicalSorter and print it joined by '->'\n",
      "fullSolution": "from graphlib import TopologicalSorter\n\ndependencies = {\n    \"db\": set(),\n    \"migrate\": {\"db\"},\n    \"seed\": {\"migrate\"},\n    \"deploy\": {\"seed\"},\n    \"notify\": {\"deploy\"},\n}\n\norder = list(TopologicalSorter(dependencies).static_order())\nprint(\"->\".join(order))\n",
      "expectedOutput": "db->migrate->seed->deploy->notify",
      "tutorial": "<p class=\"mb-4 text-gray-300\">TopologicalSorter turns dependency graphs into safe execution orders so migrations run before deploys.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">order = TopologicalSorter(graph).static_order()</pre></div>",
      "tags": [
        "Advanced",
        "Strings",
        "Collections",
        "Algorithms",
        "Packaging"
      ]
    },
    {
      "id": 310,
      "title": "310. memoryview Bytearray Update",
      "language": "python",
      "description": "Modify a bytearray in-place via memoryview and print the updated ASCII string.",
      "initialCode": "data = bytearray(b\"metrics:000\")\nview = memoryview(data)\n\n# TODO: replace the last three bytes with b\"123\" using the memoryview and print data decoded as ASCII\n",
      "fullSolution": "data = bytearray(b\"metrics:000\")\nview = memoryview(data)\n\nview[-3:] = b\"123\"\nprint(data.decode(\"ascii\"))\n",
      "expectedOutput": "metrics:123",
      "tutorial": "<p class=\"mb-4 text-gray-300\">memoryview lets you update binary data without copying; slices write directly into the original buffer.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">buf = bytearray(b'abc')\nview = memoryview(buf)\nview[0:2] = b'XY'</pre></div>",
      "tags": [
        "Advanced",
        "Web"
      ]
    },
    {
      "id": 311,
      "title": "311. asyncio.start_server echo",
      "language": "python",
      "description": "Spin up an in-process TCP server that uppercases input, send a message, and print the response.",
      "initialCode": "import asyncio\n\nasync def handle(reader, writer):\n    data = await reader.read(100)\n    # TODO: respond with the data uppercased, flush, then close the connection\n    pass\n\nasync def main():\n    server = await asyncio.start_server(handle, \"127.0.0.1\", 0)\n    addr = server.sockets[0].getsockname()\n    async with server:\n        reader, writer = await asyncio.open_connection(*addr)\n        writer.write(b\"devboot\")\n        await writer.drain()\n        data = await reader.read(100)\n        writer.close()\n        await writer.wait_closed()\n    print(data.decode())\n\nasyncio.run(main())\n",
      "fullSolution": "import asyncio\n\nasync def handle(reader, writer):\n    data = await reader.read(100)\n    writer.write(data.upper())\n    await writer.drain()\n    writer.close()\n    await writer.wait_closed()\n\nasync def main():\n    server = await asyncio.start_server(handle, \"127.0.0.1\", 0)\n    addr = server.sockets[0].getsockname()\n    async with server:\n        reader, writer = await asyncio.open_connection(*addr)\n        writer.write(b\"devboot\")\n        await writer.drain()\n        data = await reader.read(100)\n        writer.close()\n        await writer.wait_closed()\n    print(data.decode())\n\nasyncio.run(main())\n",
      "expectedOutput": "DEVBOOT",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Use <code>asyncio.start_server</code> to host lightweight TCP services inside tests. Pair it with <code>asyncio.open_connection</code> to exercise the handshake without leaving the event loop.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Pattern:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">server = await asyncio.start_server(handler, '127.0.0.1', 0)\nasync with server:\n    reader, writer = await asyncio.open_connection(*server.sockets[0].getsockname())</pre></div>",
      "tags": [
        "Advanced",
        "Functions",
        "I/O",
        "Networking",
        "Async"
      ]
    },
    {
      "id": 312,
      "title": "312. tomllib.loads config",
      "language": "python",
      "description": "Parse TOML text and report selected settings.",
      "initialCode": "import tomllib\n\ntext = \"\"\"\n[tool.app]\ndebug = false\nworkers = 3\n\"\"\"\n\n# TODO: parse the TOML text and print workers:<value> then debug:<value>\n",
      "fullSolution": "import tomllib\n\ntext = \"\"\"\n[tool.app]\ndebug = false\nworkers = 3\n\"\"\"\n\ndata = tomllib.loads(text)\napp = data['tool']['app']\nprint(f\"workers:{app['workers']}\")\nprint(f\"debug:{app['debug']}\")\n",
      "expectedOutput": "workers:3\ndebug:False",
      "tutorial": "<p class=\"mb-4 text-gray-300\"><code>tomllib</code> (Python 3.11+) parses pyproject-style TOML without third-party deps. Load once, then dig into nested tables just like dicts.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">config = tomllib.loads('[service]\nport = 8000')\nprint(config['service']['port'])</pre></div>",
      "tags": [
        "Advanced",
        "Tooling",
        "Serialization",
        "Debugging",
        "Parsing"
      ]
    },
    {
      "id": 313,
      "title": "313. tarfile BytesIO archive",
      "language": "python",
      "description": "Package files into a tar archive in memory and list their names.",
      "initialCode": "import io\nimport tarfile\n\nbuffer = io.BytesIO()\nwith tarfile.open(fileobj=buffer, mode=\"w\") as tar:\n    for name, content in [(\"a.txt\", \"A\"), (\"b.txt\", \"B\")]:\n        data = content.encode(\"utf-8\")\n        info = tarfile.TarInfo(name)\n        info.size = len(data)\n        # TODO: add the file with its bytes to the archive\n        pass\n\n# TODO: seek to the beginning, reopen for reading, gather names, and print them joined by commas\n",
      "fullSolution": "import io\nimport tarfile\n\nbuffer = io.BytesIO()\nwith tarfile.open(fileobj=buffer, mode=\"w\") as tar:\n    for name, content in [(\"a.txt\", \"A\"), (\"b.txt\", \"B\")]:\n        data = content.encode(\"utf-8\")\n        info = tarfile.TarInfo(name)\n        info.size = len(data)\n        tar.addfile(info, io.BytesIO(data))\n\nbuffer.seek(0)\nwith tarfile.open(fileobj=buffer, mode=\"r\") as tar:\n    names = sorted(tar.getnames())\nprint(\",\".join(names))\n",
      "expectedOutput": "a.txt,b.txt",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Combine <code>tarfile</code> with <code>io.BytesIO</code> to build release artifacts without touching disk. Always rewind the buffer before reopening.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">buf = io.BytesIO()\nwith tarfile.open(fileobj=buf, mode='w') as tar:\n    ...\nbuf.seek(0)</pre></div>",
      "tags": [
        "Advanced",
        "Control Flow",
        "Strings",
        "Collections",
        "Algorithms"
      ]
    },
    {
      "id": 314,
      "title": "314. pickle round-trip",
      "language": "python",
      "description": "Serialize and deserialize a nested object with pickle.",
      "initialCode": "import pickle\n\ndata = {\"name\": \"Ada\", \"skills\": [\"logic\", \"math\"]}\n\n# TODO: pickle the object to bytes, unpickle it, then print the second skill\n",
      "fullSolution": "import pickle\n\ndata = {\"name\": \"Ada\", \"skills\": [\"logic\", \"math\"]}\n\npayload = pickle.dumps(data)\nrestored = pickle.loads(payload)\nprint(restored[\"skills\"][1])\n",
      "expectedOutput": "math",
      "tutorial": "<p class=\"mb-4 text-gray-300\"><code>pickle</code> turns Python objects into bytes for caching or IPC. Only load trusted data; pickle executes arbitrary code.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Snippet:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">payload = pickle.dumps(obj)\nobj = pickle.loads(payload)</pre></div>",
      "tags": [
        "Advanced",
        "Control Flow",
        "OOP",
        "Math and Stats",
        "Serialization"
      ]
    },
    {
      "id": 315,
      "title": "315. importlib.resources.read",
      "language": "python",
      "description": "Load a packaged resource using importlib.resources.files.",
      "initialCode": "import importlib.resources\nimport sys\nimport tempfile\nfrom pathlib import Path\n\nwith tempfile.TemporaryDirectory() as tmp:\n    root = Path(tmp)\n    pkg = root / \"assets\"\n    pkg.mkdir()\n    (pkg / \"__init__.py\").write_text(\"\")\n    (pkg / \"banner.txt\").write_text(\"Launch Ready\\n\", encoding=\"utf-8\")\n    sys.path.insert(0, str(root))\n    try:\n        # TODO: import the package and print banner.txt stripped via importlib.resources.files\n        pass\n    finally:\n        sys.path.remove(str(root))\n",
      "fullSolution": "import importlib.resources\nimport sys\nimport tempfile\nfrom pathlib import Path\n\nwith tempfile.TemporaryDirectory() as tmp:\n    root = Path(tmp)\n    pkg = root / \"assets\"\n    pkg.mkdir()\n    (pkg / \"__init__.py\").write_text(\"\")\n    (pkg / \"banner.txt\").write_text(\"Launch Ready\\n\", encoding=\"utf-8\")\n    sys.path.insert(0, str(root))\n    try:\n        assets = __import__(\"assets\")\n        text = importlib.resources.files(assets).joinpath(\"banner.txt\").read_text(encoding=\"utf-8\").strip()\n        print(text)\n    finally:\n        sys.path.remove(str(root))\n",
      "expectedOutput": "Launch Ready",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Ship templates or migrations alongside code and load them with <code>importlib.resources.files()</code>. Temporarily add the package to <code>sys.path</code> when synthesizing fixtures in tests.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">text = importlib.resources.files(pkg).joinpath('schema.sql').read_text()</pre></div>",
      "tags": [
        "Advanced",
        "Strings",
        "I/O",
        "Web",
        "Databases"
      ]
    },
    {
      "id": 316,
      "title": "316. collections.ChainMap overrides",
      "language": "python",
      "description": "Layer override settings on top of defaults with ChainMap.",
      "initialCode": "from collections import ChainMap\n\ndefaults = {\"timeout\": 30, \"region\": \"us-east-1\"}\noverrides = {\"timeout\": 10}\n\n# TODO: combine the mappings so overrides win, then print timeout and region on separate lines\n",
      "fullSolution": "from collections import ChainMap\n\ndefaults = {\"timeout\": 30, \"region\": \"us-east-1\"}\noverrides = {\"timeout\": 10}\n\nsettings = ChainMap(overrides, defaults)\nprint(settings[\"timeout\"])\nprint(settings[\"region\"])\n",
      "expectedOutput": "10\nus-east-1",
      "tutorial": "<p class=\"mb-4 text-gray-300\"><code>ChainMap</code> lets you layer configuration sources without copying dictionaries. Lookups walk each mapping until a key is found.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">config = ChainMap(env_overrides, defaults)\nprint(config['timeout'])</pre></div>",
      "tags": [
        "Advanced",
        "Collections",
        "Functional"
      ]
    },
    {
      "id": 317,
      "title": "317. statistics.quantiles",
      "language": "python",
      "description": "Compute quartiles for latency data and report the 25th and 75th percentiles.",
      "initialCode": "import statistics\n\ndata = [5, 2, 8, 4, 9, 1]\n\n# TODO: compute inclusive quartiles and print the first and third separated by a comma\n",
      "fullSolution": "import statistics\n\ndata = [5, 2, 8, 4, 9, 1]\n\nq1, _, q3 = statistics.quantiles(data, n=4, method=\"inclusive\")\nprint(f\"{q1},{q3}\")\n",
      "expectedOutput": "2.5,7.25",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Quartiles show distribution spread. Use <code>method=&quot;inclusive&quot;</code> to match Excel-style percentiles when sample sizes are small.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Snippet:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">q1, q2, q3 = statistics.quantiles(data, n=4, method='inclusive')</pre></div>",
      "tags": [
        "Advanced",
        "Control Flow",
        "Functions",
        "Math and Stats",
        "Packaging"
      ]
    },
    {
      "id": 318,
      "title": "318. urllib.request Query Builder",
      "language": "python",
      "description": "Build a GET request with encoded query parameters and a JSON Accept header.",
      "initialCode": "from urllib import parse, request\n\nBASE_URL = \"https://status.example/api/report\"\nparams = {\n    \"service\": \"billing\",\n    \"env\": \"prod\",\n    \"summary\": \"1\",\n}\n\n# TODO: build a Request with the query string and an Accept: application/json header.\n# Print the request URL, method, then the Accept header value (each on its own line).\n",
      "fullSolution": "from urllib import parse, request\n\nBASE_URL = \"https://status.example/api/report\"\nparams = {\n    \"service\": \"billing\",\n    \"env\": \"prod\",\n    \"summary\": \"1\",\n}\n\nquery = parse.urlencode(params)\nreq = request.Request(\n    f\"{BASE_URL}?{query}\",\n    headers={\"Accept\": \"application/json\"},\n    method=\"GET\",\n)\n\nprint(req.full_url)\nprint(req.get_method())\nprint(req.get_header(\"Accept\"))\n",
      "expectedOutput": "https://status.example/api/report?service=billing&env=prod&summary=1\nGET\napplication/json",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Use urllib.parse.urlencode to build the query string, then feed it into a Request with headers set via the builder arguments.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Pattern:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">req = request.Request(url, headers={\"Accept\": \"application/json\"}, method=\"GET\")</pre></div>",
      "tags": [
        "Advanced",
        "Functions",
        "Collections",
        "Serialization",
        "Networking"
      ]
    },
    {
      "id": 319,
      "title": "319. zoneinfo Multi-Zone Timestamp",
      "language": "python",
      "description": "Convert a UTC datetime into several time zones using zoneinfo.",
      "initialCode": "from datetime import datetime\nfrom zoneinfo import ZoneInfo\n\nmeeting = datetime(2025, 4, 3, 15, 30, tzinfo=ZoneInfo(\"UTC\"))\nzones = [\"America/Los_Angeles\", \"Europe/Berlin\", \"Asia/Tokyo\"]\n\n# TODO: for each zone in zones, convert meeting and print \"<zone>: <isoformat>\".\n# isoformat should include the offset from UTC.\n",
      "fullSolution": "from datetime import datetime\nfrom zoneinfo import ZoneInfo\n\nmeeting = datetime(2025, 4, 3, 15, 30, tzinfo=ZoneInfo(\"UTC\"))\nzones = [\"America/Los_Angeles\", \"Europe/Berlin\", \"Asia/Tokyo\"]\n\nfor zone_name in zones:\n    zoned = meeting.astimezone(ZoneInfo(zone_name))\n    print(f\"{zone_name}: {zoned.isoformat()}\")\n",
      "expectedOutput": "America/Los_Angeles: 2025-04-03T08:30:00-07:00\nEurope/Berlin: 2025-04-03T17:30:00+02:00\nAsia/Tokyo: 2025-04-04T00:30:00+09:00",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Give your datetime an explicit timezone, then use astimezone with ZoneInfo to produce localized timestamps.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">meeting.astimezone(ZoneInfo(\"America/New_York\")).isoformat()</pre></div>",
      "tags": [
        "Advanced",
        "Control Flow",
        "Date/Time"
      ]
    },
    {
      "id": 320,
      "title": "320. shared_memory ShareableList Update",
      "language": "python",
      "description": "Attach to an existing shared memory segment by name and mutate the values.",
      "initialCode": "from multiprocessing import shared_memory\n\nseed = shared_memory.ShareableList([14, 17, 21])\nSHM_NAME = seed.shm.name\nseed.shm.close()\n\n# TODO: attach to the shared segment by name,\n# increment each element by 1, print the resulting list,\n# then close and unlink the shared segment.\n",
      "fullSolution": "from multiprocessing import shared_memory\n\nseed = shared_memory.ShareableList([14, 17, 21])\nSHM_NAME = seed.shm.name\nseed.shm.close()\ndel seed\n\nmetrics = shared_memory.ShareableList(name=SHM_NAME)\ntry:\n    for idx in range(len(metrics)):\n        metrics[idx] += 1\n    print(list(metrics))\nfinally:\n    metrics.shm.close()\n    metrics.shm.unlink()\n",
      "expectedOutput": "[15, 18, 22]",
      "tutorial": "<p class=\"mb-4 text-gray-300\">ShareableList can be re-attached in another context by name. Remember to close and unlink once all processes are finished.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Pattern:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">shared = shared_memory.ShareableList(name=name)\nshared[i] += 1\nshared.shm.close(); shared.shm.unlink()</pre></div>",
      "tags": [
        "Advanced",
        "Control Flow",
        "Collections"
      ]
    },
    {
      "id": 321,
      "title": "321. match message router",
      "language": "python",
      "description": "Use structural pattern matching to route tuple-based messages and handle retries differently for server errors.",
      "initialCode": "def handle(message):\n    # TODO: pattern-match on (kind, payload) tuples\n    pass\n\nmessages = [\n    (\"ok\", 200),\n    (\"error\", {\"code\": 404}),\n    (\"error\", {\"code\": 503, \"retry\": True}),\n]\n\nfor message in messages:\n    print(handle(message))\n",
      "fullSolution": "def handle(message):\n    match message:\n        case (\"ok\", value):\n            return f\"OK:{value}\"\n        case (\"error\", {\"code\": code}) if code >= 500:\n            return f\"CRITICAL:{code}\"\n        case (\"error\", {\"code\": code}):\n            return f\"ERROR:{code}\"\n        case _:\n            return \"UNKNOWN\"\n\nmessages = [\n    (\"ok\", 200),\n    (\"error\", {\"code\": 404}),\n    (\"error\", {\"code\": 503, \"retry\": True}),\n]\n\nfor message in messages:\n    print(handle(message))\n",
      "expectedOutput": "OK:200\nERROR:404\nCRITICAL:503",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Structural pattern matching describes the shape of data directly. Match tuples, mappings, and even enforce extra conditions with guards.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Pattern:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">match message:\n    case (\"error\", {\"code\": code}) if code &gt;= 500:\n        alert(code)</pre></div>",
      "tags": [
        "Intermediate",
        "Control Flow",
        "Type System"
      ]
    },
    {
      "id": 322,
      "title": "322. match class patterns",
      "language": "python",
      "description": "Dispatch dataclass command objects with class patterns and guards, emitting an audit line for each event.",
      "initialCode": "from dataclasses import dataclass\n\n@dataclass\nclass CreateUser:\n    name: str\n    role: str\n\n@dataclass\nclass DeleteUser:\n    id: int\n\n# TODO: implement audit(event) using match/case\n# Create events and print audit(event) for each\n",
      "fullSolution": "from dataclasses import dataclass\n\n@dataclass\nclass CreateUser:\n    name: str\n    role: str\n\n@dataclass\nclass DeleteUser:\n    id: int\n\ndef audit(event):\n    match event:\n        case CreateUser(name=name, role=\"admin\"):\n            return f\"flag admin signup: {name}\"\n        case CreateUser(name=name, role=role):\n            return f\"create {role}: {name}\"\n        case DeleteUser(id=ident):\n            return f\"delete {ident}\"\n        case _:\n            return \"ignore\"\n\nfor evt in [\n    CreateUser(\"Ada\", \"admin\"),\n    CreateUser(\"Bob\", \"guest\"),\n    DeleteUser(42),\n]:\n    print(audit(evt))\n",
      "expectedOutput": "flag admin signup: Ada\ncreate guest: Bob\ndelete 42",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Class patterns bind attributes directly, keeping dispatch code declarative. Use guards to single out sensitive combinations.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">match event:\n    case CreateUser(role=\"admin\") as create:\n        log(create.name)</pre></div>",
      "tags": [
        "Advanced",
        "Control Flow",
        "OOP"
      ]
    },
    {
      "id": 323,
      "title": "323. asyncio timeout guard",
      "language": "python",
      "description": "Use asyncio.timeout to cancel a slow coroutine after 50 milliseconds and print a fallback.",
      "initialCode": "import asyncio\n\nasync def fetch(delay):\n    await asyncio.sleep(delay)\n    return f\"fetched in {delay:.2f}s\"\n\nasync def main():\n    # TODO: run fetch(0.1) inside a 0.05s timeout\n    # Print the result if it finishes, otherwise print \"timed out\"\n    pass\n\nasyncio.run(main())\n",
      "fullSolution": "import asyncio\n\nasync def fetch(delay):\n    await asyncio.sleep(delay)\n    return f\"fetched in {delay:.2f}s\"\n\nasync def main():\n    try:\n        async with asyncio.timeout(0.05):\n            result = await fetch(0.1)\n            print(result)\n    except TimeoutError:\n        print(\"timed out\")\n\nasyncio.run(main())\n",
      "expectedOutput": "timed out",
      "tutorial": "<p class=\"mb-4 text-gray-300\">asyncio.timeout(seconds) warps the enclosed awaited code with a deadline. When the budget expires it raises TimeoutError, so you can recover with retries or fallbacks.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Pattern:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">async with asyncio.timeout(0.05):\n    await work()\n</pre></div><p class=\"mt-4 text-gray-300\">Combine this with TaskGroup or gather to keep cascaded calls from hanging an entire request.</p>",
      "tags": [
        "Advanced",
        "Concurrency",
        "Async"
      ]
    },
    {
      "id": 324,
      "title": "324. asyncio TaskGroup fan-out",
      "language": "python",
      "description": "Use asyncio.TaskGroup to fetch primary and replica concurrently, printing their results once both finish.",
      "initialCode": "import asyncio\n\nasync def fetch(name, delay):\n    await asyncio.sleep(delay)\n    return f\"{name} in {delay:.2f}s\"\n\nasync def main():\n    # TODO: launch fetch(\"primary\", 0.08) and fetch(\"replica\", 0.02) inside a TaskGroup\n    # After the group completes, print the primary result then the replica result.\n    pass\n\nasyncio.run(main())\n",
      "fullSolution": "import asyncio\n\nasync def fetch(name, delay):\n    await asyncio.sleep(delay)\n    return f\"{name} in {delay:.2f}s\"\n\nasync def main():\n    async with asyncio.TaskGroup() as tg:\n        primary = tg.create_task(fetch(\"primary\", 0.08))\n        replica = tg.create_task(fetch(\"replica\", 0.02))\n    print(primary.result())\n    print(replica.result())\n\nasyncio.run(main())\n",
      "expectedOutput": "primary in 0.08s\nreplica in 0.02s",
      "tutorial": "<p class=\"mb-4 text-gray-300\">TaskGroup waits for every child coroutine and cancels siblings if any fail. Create tasks inside the context and read their results once the block exits.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Pattern:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">async with asyncio.TaskGroup() as tg:\n    task = tg.create_task(work())\nprint(task.result())</pre></div><p class=\"mt-4 text-gray-300\">This keeps concurrent branches tidy without manual bookkeeping or cancellation code.</p>",
      "tags": [
        "Advanced",
        "Concurrency",
        "Async"
      ]
    },
    {
      "id": 325,
      "title": "325. asyncio Semaphore concurrency cap",
      "language": "python",
      "description": "Limit concurrent crawlers with asyncio.Semaphore and report each completion as soon as it happens.",
      "initialCode": "import asyncio\n\nasync def crawl(name, delay, limiter):\n    async with limiter:\n        await asyncio.sleep(delay)\n        return f\"{name} done after {delay:.2f}s\"\n\nasync def main():\n    limiter = asyncio.Semaphore(2)\n    jobs = [\n        (\"alpha\", 0.05),\n        (\"beta\", 0.10),\n        (\"gamma\", 0.02),\n    ]\n    # TODO: schedule crawls for each job while respecting the semaphore limit\n    # Print each result as soon as its task finishes.\n    pass\n\nasyncio.run(main())\n",
      "fullSolution": "import asyncio\n\nasync def crawl(name, delay, limiter):\n    async with limiter:\n        await asyncio.sleep(delay)\n        return f\"{name} done after {delay:.2f}s\"\n\nasync def main():\n    limiter = asyncio.Semaphore(2)\n    jobs = [\n        (\"alpha\", 0.05),\n        (\"beta\", 0.10),\n        (\"gamma\", 0.02),\n    ]\n    tasks = [\n        asyncio.create_task(crawl(name, delay, limiter))\n        for name, delay in jobs\n    ]\n    for task in asyncio.as_completed(tasks):\n        print(await task)\n\nasyncio.run(main())\n",
      "expectedOutput": "alpha done after 0.05s\ngamma done after 0.02s\nbeta done after 0.10s",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Semaphores bound how many coroutines may enter a critical section at once. Because only two crawlers run concurrently here, the shorter gamma crawl waits its turn.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Pattern:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">limiter = asyncio.Semaphore(permits)\ntasks = [asyncio.create_task(job(limiter)) for job in jobs]\nfor task in asyncio.as_completed(tasks):\n    print(await task)</pre></div><p class=\"mt-4 text-gray-300\">This pattern keeps upstream services safe while still keeping the event loop busy.</p>",
      "tags": [
        "Advanced",
        "Concurrency",
        "Async"
      ]
    },
    {
      "id": 326,
      "title": "326. contextvars request propagation",
      "language": "python",
      "description": "Propagate a request id through asyncio tasks using contextvars and print each worker's view.",
      "initialCode": "import asyncio\nimport contextvars\n\nrequest_id = contextvars.ContextVar(\"request_id\")\n\nasync def handle(name, delay):\n    await asyncio.sleep(delay)\n    return f\"{name} -> {request_id.get()}\"\n\nasync def main():\n    request_id.set(\"req-42\")\n    specs = [\n        (\"worker-1\", 0.03),\n        (\"worker-2\", 0.01),\n        (\"worker-3\", 0.05),\n    ]\n    # TODO: create tasks so each coroutine sees the same request id\n    # Print each result in completion order.\n    pass\n\nasyncio.run(main())\n",
      "fullSolution": "import asyncio\nimport contextvars\n\nrequest_id = contextvars.ContextVar(\"request_id\")\n\nasync def handle(name, delay):\n    await asyncio.sleep(delay)\n    return f\"{name} -> {request_id.get()}\"\n\nasync def main():\n    request_id.set(\"req-42\")\n    specs = [\n        (\"worker-1\", 0.03),\n        (\"worker-2\", 0.01),\n        (\"worker-3\", 0.05),\n    ]\n    tasks = [\n        asyncio.create_task(handle(name, delay))\n        for name, delay in specs\n    ]\n    for task in asyncio.as_completed(tasks):\n        print(await task)\n\nasyncio.run(main())\n",
      "expectedOutput": "worker-2 -> req-42\nworker-1 -> req-42\nworker-3 -> req-42",
      "tutorial": "<p class=\"mb-4 text-gray-300\">contextvars store request-scoped state that automatically flows into new asyncio tasks. Set the value before you schedule work, then read it inside each coroutine.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Pattern:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">token = var.set(value)\ntry:\n    await work()\nfinally:\n    var.reset(token)</pre></div><p class=\"mt-4 text-gray-300\">Reset with the token when leaving the scope if you need to restore the previous value.</p>",
      "tags": [
        "Advanced",
        "Concurrency",
        "Async"
      ]
    },
    {
      "id": 327,
      "title": "327. asyncio.shield resilient result",
      "language": "python",
      "description": "Protect a long-running coroutine from cancellation using asyncio.shield inside a timeout and await its eventual result.",
      "initialCode": "import asyncio\n\nasync def fetch():\n    await asyncio.sleep(0.1)\n    return \"report ready\"\n\nasync def main():\n    task = asyncio.create_task(fetch())\n    try:\n        # TODO: await the task with a 0.05 second timeout using asyncio.wait_for\n        # Wrap the task with asyncio.shield so it keeps running if the timeout expires\n        pass\n    except asyncio.TimeoutError:\n        # TODO: print \"timeout, waiting\" then await the task and print its result\n        pass\n\nasyncio.run(main())\n",
      "fullSolution": "import asyncio\n\nasync def fetch():\n    await asyncio.sleep(0.1)\n    return \"report ready\"\n\nasync def main():\n    task = asyncio.create_task(fetch())\n    try:\n        await asyncio.wait_for(asyncio.shield(task), 0.05)\n    except asyncio.TimeoutError:\n        print(\"timeout, waiting\")\n        print(await task)\n\nasyncio.run(main())\n",
      "expectedOutput": "timeout, waiting\nreport ready",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Wrap a task with <code>asyncio.shield()</code> before applying a timeout to keep the underlying coroutine alive. Even if <code>wait_for</code> times out, the shielded task continues and you can await it later for the real result.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Pattern:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">task = asyncio.create_task(work())\ntry:\n    await asyncio.wait_for(asyncio.shield(task), limit)\nexcept asyncio.TimeoutError:\n    result = await task</pre></div><p class=\"mt-4 text-gray-300\">This is handy for background retries or fallbacks where you still want the answer once it finally arrives.</p>",
      "tags": [
        "Advanced",
        "Concurrency",
        "Async"
      ]
    },
    {
      "id": 328,
      "title": "328. asyncio.Event handoff",
      "language": "python",
      "description": "Coordinate a producer and consumer coroutine with asyncio.Event, printing progress as the signal changes.",
      "initialCode": "import asyncio\n\nasync def consumer(signal):\n    print(\"waiting for release\")\n    await signal.wait()\n    print(\"released\")\n\nasync def producer(signal):\n    await asyncio.sleep(0.03)\n    print(\"event set\")\n    signal.set()\n\nasync def main():\n    signal = asyncio.Event()\n    # TODO: run consumer(signal) and producer(signal) concurrently and wait for both to finish\n    pass\n\nasyncio.run(main())\n",
      "fullSolution": "import asyncio\n\nasync def consumer(signal):\n    print(\"waiting for release\")\n    await signal.wait()\n    print(\"released\")\n\nasync def producer(signal):\n    await asyncio.sleep(0.03)\n    print(\"event set\")\n    signal.set()\n\nasync def main():\n    signal = asyncio.Event()\n    await asyncio.gather(consumer(signal), producer(signal))\n\nasyncio.run(main())\n",
      "expectedOutput": "waiting for release\nevent set\nreleased",
      "tutorial": "<p class=\"mb-4 text-gray-300\">An <code>asyncio.Event</code> starts cleared; <code>wait()</code> pauses until some other coroutine calls <code>set()</code>. Pair a waiting consumer with a producer that flips the latch to choreograph hand-offs.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Pattern:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">signal = asyncio.Event()\nawait asyncio.gather(consumer(signal), producer(signal))</pre></div><p class=\"mt-4 text-gray-300\">Reset with <code>clear()</code> if you need to reuse the event for multiple phases.</p>",
      "tags": [
        "Advanced",
        "Concurrency",
        "Async"
      ]
    },
    {
      "id": 329,
      "title": "329. asyncio.to_thread offload",
      "language": "python",
      "description": "Offload a blocking function to a worker thread with asyncio.to_thread so the event loop stays responsive.",
      "initialCode": "import asyncio\nimport time\n\ndef crunch():\n    time.sleep(0.05)\n    return \"report ready\"\n\nasync def main():\n    print(\"starting\")\n    # TODO: run crunch() without blocking the event loop and print its return value\n    pass\n\nasyncio.run(main())\n",
      "fullSolution": "import asyncio\nimport time\n\ndef crunch():\n    time.sleep(0.05)\n    return \"report ready\"\n\nasync def main():\n    print(\"starting\")\n    result = await asyncio.to_thread(crunch)\n    print(result)\n\nasyncio.run(main())\n",
      "expectedOutput": "starting\nreport ready",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Use <code>asyncio.to_thread()</code> when you need to call a blocking function from async code. The work runs in a separate thread but you await it like any coroutine.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Pattern:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">result = await asyncio.to_thread(blocking_call)</pre></div><p class=\"mt-4 text-gray-300\">This is ideal for CPU-light wrappers around legacy libraries that have not embraced asyncio yet.</p>",
      "tags": [
        "Advanced",
        "Concurrency",
        "Async"
      ]
    },
    {
      "id": 330,
      "title": "330. asyncio.wait first completed",
      "language": "python",
      "description": "Race primary and replica coroutines with asyncio.wait and cancel the loser once the first result arrives.",
      "initialCode": "import asyncio\n\nasync def fetch(name, delay):\n    await asyncio.sleep(delay)\n    return f\"{name} ready\"\n\nasync def main():\n    tasks = {\n        asyncio.create_task(fetch(\"primary\", 0.08)),\n        asyncio.create_task(fetch(\"replica\", 0.02)),\n    }\n    # TODO: wait for the first task to finish using asyncio.wait with FIRST_COMPLETED\n    # Print the winning result, cancel the remaining tasks, and wait for their cancellation to settle.\n    pass\n\nasyncio.run(main())\n",
      "fullSolution": "import asyncio\n\nasync def fetch(name, delay):\n    await asyncio.sleep(delay)\n    return f\"{name} ready\"\n\nasync def main():\n    tasks = {\n        asyncio.create_task(fetch(\"primary\", 0.08)),\n        asyncio.create_task(fetch(\"replica\", 0.02)),\n    }\n    done, pending = await asyncio.wait(tasks, return_when=asyncio.FIRST_COMPLETED)\n    winner = done.pop()\n    print(await winner)\n    for task in pending:\n        task.cancel()\n    await asyncio.gather(*pending, return_exceptions=True)\n\nasyncio.run(main())\n",
      "expectedOutput": "replica ready",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Use <code>asyncio.wait(..., return_when=FIRST_COMPLETED)</code> to watch a set of tasks and act as soon as one produces a result. Cancel any unfinished tasks and await them with <code>gather</code> so cancellation errors do not leak.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Pattern:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">done, pending = await asyncio.wait(tasks, return_when=asyncio.FIRST_COMPLETED)\nresult = await done.pop()\nfor task in pending:\n    task.cancel()\nawait asyncio.gather(*pending, return_exceptions=True)</pre></div>",
      "tags": [
        "Advanced",
        "Concurrency",
        "Async"
      ]
    },
    {
      "id": 331,
      "title": "331. asyncio.Lock critical section",
      "language": "python",
      "description": "Serialize balance updates with asyncio.Lock so concurrent tasks modify shared state safely.",
      "initialCode": "import asyncio\n\nasync def apply(name, delta, delay, lock, balance):\n    await asyncio.sleep(delay)\n    # TODO: use the lock to ensure only one coroutine updates balance[\"value\"] at a time\n    # After applying the delta, print \"{name} applied, balance=<value>\"\n\nasync def main():\n    lock = asyncio.Lock()\n    balance = {\"value\": 0}\n    await asyncio.gather(\n        apply(\"fee\", -5, 0.00, lock, balance),\n        apply(\"bonus\", 25, 0.01, lock, balance),\n        apply(\"deposit\", 30, 0.02, lock, balance),\n    )\n    print(f\"balance: {balance['value']}\")\n\nasyncio.run(main())\n",
      "fullSolution": "import asyncio\n\nasync def apply(name, delta, delay, lock, balance):\n    await asyncio.sleep(delay)\n    async with lock:\n        balance[\"value\"] += delta\n        print(f\"{name} applied, balance={balance['value']}\")\n\nasync def main():\n    lock = asyncio.Lock()\n    balance = {\"value\": 0}\n    await asyncio.gather(\n        apply(\"fee\", -5, 0.00, lock, balance),\n        apply(\"bonus\", 25, 0.01, lock, balance),\n        apply(\"deposit\", 30, 0.02, lock, balance),\n    )\n    print(f\"balance: {balance['value']}\")\n\nasyncio.run(main())\n",
      "expectedOutput": "fee applied, balance=-5\nbonus applied, balance=20\ndeposit applied, balance=50\nbalance: 50",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Wrap shared state mutations in <code>async with lock</code> to keep coroutines from interleaving critical sections. Locks ensure intermediate values stay consistent even when tasks run concurrently.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Pattern:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">lock = asyncio.Lock()\nasync with lock:\n    mutate()</pre></div><p class=\"mt-4 text-gray-300\">Pair locks with small critical sections so cooperative multitasking stays responsive.</p>",
      "tags": [
        "Advanced",
        "Concurrency",
        "Async"
      ]
    },
    {
      "id": 332,
      "title": "332. asyncio.Queue fan-in",
      "language": "python",
      "description": "Collect messages from multiple producers through an asyncio.Queue and emit them in the order they arrive.",
      "initialCode": "import asyncio\n\nasync def producer(name, delays, queue):\n    for message, delay in delays:\n        await asyncio.sleep(delay)\n        await queue.put(f\"{name}:{message}\")\n    await queue.put(None)\n\nasync def consumer(queue, producers):\n    # TODO: read from the queue until all producers send None\n    # Print each non-None payload as it arrives\n\nasync def main():\n    queue = asyncio.Queue()\n    await asyncio.gather(\n        producer(\"alpha\", [(\"ping\", 0.01), (\"done\", 0.03)], queue),\n        producer(\"beta\", [(\"sync\", 0.02)], queue),\n        consumer(queue, 2),\n    )\n\nasyncio.run(main())\n",
      "fullSolution": "import asyncio\n\nasync def producer(name, delays, queue):\n    for message, delay in delays:\n        await asyncio.sleep(delay)\n        await queue.put(f\"{name}:{message}\")\n    await queue.put(None)\n\nasync def consumer(queue, producers):\n    finished = 0\n    while finished < producers:\n        item = await queue.get()\n        if item is None:\n            finished += 1\n        else:\n            print(item)\n\nasync def main():\n    queue = asyncio.Queue()\n    await asyncio.gather(\n        producer(\"alpha\", [(\"ping\", 0.01), (\"done\", 0.03)], queue),\n        producer(\"beta\", [(\"sync\", 0.02)], queue),\n        consumer(queue, 2),\n    )\n\nasyncio.run(main())\n",
      "expectedOutput": "alpha:ping\nbeta:sync\nalpha:done",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Queues let you decouple producers from consumers. Each producer drops messages with <code>await queue.put()</code>, and the consumer drains them until it sees sentinel values.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Pattern:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">while finished < producers:\n    item = await queue.get()\n    if item is None:\n        finished += 1\n    else:\n        handle(item)</pre></div><p class=\"mt-4 text-gray-300\">Sentinels keep the consumer simple without additional synchronization primitives.</p>",
      "tags": [
        "Advanced",
        "Concurrency",
        "Async"
      ]
    },
    {
      "id": 333,
      "title": "333. asyncio.Condition broadcast",
      "language": "python",
      "description": "Use asyncio.Condition to block multiple waiters until a notifier releases them, printing the coordination steps.",
      "initialCode": "import asyncio\n\nasync def worker(name, condition):\n    async with condition:\n        print(f\"{name} waiting\")\n        await condition.wait()\n        print(f\"{name} go\")\n\nasync def release(condition):\n    await asyncio.sleep(0.03)\n    async with condition:\n        print(\"notifying\")\n        condition.notify_all()\n\nasync def main():\n    condition = asyncio.Condition()\n    await asyncio.gather(\n        worker(\"alpha\", condition),\n        worker(\"beta\", condition),\n        release(condition),\n    )\n    print(\"all clear\")\n\nasyncio.run(main())\n",
      "fullSolution": "import asyncio\n\nasync def worker(name, condition):\n    async with condition:\n        print(f\"{name} waiting\")\n        await condition.wait()\n        print(f\"{name} go\")\n\nasync def release(condition):\n    await asyncio.sleep(0.03)\n    async with condition:\n        print(\"notifying\")\n        condition.notify_all()\n\nasync def main():\n    condition = asyncio.Condition()\n    await asyncio.gather(\n        worker(\"alpha\", condition),\n        worker(\"beta\", condition),\n        release(condition),\n    )\n    print(\"all clear\")\n\nasyncio.run(main())\n",
      "expectedOutput": "alpha waiting\nbeta waiting\nnotifying\nalpha go\nbeta go\nall clear",
      "tutorial": "<p class=\\\"mb-4 text-gray-300\\\">An <code>asyncio.Condition</code> couples a lock with wait/notify semantics. Waiters call <code>wait()</code> inside the locked section; <code>notify_all()</code> wakes them so they can re-acquire the lock and continue.</p><h4 class=\\\"font-semibold text-gray-200 mb-2\\\">Pattern:</h4><div class=\\\"code-block-wrapper\\\"><pre class=\\\"tutorial-code-block\\\">async with condition:\n    await condition.wait()\n# ... later ...\nasync with condition:\n    condition.notify_all()</pre></div><p class=\\\"mt-4 text-gray-300\\\">Use conditions for producer/consumer gates or multi-step workflows where simple events are not enough.</p>",
      "tags": [
        "Advanced",
        "Concurrency",
        "Async"
      ]
    },
    {
      "id": 334,
      "title": "334. functools.cache recursion",
      "language": "python",
      "description": "Memoize a recursive Fibonacci function with functools.cache and print fib(10).",
      "initialCode": "from functools import cache\n\n# TODO: decorate fib with @cache so repeated calls reuse results\ndef fib(n):\n    if n < 2:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\nprint(fib(10))\n",
      "fullSolution": "from functools import cache\n\n@cache\ndef fib(n):\n    if n < 2:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\nprint(fib(10))\n",
      "expectedOutput": "55",
      "tutorial": "<p class=\\\"mb-4 text-gray-300\\\"><code>@cache</code> memoizes calls so expensive recursion avoids recomputing overlapping subproblems. It builds the memo on demand and keeps it for the lifetime of the process.</p><h4 class=\\\"font-semibold text-gray-200 mb-2\\\">Pattern:</h4><div class=\\\"code-block-wrapper\\\"><pre class=\\\"tutorial-code-block\\\">from functools import cache\n\n@cache\ndef fib(n):\n    ...</pre></div><p class=\\\"mt-4 text-gray-300\\\">Pair caching with pure functions to safely trade memory for speed.</p>",
      "tags": [
        "Advanced",
        "Algorithms",
        "Performance",
        "Functions"
      ]
    },
    {
      "id": 335,
      "title": "335. pathlib glob filter",
      "language": "python",
      "description": "Use pathlib to list .py files under src/, excluding test modules, and print their names alphabetically.",
      "initialCode": "from pathlib import Path\n\nroot = Path(\"src\")\n# TODO: collect *.py files recursively under src/ whose stem does not start with \"test_\"\n# Guard against missing directories before printing each relative path (forward slashes) sorted alphabetically\n",
      "fullSolution": "from pathlib import Path\n\nroot = Path(\"src\")\nfiles = []\nif root.exists():\n    files = [\n        path.relative_to(root).as_posix()\n        for path in root.rglob('*.py')\n        if not path.stem.startswith('test_')\n    ]\nfor name in sorted(files):\n    print(name)\n",
      "expectedOutput": "",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Path.rglob walks subdirectories using pathlib semantics. Check that the parent directory exists before traversing, filter by <code>stem</code> or <code>suffix</code>, then present results with <code>relative_to</code> and <code>as_posix()</code>.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Pattern:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">if root.exists():\n    for path in root.rglob('*.py'):\n        if not path.stem.startswith('test_'):\n            yield path.relative_to(root)</pre></div><p class=\"mt-4 text-gray-300\">Guarding the traversal keeps the script friendly in empty workspaces while still demonstrating pathlib's declarative filtering.</p>",
      "tags": [
        "Advanced",
        "CLI",
        "Workflow",
        "Tooling"
      ]
    },
    {
      "id": 336,
      "title": "336. itertools.batched capacity planning",
      "language": "python",
      "description": "Group a range of numbers into fixed-size batches with itertools.batched and label each batch.",
      "initialCode": "try:\n    from itertools import batched\nexcept ImportError:  # Python < 3.12 fallback\n    from itertools import islice\n\n    def batched(iterable, size):\n        iterator = iter(iterable)\n        while True:\n            batch = tuple(islice(iterator, size))\n            if not batch:\n                break\n            yield batch\n\nnumbers = range(1, 11)\n\n# TODO: iterate numbers in batches of 4 using batched\n# Print each batch as \"batch <index>: <comma-delimited numbers>\"\n",
      "fullSolution": "try:\n    from itertools import batched\nexcept ImportError:  # Python < 3.12 fallback\n    from itertools import islice\n\n    def batched(iterable, size):\n        iterator = iter(iterable)\n        while True:\n            batch = tuple(islice(iterator, size))\n            if not batch:\n                break\n            yield batch\n\nnumbers = range(1, 11)\n\nfor index, group in enumerate(batched(numbers, 4), start=1):\n    values = ','.join(str(n) for n in group)\n    print(f\"batch {index}: {values}\")\n",
      "expectedOutput": "batch 1: 1,2,3,4\nbatch 2: 5,6,7,8\nbatch 3: 9,10",
      "tutorial": "<p class=\"mb-4 text-gray-300\">itertools.batched(iterable, size) (Python 3.12+) yields tuples of up to <code>size</code> items without materializing the whole stream. The fallback shows how to build the same helper on earlier versions.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Pattern:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">for i, group in enumerate(batched(items, size), start=1):\n    ...</pre></div><p class=\"mt-4 text-gray-300\">Label batches with enumerate and remember that the last chunk may be shorter than the requested size.</p>",
      "tags": [
        "Intermediate",
        "Collections",
        "Algorithms"
      ]
    },
    {
      "id": 337,
      "title": "337. pathlib.Path.walk inventory",
      "language": "python",
      "description": "Traverse a directory tree with Path.walk(), collect discovered files, and print their relative paths alphabetically.",
      "initialCode": "from pathlib import Path\nimport tempfile\nimport os\n\nwith tempfile.TemporaryDirectory() as tmp:\n    root = Path(tmp)\n    (root / 'logs').mkdir()\n    (root / 'logs' / 'app.log').write_text('ok')\n    (root / 'logs' / 'api.log').write_text('ok')\n    (root / 'tmp').mkdir()\n    (root / 'tmp' / 'scratch.txt').write_text('tmp')\n    (root / 'README.md').write_text('notes')\n\n    # TODO: walk the tree starting from root\n    # Collect file paths relative to root and print them alphabetically using forward slashes\n",
      "fullSolution": "from pathlib import Path\nimport tempfile\nimport os\n\nwith tempfile.TemporaryDirectory() as tmp:\n    root = Path(tmp)\n    (root / 'logs').mkdir()\n    (root / 'logs' / 'app.log').write_text('ok')\n    (root / 'logs' / 'api.log').write_text('ok')\n    (root / 'tmp').mkdir()\n    (root / 'tmp' / 'scratch.txt').write_text('tmp')\n    (root / 'README.md').write_text('notes')\n\n    files = []\n    walker = getattr(root, 'walk', None)\n    if walker is None:  # Python < 3.12 fallback\n        iterator = ((Path(current), dirs, filenames) for current, dirs, filenames in os.walk(root))\n    else:\n        iterator = walker()\n    for current, _dirs, filenames in iterator:\n        current_path = Path(current)\n        for name in filenames:\n            rel = (current_path / name).relative_to(root).as_posix()\n            files.append(rel)\n    for path in sorted(files):\n        print(path)\n",
      "expectedOutput": "README.md\nlogs/api.log\nlogs/app.log\ntmp/scratch.txt",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Path.walk() (Python 3.12+) mirrors os.walk while keeping everything in the pathlib world. The fallback demonstrates how to adapt the snippet for older interpreters.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Pattern:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">for current, dirs, files in root.walk():\n    for name in files:\n        yield current / name</pre></div><p class=\"mt-4 text-gray-300\">Convert discovered paths to POSIX style with <code>as_posix()</code> so results remain stable across platforms.</p>",
      "tags": [
        "Intermediate",
        "CLI",
        "Workflow",
        "Tooling"
      ]
    }
  ]
}
