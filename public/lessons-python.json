{
  "mode": "replace",
  "lessons": [
    {
      "id": 1,
      "title": "1. Hello, World!",
      "language": "python",
      "description": "The classic first step. Print exactly Hello, World!",
      "initialCode": "# Your code here. Print \"Hello, World!\"\n\n",
      "fullSolution": "print(\"Hello, World!\")\n",
      "expectedOutput": "Hello, World!",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Use the built-in print() function to write text to the console. Strings must be quoted.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">print(\"Hello there!\")\nprint(42)</pre></div>"
    },
    {
      "id": 2,
      "title": "2. Variables & Data Types",
      "language": "python",
      "description": "Create a variable named my_number with value 42 and print it.",
      "initialCode": "# Declare my_number = 42 then print it\n\n",
      "fullSolution": "my_number = 42\nprint(my_number)\n",
      "expectedOutput": "42",
      "tutorial": "<p class=\"mb-4 text-gray-300\">A variable is a named reference to a value. Python infers types at runtime (dynamic typing).</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">my_number = 42\nname = \"Alice\"\npi = 3.14\nis_active = True\nprint(name, my_number)</pre></div>"
    },
    {
      "title": "3. Arithmetic & Assignment",
      "language": "python",
      "description": "Update the balance by adding the deposit and subtracting the withdrawal, then print the result.",
      "initialCode": "balance = 50\ndeposit = 25\nwithdrawal = 10\n\n# Use arithmetic (+= and -=) to update balance, then print it\n\n",
      "fullSolution": "balance = 50\ndeposit = 25\nwithdrawal = 10\n\nbalance += deposit\nbalance -= withdrawal\nprint(balance)\n",
      "expectedOutput": "65",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Use +, -, *, and / for basic arithmetic. Compound assignment like <code>+=</code> updates a variable in-place without rewriting the variable name.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">total = 10\ntotal += 5  # same as total = total + 5\ntotal -= 2\nprint(total)</pre></div><p class=\"mt-4 text-gray-300\">This pattern is the key to counters such as <code>i += 1</code> that you'll use in loops.</p>",
      "id": 3
    },
    {
      "title": "4. Comparison Operators",
      "language": "python",
      "description": "Compare the score to the passing score to build a boolean named is_passing, then print it.",
      "initialCode": "score = 82\npassing_score = 70\n\n# Create a boolean is_passing using a comparison, then print it\n\n",
      "fullSolution": "score = 82\npassing_score = 70\n\nis_passing = score >= passing_score\nprint(is_passing)\n",
      "expectedOutput": "True",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Comparison operators (<code>&gt;</code>, <code>&gt;=</code>, <code>&lt;</code>, <code>&lt;=</code>, <code>==</code>, <code>!=</code>) evaluate to booleans.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">temperature = 72\nis_warm = temperature &gt;= 70\nprint(is_warm)  # True</pre></div><p class=\"mt-4 text-gray-300\">Knowing these results lets you build the conditions that power <code>if</code> statements and loops.</p>",
      "id": 4
    },
    {
      "id": 5,
      "title": "5. While Loops",
      "language": "python",
      "description": "Use a while loop to print numbers 1 through 5, each on a new line.",
      "initialCode": "i = 1\n# Print 1..5 using while\n\n",
      "fullSolution": "i = 1\nwhile i <= 5:\n    print(i)\n    i += 1\n",
      "expectedOutput": "1\n2\n3\n4\n5",
      "tutorial": "<p class=\"mb-4 text-gray-300\">A while loop repeats while a condition remains True. Be sure the condition eventually becomes False to avoid infinite loops.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">i = 1\nwhile i <= 3:\n    print(i)\n    i += 1</pre></div>"
    },
    {
      "id": 6,
      "title": "6. For Loops",
      "language": "python",
      "description": "Use a for loop to print numbers 0 to 4, each on a new line.",
      "initialCode": "# Loop 0..4 with range(5) and print\n\n",
      "fullSolution": "for i in range(5):\n    print(i)\n",
      "expectedOutput": "0\n1\n2\n3\n4",
      "tutorial": "<p class=\"mb-4 text-gray-300\">for iterates directly over items or over a range of numbers. range(n) yields 0..n-1.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">for i in range(3):\n    print(i)</pre></div>"
    },
    {
      "id": 7,
      "title": "7. Lists Basics",
      "language": "python",
      "description": "Create a list of integers and print the second element.",
      "initialCode": "# Build [10,20,30,40,50] and print index 1\n\n",
      "fullSolution": "numbers = [10, 20, 30, 40, 50]\nprint(numbers[1])\n",
      "expectedOutput": "20",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Lists are ordered, zero-indexed, and mutable. Access by index and modify with methods like append() and pop().</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">nums = [10, 20, 30]\nprint(nums[1])  # 20\nnums.append(40)\nprint(nums)</pre></div>"
    },
    {
      "id": 8,
      "title": "8. Functions",
      "language": "python",
      "description": "Define a function greet(name) that prints Hello, <name>! and call it with 'Alice'.",
      "initialCode": "# Define greet(name) then call greet('Alice')\n\n",
      "fullSolution": "def greet(name):\n    print(f\"Hello, {name}!\")\n\ngreet('Alice')\n",
      "expectedOutput": "Hello, Alice!",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Define functions with def. Parameters are local names; return sends a value back to the caller.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">def greet(name):\n    return f\"Hello, {name}!\"\n\nprint(greet(\"World\"))</pre></div>"
    },
    {
      "title": "9. Functions that Return",
      "language": "python",
      "description": "Write a function area(width, height) that returns the product and print the result for 3 and 5.",
      "initialCode": "def area(width, height):\n    # Return the product of width and height\n    \n\nprint(area(3, 5))\n",
      "fullSolution": "def area(width, height):\n    return width * height\n\nprint(area(3, 5))\n",
      "expectedOutput": "15",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Use <code>return</code> to send a value back to the caller. Once Python hits a return statement, the function exits immediately.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">def double(n):\n    return n * 2\n\nresult = double(10)\nprint(result)</pre></div>",
      "id": 9
    },
    {
      "id": 10,
      "title": "10. If / Else",
      "language": "python",
      "description": "Given x = 7, print Odd if x is odd, otherwise Even.",
      "initialCode": "x = 7\n# print Even or Odd\n\n",
      "fullSolution": "x = 7\nif x % 2 == 0:\n    print('Even')\nelse:\n    print('Odd')\n",
      "expectedOutput": "Odd",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Use if/elif/else to branch on conditions. Use % (modulo) to check divisibility.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">x = 7\nif x % 2 == 0:\n    print(\"Even\")\nelse:\n    print(\"Odd\")</pre></div>"
    },
    {
      "title": "11. Compound Conditions",
      "language": "python",
      "description": "Use if/elif/else with and/or to print the right weather message for given temperature and rain values.",
      "initialCode": "temperature = 72\nis_raining = False\n\n# Print \"Perfect\" if warm and not raining\n# Print \"Grab an umbrella\" if raining\n# Otherwise print \"Stay warm\"\n",
      "fullSolution": "temperature = 72\nis_raining = False\n\nif temperature >= 70 and not is_raining:\n    print('Perfect')\nelif is_raining:\n    print('Grab an umbrella')\nelse:\n    print('Stay warm')\n",
      "expectedOutput": "Perfect",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Combine conditions with <code>and</code> / <code>or</code> to express multiple requirements at once. Evaluate the most specific case first.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">score = 88\nlate = False\nif score >= 90 and not late:\n    print('A')\nelif score >= 80:\n    print('B')\nelse:\n    print('Keep practicing')</pre></div>",
      "id": 11
    },
    {
      "id": 12,
      "title": "12. Sum with range()",
      "language": "python",
      "description": "Compute and print the sum of numbers from 1 to 5.",
      "initialCode": "# Print sum 1..5\n\n",
      "fullSolution": "print(sum(range(1, 6)))\n",
      "expectedOutput": "15",
      "tutorial": "<p class=\"mb-4 text-gray-300\">sum() adds items of any iterable of numbers. Combine with range() for sequences of integers.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">total = sum(range(1, 6))\nprint(total)  # 15</pre></div>"
    },
    {
      "id": 13,
      "title": "13. Strings & f-Strings",
      "language": "python",
      "description": "Use an f-string to print 'Hello, Alice!'.",
      "initialCode": "name = 'Alice'\n# print Hello, Alice!\n\n",
      "fullSolution": "name = 'Alice'\nprint(f'Hello, {name}!')\n",
      "expectedOutput": "Hello, Alice!",
      "tutorial": "<p class=\"mb-4 text-gray-300\">f-strings embed expressions inside string literals using {name}. They are concise and readable.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">name = 'Alice'\nprint(f'Hello, {name}!')</pre></div>"
    },
    {
      "title": "14. List Indexing & len()",
      "language": "python",
      "description": "Given a list of numbers, print the first element, the last element, and the list length (each on its own line).",
      "initialCode": "numbers = [4, 8, 15, 16, 23, 42]\n\n# Print first item, last item, then the length (one per line)\n\n",
      "fullSolution": "numbers = [4, 8, 15, 16, 23, 42]\n\nprint(numbers[0])\nprint(numbers[-1])\nprint(len(numbers))\n",
      "expectedOutput": "4\n42\n6",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Lists are zero-indexed. Negative indexes like <code>-1</code> reach from the end. <code>len()</code> tells you how many items are inside.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">values = [10, 20, 30]\nprint(values[0])  # 10\nprint(values[-1]) # 30\nprint(len(values)) # 3</pre></div>",
      "id": 14
    },
    {
      "id": 15,
      "title": "15. Dictionaries",
      "language": "python",
      "description": "Create a dictionary of capital cities and print the capital of Germany.",
      "initialCode": "# Build dict and print capital_cities['Germany']\n\n",
      "fullSolution": "capital_cities = {\n    'England': 'London',\n    'Germany': 'Berlin',\n    'Japan': 'Tokyo'\n}\nprint(capital_cities['Germany'])\n",
      "expectedOutput": "Berlin",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Dictionaries store key/value pairs. Access values by key; add new keys by assignment.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">capitals = {\"England\": \"London\", \"Germany\": \"Berlin\"}\nprint(capitals[\"Germany\"])\ncapitals[\"Japan\"] = \"Tokyo\"</pre></div>"
    },
    {
      "title": "16. Dictionary Updates",
      "language": "python",
      "description": "Update profile data by adding a city and appending a new skill, then print them.",
      "initialCode": "profile = {\"name\": \"Ada\", \"level\": \"beginner\", \"skills\": [\"Python\"]}\n\n# Add a 'city' key with value 'London'\n# Append 'Git' to the skills list\n# Print profile['city'] then ', '.join(profile['skills'])\n",
      "fullSolution": "profile = {\"name\": \"Ada\", \"level\": \"beginner\", \"skills\": [\"Python\"]}\n\nprofile['city'] = 'London'\nprofile['skills'].append('Git')\n\nprint(profile['city'])\nprint(', '.join(profile['skills']))\n",
      "expectedOutput": "London\nPython, Git",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Dictionaries let you add or update keys on the fly. Values can be complex objects like lists, so you can mutate nested data too.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">user = {'name': 'Sam'}\nuser['role'] = 'admin'\nuser.setdefault('tags', [])\nuser['tags'].append('active')\nprint(user)</pre></div>",
      "id": 16
    },
    {
      "id": 17,
      "title": "17. Boolean Logic",
      "language": "python",
      "description": "Given flags, print Access Granted if is_admin is True and user is active.",
      "initialCode": "is_admin = True\nis_active = True\n# print Access Granted if both True else Access Denied\n\n",
      "fullSolution": "is_admin = True\nis_active = True\nif is_admin and is_active:\n    print('Access Granted')\nelse:\n    print('Access Denied')\n",
      "expectedOutput": "Access Granted",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Combine logical conditions with and / or / not. Parentheses improve readability.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">is_admin = True\nis_active = True\nif is_admin and is_active:\n    print(\"Access Granted\")\nelse:\n    print(\"Access Denied\")</pre></div>"
    },
    {
      "id": 18,
      "title": "18. For-Each Over a List",
      "language": "python",
      "description": "Loop over names and print each one.",
      "initialCode": "names = ['Ana', 'Bo', 'Cy']\n# Print each on a new line\n\n",
      "fullSolution": "names = ['Ana', 'Bo', 'Cy']\nfor n in names:\n    print(n)\n",
      "expectedOutput": "Ana\nBo\nCy",
      "tutorial": "<p class=\"mb-4 text-gray-300\">for iterates directly over items or over a range of numbers. range(n) yields 0..n-1.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">for i in range(3):\n    print(i)</pre></div>"
    },
    {
      "id": 19,
      "title": "19. List Methods",
      "language": "python",
      "description": "Append 4 to the list and then pop it; print the final list.",
      "initialCode": "nums = [1, 2, 3]\n# Append then pop, print nums\n\n",
      "fullSolution": "nums = [1, 2, 3]\nnums.append(4)\nnums.pop()\nprint(nums)\n",
      "expectedOutput": "[1, 2, 3]",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Lists are ordered, zero-indexed, and mutable. Access by index and modify with methods like append() and pop().</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">nums = [10, 20, 30]\nprint(nums[1])  # 20\nnums.append(40)\nprint(nums)</pre></div>"
    },
    {
      "id": 20,
      "title": "20. String Methods",
      "language": "python",
      "description": "Make the string lowercase, then uppercase, printing each on its own line.",
      "initialCode": "s = 'Python'\n# Print lower then upper\n\n",
      "fullSolution": "s = 'Python'\nprint(s.lower())\nprint(s.upper())\n",
      "expectedOutput": "python\nPYTHON",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Common string methods: lower(), upper(), strip(), replace(), split(). They return new strings (immutable).</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">s = 'Python'\nprint(s.lower())\nprint(s.upper())</pre></div>"
    },
    {
      "title": "21. Loop Accumulator Patterns",
      "language": "python",
      "description": "Use a for loop to compute the total and maximum score from the list, then print both (total first, max second).",
      "initialCode": "scores = [10, 12, 8, 15, 7]\n\n# Track a running total and highest value, then print them\n\n",
      "fullSolution": "scores = [10, 12, 8, 15, 7]\n\ntotal = 0\nhighest = scores[0]\nfor score in scores:\n    total += score\n    if score > highest:\n        highest = score\n\nprint(total)\nprint(highest)\n",
      "expectedOutput": "52\n15",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Many loops maintain state between iterations: counters (<code>total += ...</code>), extremum trackers, and flags. Initialize before the loop and update inside.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">nums = [3, 6, 2]\ntotal = 0\nsmallest = nums[0]\nfor n in nums:\n    total += n\n    if n < smallest:\n        smallest = n\nprint(total)   # 11\nprint(smallest) # 2</pre></div>",
      "id": 21
    },
    {
      "id": 22,
      "title": "22. Continue in Loops",
      "language": "python",
      "description": "Print only odd numbers from 0..9 using continue.",
      "initialCode": "# Use continue to skip evens\n\n",
      "fullSolution": "for i in range(10):\n    if i % 2 == 0:\n        continue\n    print(i)\n",
      "expectedOutput": "1\n3\n5\n7\n9",
      "tutorial": "<p class=\"mb-4 text-gray-300\">continue skips the rest of the current loop iteration and moves on to the next.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">for i in range(10):\n    if i % 2 == 0:\n        continue\n    print(i)  # prints odds</pre></div>"
    },
    {
      "id": 23,
      "title": "23. Break in Loops",
      "language": "python",
      "description": "Loop from 0 and stop when i reaches 3. Print each number before breaking.",
      "initialCode": "# Break when i == 3\n\n",
      "fullSolution": "for i in range(10):\n    if i == 3:\n        break\n    print(i)\n",
      "expectedOutput": "0\n1\n2",
      "tutorial": "<p class=\"mb-4 text-gray-300\">break exits the nearest loop immediately.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">for i in range(10):\n    if i == 3:\n        break\n    print(i)  # 0,1,2</pre></div>"
    },
    {
      "id": 24,
      "title": "24. Max in a List",
      "language": "python",
      "description": "Find and print the maximum value in a list.",
      "initialCode": "numbers = [1, 44, 7, 99, 23, 42]\n# Print max\n\n",
      "fullSolution": "numbers = [1, 44, 7, 99, 23, 42]\nprint(max(numbers))\n",
      "expectedOutput": "99",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Built-ins like max(), min(), and sum() work with lists and other iterables of numbers.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">numbers = [1, 44, 7, 99, 23]\nprint(max(numbers))</pre></div>"
    },
    {
      "id": 25,
      "title": "25. Functions with Parameters",
      "language": "python",
      "description": "Define add(a, b) and print the result of add(3, 4).",
      "initialCode": "# Define add(a,b) -> a+b and print add(3,4)\n\n",
      "fullSolution": "def add(a, b):\n    return a + b\n\nprint(add(3, 4))\n",
      "expectedOutput": "7",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Functions can accept parameters and return computed results.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">def add(a, b):\n    return a + b\n\nprint(add(3, 4))  # 7</pre></div>"
    },
    {
      "title": "26. Default Arguments",
      "language": "python",
      "description": "Define greet(name, role='student') returning 'Hello, <name> the <role>!' then call it with and without the role.",
      "initialCode": "def greet(name, role='student'):\n    # Build the string using name and role\n    pass\n\nprint(greet('Ada'))\nprint(greet('Grace', 'mentor'))\n",
      "fullSolution": "def greet(name, role='student'):\n    return f\"Hello, {name} the {role}!\"\n\nprint(greet('Ada'))\nprint(greet('Grace', 'mentor'))\n",
      "expectedOutput": "Hello, Ada the student!\nHello, Grace the mentor!",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Default parameters supply fallback values so callers can omit common arguments. You can still override them with positional or keyword arguments.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">def connect(host, port=5432):\n    return f\"Connecting to {host}:{port}\"\n\nprint(connect('db.local'))\nprint(connect('db.local', 5433))</pre></div>",
      "id": 26
    },
    {
      "title": "27. __init__ and Instance Attributes",
      "language": "python",
      "description": "Finish the Counter class so __init__ stores the starting value and increment() adds 1. After creating Counter(5) and calling increment(), print the value.",
      "initialCode": "class Counter:\n    # Define __init__ to store starting value in self.value\n    def increment(self):\n        self.value += 1\n\ncounter = Counter(5)\ncounter.increment()\nprint(counter.value)\n",
      "fullSolution": "class Counter:\n    def __init__(self, start):\n        self.value = start\n\n    def increment(self):\n        self.value += 1\n\ncounter = Counter(5)\ncounter.increment()\nprint(counter.value)\n",
      "expectedOutput": "6",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Use <code>__init__</code> to initialize per-instance data on <code>self</code>. Every method receives <code>self</code> so you can read or update that state later.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">class BankAccount:\n    def __init__(self, balance):\n        self.balance = balance\n\n    def deposit(self, amount):\n        self.balance += amount\n\nacct = BankAccount(100)\nacct.deposit(25)\nprint(acct.balance)  # 125</pre></div>",
      "id": 27
    },
    {
      "id": 28,
      "title": "28. Classes & Methods",
      "language": "python",
      "description": "Create a Dog class with a bark() method that prints 'Woof!' and call it.",
      "initialCode": "# Define class Dog with bark() and call it\n\n",
      "fullSolution": "class Dog:\n    def bark(self):\n        print('Woof!')\n\nDog().bark()\n",
      "expectedOutput": "Woof!",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Define classes with methods. The first parameter of instance methods is conventionally named self and refers to the instance.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">class Dog:\n    def bark(self):\n        print('Woof!')\n\nDog().bark()</pre></div>"
    },
    {
      "title": "29. Class vs Instance Attributes",
      "language": "python",
      "description": "Adjust the Player class so a class-level team name applies to all players, while each player tracks an individual score.",
      "initialCode": "class Player:\n    team = 'Blue'\n\n    def __init__(self, name):\n        # Store name and set starting score to 0\n        pass\n\nplayer1 = Player('Kai')\nplayer2 = Player('Zoe')\n\nplayer1.score += 10\nPlayer.team = 'Red'\n\nprint(Player.team)\nprint(player1.score)\nprint(player2.score)\n",
      "fullSolution": "class Player:\n    team = 'Blue'\n\n    def __init__(self, name):\n        self.name = name\n        self.score = 0\n\nplayer1 = Player('Kai')\nplayer2 = Player('Zoe')\n\nplayer1.score += 10\nPlayer.team = 'Red'\n\nprint(Player.team)\nprint(player1.score)\nprint(player2.score)\n",
      "expectedOutput": "Red\n10\n0",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Class attributes are shared across every instance, while instance attributes live on each object individually. Update class-wide data through the class, not <code>self</code>.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">class Robot:\n    population = 0\n    def __init__(self, name):\n        Robot.population += 1\n        self.name = name\n\nprint(Robot.population)</pre></div>",
      "id": 29
    },
    {
      "id": 30,
      "title": "30. Inheritance",
      "language": "python",
      "description": "Create Animal -> Dog. Override speak() in Dog to print 'Woof!' and call it.",
      "initialCode": "# Define Animal.speak and Dog(Animal).speak printing Woof!\n\n",
      "fullSolution": "class Animal:\n    def speak(self):\n        pass\n\nclass Dog(Animal):\n    def speak(self):\n        print('Woof!')\n\nDog().speak()\n",
      "expectedOutput": "Woof!",
      "tutorial": "<p class=\"mb-4 text-gray-300\">A subclass inherits from a parent class and can override methods. Use super() to call the parent implementation when needed.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">class Animal:\n    def speak(self):\n        return \"...\"\n\nclass Dog(Animal):\n    def speak(self):\n        return \"Woof!\"\n\nprint(Dog().speak())</pre></div>"
    },
    {
      "id": 31,
      "title": "31. Enums",
      "language": "python",
      "description": "Create an enum Color with RED, GREEN, BLUE and print 'RED'.",
      "initialCode": "# Define enum Color and print Color.RED.name\n\n",
      "fullSolution": "from enum import Enum\n\nclass Color(Enum):\n    RED = 1\n    GREEN = 2\n    BLUE = 3\n\nprint(Color.RED.name)\n",
      "expectedOutput": "RED",
      "tutorial": "<p class=\"mb-4 text-gray-300\">The enum module lets you define named constants. Access by EnumName.MEMBER.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from enum import Enum\nclass Color(Enum):\n    RED = 1\n    GREEN = 2\n    BLUE = 3\n\nprint(Color.RED.name)  # \"RED\"</pre></div>"
    },
    {
      "id": 32,
      "title": "32. Slicing",
      "language": "python",
      "description": "Print the last three elements of the list each on a new line.",
      "initialCode": "nums = [1,2,3,4,5]\n# Print the last three with slicing\n\n",
      "fullSolution": "nums = [1,2,3,4,5]\nfor n in nums[-3:]:\n    print(n)\n",
      "expectedOutput": "3\n4\n5",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Slicing returns a sub-sequence: seq[start:end:step]. Negative indexes count from the end.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">nums = [1,2,3,4,5]\nprint(nums[-3:])  # last three</pre></div>"
    },
    {
      "id": 33,
      "title": "33. Iterate Dict (keys)",
      "language": "python",
      "description": "Use a for-loop to print all keys of the dictionary (one per line).",
      "initialCode": "m = {'England':'London','Germany':'Berlin','Japan':'Tokyo'}\n# Print each key on its own line\n\n",
      "fullSolution": "m = {'England':'London','Germany':'Berlin','Japan':'Tokyo'}\nfor k in m.keys():\n    print(k)\n",
      "expectedOutput": "England\nGermany\nJapan",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Iterate dict keys, values, or items with .keys(), .values(), .items(). The default iterates keys.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">person = {\"name\":\"Ada\",\"city\":\"London\"}\nfor k in person:\n    print(k)</pre></div>"
    },
    {
      "id": 34,
      "title": "34. Average of a List",
      "language": "python",
      "description": "Compute the average of [2, 4, 6, 8] and print it as a float.",
      "initialCode": "# Average of [2,4,6,8]\n\n",
      "fullSolution": "nums = [2,4,6,8]\nprint(sum(nums)/len(nums))\n",
      "expectedOutput": "5.0",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Compute an average by dividing the sum by the count. Convert to float if needed for decimal results.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">nums = [2,4,6,8]\nprint(sum(nums)/len(nums))  # 5.0</pre></div>"
    },
    {
      "id": 35,
      "title": "35. FizzBuzz (1..15)",
      "language": "python",
      "description": "Print numbers from 1 to 15 with Fizz/Buzz rules.",
      "initialCode": "# Implement FizzBuzz 1..15\n\n",
      "fullSolution": "for i in range(1, 16):\n    if i % 15 == 0:\n        print('FizzBuzz')\n    elif i % 3 == 0:\n        print('Fizz')\n    elif i % 5 == 0:\n        print('Buzz')\n    else:\n        print(i)\n",
      "expectedOutput": "1\n2\nFizz\n4\nBuzz\nFizz\n7\n8\nFizz\nBuzz\n11\nFizz\n13\n14\nFizzBuzz",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Use modulo to test divisibility by 3 and 5. Check 15 first to handle both.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">for i in range(1, 16):\n    if i % 15 == 0: print(\"FizzBuzz\")\n    elif i % 3 == 0: print(\"Fizz\")\n    elif i % 5 == 0: print(\"Buzz\")\n    else: print(i)</pre></div>"
    },
    {
      "id": 36,
      "title": "36. List Comprehensions",
      "language": "python",
      "description": "Build squares 0..4 and print the list.",
      "initialCode": "# squares = [i*i for i in range(5)] then print\n\n",
      "fullSolution": "squares = [i*i for i in range(5)]\nprint(squares)\n",
      "expectedOutput": "[0, 1, 4, 9, 16]",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Lists are ordered, zero-indexed, and mutable. Access by index and modify with methods like append() and pop().</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">nums = [10, 20, 30]\nprint(nums[1])  # 20\nnums.append(40)\nprint(nums)</pre></div>"
    },
    {
      "id": 37,
      "title": "37. Lambda/map/filter",
      "language": "python",
      "description": "Double [1,2,3] using map+lambda; print.",
      "initialCode": "# map(lambda x: x*2, nums)\n\n",
      "fullSolution": "nums = [1,2,3]\nprint(list(map(lambda x: x*2, nums)))\n",
      "expectedOutput": "[2, 4, 6]",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Use lambda for small anonymous functions. map() transforms; filter() keeps items where predicate is True.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">nums = [1,2,3]\ndoubled = list(map(lambda x: x*2, nums))\nevens = list(filter(lambda x: x%2==0, nums))\nprint(doubled)\nprint(evens)</pre></div>"
    },
    {
      "id": 38,
      "title": "38. Math Module",
      "language": "python",
      "description": "Print: Max: 42 and Sqrt: 8.0",
      "initialCode": "# Use max and math.sqrt\n\n",
      "fullSolution": "import math\nprint('Max:', max(25, 42))\nprint('Sqrt:', math.sqrt(64))\n",
      "expectedOutput": "Max: 42\nSqrt: 8.0",
      "tutorial": "<p class=\"mb-4 text-gray-300\">The math module provides functions like sqrt, floor, ceil, and constants like pi.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import math\nprint(\"Sqrt:\", math.sqrt(64))\nprint(\"Pi:\", math.pi)</pre></div>"
    },
    {
      "id": 39,
      "title": "39. String Join",
      "language": "python",
      "description": "Join ['Python','is','efficient!'] with spaces.",
      "initialCode": "# ' '.join(list)\n\n",
      "fullSolution": "print(' '.join(['Python','is','efficient!']))\n",
      "expectedOutput": "Python is efficient!",
      "tutorial": "<p class=\"mb-4 text-gray-300\">\" \".join(list_of_strings) concatenates with a separator. Remember join is a string method, not on lists.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">words = ['Python','is','efficient!']\nprint(' '.join(words))</pre></div>"
    },
    {
      "id": 40,
      "title": "40. super() in Constructors",
      "language": "python",
      "description": "Call parent __init__ and print both messages.",
      "initialCode": "class Animal:\n    def __init__(self, name):\n        print(f'Animal constructor called for: {name}')\n\nclass Dog(Animal):\n    def __init__(self, name):\n        # call parent with super()\n        \n        print('Dog constructor called.')\n\nDog('Fido')\n",
      "fullSolution": "class Animal:\n    def __init__(self, name):\n        print(f'Animal constructor called for: {name}')\n\nclass Dog(Animal):\n    def __init__(self, name):\n        super().__init__(name)\n        print('Dog constructor called.')\n\nDog('Fido')\n",
      "expectedOutput": "Animal constructor called for: Fido\nDog constructor called.",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Inside a subclass constructor, call super().__init__(...) to run parent initialization.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">class A:\n    def __init__(self):\n        print('A init')\nclass B(A):\n    def __init__(self):\n        super().__init__()\n        print('B init')\nB()</pre></div>"
    },
    {
      "id": 41,
      "title": "41. Properties (@property)",
      "language": "python",
      "description": "Use @property to expose a computed full_name; print it.",
      "initialCode": "class Person:\n    def __init__(self, first, last):\n        self.first = first\n        self.last = last\n    # add property full_name returning '<first> <last>'\n\n# print Person('Ada','Lovelace').full_name\n",
      "fullSolution": "class Person:\n    def __init__(self, first, last):\n        self.first = first\n        self.last = last\n    @property\n    def full_name(self):\n        return f\"{self.first} {self.last}\"\n\nprint(Person('Ada','Lovelace').full_name)\n",
      "expectedOutput": "Ada Lovelace",
      "tutorial": "<p class=\"mb-4 text-gray-300\">@property turns a method into a computed attribute accessed without parentheses.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">class Person:\n    def __init__(self, first, last):\n        self.first, self.last = first, last\n    @property\n    def full_name(self):\n        return f'{self.first} {self.last}'\nprint(Person('Ada','Lovelace').full_name)</pre></div>"
    },
    {
      "id": 42,
      "title": "42. @staticmethod",
      "language": "python",
      "description": "Add a static method cube(x) and print cube(3).",
      "initialCode": "class MathUtil:\n    # add staticmethod cube(x)\n\nprint(MathUtil.cube(3))\n",
      "fullSolution": "class MathUtil:\n    @staticmethod\n    def cube(x):\n        return x**3\n\nprint(MathUtil.cube(3))\n",
      "expectedOutput": "27",
      "tutorial": "<p class=\"mb-4 text-gray-300\">@staticmethod belongs to the class namespace and does not receive self or cls.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">class Math:\n    @staticmethod\n    def cube(x): return x**3\nprint(Math.cube(3))</pre></div>"
    },
    {
      "id": 43,
      "title": "43. @classmethod",
      "language": "python",
      "description": "Track created instances with a class counter; print 2 after creating two.",
      "initialCode": "class Counter:\n    total = 0\n    # implement classmethod create() that increments total and returns an instance\n\n# create two then print Counter.total\n",
      "fullSolution": "class Counter:\n    total = 0\n    def __init__(self):\n        pass\n    @classmethod\n    def create(cls):\n        cls.total += 1\n        return cls()\n\nCounter.create()\nCounter.create()\nprint(Counter.total)\n",
      "expectedOutput": "2",
      "tutorial": "<p class=\"mb-4 text-gray-300\">@classmethod receives the class (cls) as the first argument and is useful for alternative constructors.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">class C:\n    total = 0\n    @classmethod\n    def create(cls):\n        cls.total += 1\n        return cls()\nC.create(); C.create(); print(C.total)</pre></div>"
    },
    {
      "id": 44,
      "title": "44. Tuple Unpacking",
      "language": "python",
      "description": "Unpack (1,2,3) into a,b,c and print a and c on separate lines.",
      "initialCode": "# Unpack then print a and c\n\n",
      "fullSolution": "a,b,c = (1,2,3)\nprint(a)\nprint(c)\n",
      "expectedOutput": "1\n3",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Unpack iterables on the left-hand side to bind multiple names at once.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">a,b,c = (1,2,3)\nprint(a)\nprint(c)</pre></div>"
    },
    {
      "id": 45,
      "title": "45. Set Operations",
      "language": "python",
      "description": "Create sets and print union then intersection.",
      "initialCode": "# union then intersection\n\n",
      "fullSolution": "A={1,2,3}\nB={3,4}\nprint(A|B)\nprint(A&B)\n",
      "expectedOutput": "{1, 2, 3, 4}\n{3}",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Sets store unique elements and support union (|), intersection (&), and difference (-).</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">A={1,2,3}; B={3,4}\nprint(A|B)\nprint(A&B)</pre></div>"
    },
    {
      "id": 46,
      "title": "46. Try/Except",
      "language": "python",
      "description": "Catch ZeroDivisionError and print message.",
      "initialCode": "# try dividing by zero, catch and print message\n\n",
      "fullSolution": "try:\n    1/0\nexcept ZeroDivisionError:\n    print('Oops! Division by zero')\n",
      "expectedOutput": "Oops! Division by zero",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Wrap risky code in try/except. Catch specific exceptions first to handle them appropriately.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">try:\n    1/0\nexcept ZeroDivisionError:\n    print('Oops! Division by zero')</pre></div>"
    },
    {
      "id": 47,
      "title": "47. Else and Finally",
      "language": "python",
      "description": "Demonstrate try/except/else/finally; print 4 then Done.",
      "initialCode": "# compute 2+2 and print result in else, always print Done in finally\n\n",
      "fullSolution": "try:\n    r=2+2\nexcept Exception:\n    print('Error')\nelse:\n    print(r)\nfinally:\n    print('Done')\n",
      "expectedOutput": "4\nDone",
      "tutorial": "<p class=\"mb-4 text-gray-300\">In try/except, the else block runs if no exception occurred; finally always runs, success or failure.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">try:\n    r = 2+2\nexcept Exception:\n    print(\"Error\")\nelse:\n    print(r)\nfinally:\n    print(\"Done\")</pre></div>"
    },
    {
      "id": 48,
      "title": "48. Raise Exceptions",
      "language": "python",
      "description": "Raise ValueError for negative; catch and print Invalid.",
      "initialCode": "# define check(x) that raises ValueError for x<0; call with -1\n\n",
      "fullSolution": "def check(x):\n    if x<0:\n        raise ValueError('neg')\n\ntry:\n    check(-1)\nexcept ValueError:\n    print('Invalid')\n",
      "expectedOutput": "Invalid",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Wrap risky code in try/except. Catch specific exceptions first to handle them appropriately.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">try:\n    1/0\nexcept ZeroDivisionError:\n    print('Oops! Division by zero')</pre></div>"
    },
    {
      "id": 49,
      "title": "49. File I/O (write/read)",
      "language": "python",
      "description": "Write 'hello file' then read it back and print.",
      "initialCode": "# write to data.txt then read and print\n\n",
      "fullSolution": "with open('data.txt','w') as f:\n    f.write('hello file')\nwith open('data.txt') as f:\n    print(f.read())\n",
      "expectedOutput": "hello file",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Use with open(...) as f to read/write files safely. Files are closed automatically.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">with open('demo.txt','w') as f:\n    f.write('hello')\nwith open('demo.txt') as f:\n    print(f.read())</pre></div>"
    },
    {
      "id": 50,
      "title": "50. Context Managers",
      "language": "python",
      "description": "Use with to write then read two lines and print them.",
      "initialCode": "# write A and B lines to notes.txt, then read and print\n\n",
      "fullSolution": "with open('notes.txt','w') as f:\n    f.write('A\\nB')\nwith open('notes.txt') as f:\n    print(f.read())\n",
      "expectedOutput": "A\nB",
      "tutorial": "<p class=\"mb-4 text-gray-300\">with manages resources that need setup/teardown (file handles, locks, network connections).</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from contextlib import contextmanager\n@contextmanager\ndef tag(name):\n    print(f'<{name}>'); yield; print(f'</{name}>')\nwith tag('b'):\n    print('bold')</pre></div>"
    },
    {
      "id": 51,
      "title": "51. Sorting",
      "language": "python",
      "description": "Sort the list [3,1,2] ascending and print it.",
      "initialCode": "# sort then print\n\n",
      "fullSolution": "nums=[3,1,2]\nnums.sort()\nprint(nums)\n",
      "expectedOutput": "[1, 2, 3]",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Use sorted(iterable) for a new sorted list, or list.sort() to sort in place. key= controls the sort field.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">print(sorted([3,1,2]))  # [1,2,3]</pre></div>"
    },
    {
      "id": 52,
      "title": "52. Dict Comprehensions",
      "language": "python",
      "description": "Create a dict mapping numbers 1..3 to their squares and print it.",
      "initialCode": "# squares dict 1..3\n\n",
      "fullSolution": "print({i:i*i for i in range(1,4)})\n",
      "expectedOutput": "{1: 1, 2: 4, 3: 9}",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Dict comprehensions create dictionaries concisely: {k:v for k,v in ...}.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">{n: n*n for n in range(1,4)}</pre></div>"
    },
    {
      "id": 53,
      "title": "53. Generators",
      "language": "python",
      "description": "Create a generator that yields 1..3 and print each value.",
      "initialCode": "# define gen() yielding 1,2,3 then iterate\n\n",
      "fullSolution": "def gen():\n    yield 1\n    yield 2\n    yield 3\nfor x in gen():\n    print(x)\n",
      "expectedOutput": "1\n2\n3",
      "tutorial": "<p class=\"mb-4 text-gray-300\">yield produces a sequence lazily. Iterate over the generator like any iterable.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">def gen():\n    yield 1; yield 2; yield 3\nfor x in gen():\n    print(x)</pre></div>"
    },
    {
      "id": 54,
      "title": "54. JSON Basics",
      "language": "python",
      "description": "Parse a JSON string and print the value of name.",
      "initialCode": "# Use json.loads on the string to parse and print the name\n\n",
      "fullSolution": "import json\ns = '{\"name\": \"Ada\"}'\nobj = json.loads(s)\nprint(obj[\"name\"])\n",
      "expectedOutput": "Ada",
      "tutorial": "<p class=\"mb-4 text-gray-300\">json.loads parses a JSON string into Python objects; json.dumps serializes Python objects to JSON strings.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import json\ns = \"{\"name\": \"Ada\"}\"\nobj = json.loads(s)\nprint(obj[\"name\"])</pre></div>"
    },
    {
      "id": 55,
      "title": "55. Regular Expressions",
      "language": "python",
      "description": "Extract all digits from 'a1b2c3' and print each on a new line.",
      "initialCode": "# re.findall to get digits then print\n\n",
      "fullSolution": "import re\nfor d in re.findall(r'\\\\d','a1b2c3'):\n    print(d)\n",
      "expectedOutput": "1\n2\n3",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Use the re module for regular expressions. \\d matches digits; groups capture substrings for later use.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import re\nprint(re.findall(r'\\\\d', 'a1b2c3'))\n# Groups:\nm = re.search(r'^Hello\\s+(\\\\w+)$', 'Hello World')\nprint(m.group(1))  # World</pre></div>"
    },
    {
      "id": 56,
      "title": "56. enumerate()",
      "language": "python",
      "description": "Use enumerate to print index and value for ['a','b','c'].",
      "initialCode": "# print 0:a 1:b 2:c on new lines\n\n",
      "fullSolution": "for i,v in enumerate(['a','b','c']):\n    print(f'{i}:{v}')\n",
      "expectedOutput": "0:a\n1:b\n2:c",
      "tutorial": "<p class=\"mb-4 text-gray-300\">The enum module lets you define named constants. Access by EnumName.MEMBER.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from enum import Enum\nclass Color(Enum):\n    RED = 1\n    GREEN = 2\n    BLUE = 3\n\nprint(Color.RED.name)  # \"RED\"</pre></div>"
    },
    {
      "id": 57,
      "title": "57. Set Comprehension",
      "language": "python",
      "description": "Build a set of even numbers from 0..6 and print it.",
      "initialCode": "# even set 0..6\n\n",
      "fullSolution": "print({n for n in range(7) if n%2==0})\n",
      "expectedOutput": "{0, 2, 4, 6}",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Set comprehensions build sets; braces {} with an expression and optional condition.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">{n for n in range(7) if n % 2 == 0}</pre></div>"
    },
    {
      "id": 58,
      "title": "58. Regex Groups",
      "language": "python",
      "description": "Capture the word after 'Hello' in 'Hello World' and print it.",
      "initialCode": "# re.search group capture\n\n",
      "fullSolution": "import re\nm = re.search(r'^Hello\\s+(\\w+)$', 'Hello World')\nprint(m.group(1))\n",
      "expectedOutput": "World",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Use the re module for regular expressions. \\d matches digits; groups capture substrings for later use.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import re\nprint(re.findall(r'\\\\d', 'a1b2c3'))\n# Groups:\nm = re.search(r'^Hello\\s+(\\\\w+)$', 'Hello World')\nprint(m.group(1))  # World</pre></div>"
    },
    {
      "id": 59,
      "title": "59. isinstance()",
      "language": "python",
      "description": "Check if value is an int, a str, and an object; print three booleans on new lines.",
      "initialCode": "# x=5 then print the three checks\n\n",
      "fullSolution": "x=5\nprint(isinstance(x,int))\nprint(isinstance(x,str))\nprint(isinstance(x,object))\n",
      "expectedOutput": "True\nFalse\nTrue",
      "tutorial": "<p class=\"mb-4 text-gray-300\">isinstance(obj, type) checks an object's type (including subclass relationships).</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">x = 5\nprint(isinstance(x, int))\nprint(isinstance(x, str))\nprint(isinstance(x, object))</pre></div>"
    },
    {
      "id": 60,
      "title": "60. Course Review",
      "language": "python",
      "description": "Combine classes, lists, loops, and math: compute the average score of students.",
      "initialCode": "class Student:\n    def __init__(self, name, score):\n        self.name=name\n        self.score=score\n\nstudents=[Student('Alice',90),Student('Bob',80),Student('Charlie',100)]\n# compute and print average\n\n",
      "fullSolution": "class Student:\n    def __init__(self, name, score):\n        self.name=name\n        self.score=score\n\nstudents=[Student('Alice',90),Student('Bob',80),Student('Charlie',100)]\nprint(sum(s.score for s in students)/len(students))\n",
      "expectedOutput": "90.0",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Combine multiple concepts: classes, loops, and aggregations. Think in steps: represent data, iterate, and compute.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">class Student:\n    def __init__(self, name, score):\n        self.name, self.score = name, score\nstudents=[Student('A',90), Student('B',80)]\nprint(sum(s.score for s in students)/len(students))</pre></div>"
    },
    {
      "title": "61. Iterator Basics",
      "language": "python",
      "description": "Create an iterator over items and print the first two elements using next().",
      "initialCode": "items = ['a', 'b', 'c']\n\n# Obtain an iterator and print the first two values with next()\n\n",
      "fullSolution": "items = ['a', 'b', 'c']\n\nit = iter(items)\nprint(next(it))\nprint(next(it))\n",
      "expectedOutput": "a\nb",
      "tutorial": "<p class=\"mb-4 text-gray-300\">The iterator protocol lets you pull items one by one with <code>iter()</code> and <code>next()</code>. Loops call these under the hood.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">letters = iter(['x', 'y', 'z'])\nprint(next(letters))\nprint(next(letters))\n# StopIteration is raised when a sequence is exhausted.</pre></div>",
      "id": 61
    },
    {
      "id": 62,
      "title": "62. Lambda + map",
      "language": "python",
      "description": "Use map with a lambda to double each number and print each on a new line.",
      "initialCode": "nums = [1,2,3]\n# Use map + lambda to double each and print each on a new line\n\n",
      "fullSolution": "nums = [1,2,3]\nfor x in map(lambda n: n*2, nums):\n    print(x)\n",
      "expectedOutput": "2\n4\n6",
      "tutorial": "<p class=\"mb-4 text-gray-300\">`map()` applies a function to every item of an iterable. Combine it with a `lambda` for concise transformations.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">nums = [1, 2, 3]\ndoubled = list(map(lambda x: x * 2, nums))\nprint(doubled) # [2, 4, 6]</pre></div>"
    },
    {
      "id": 63,
      "title": "63. Filter Evens",
      "language": "python",
      "description": "Filter even numbers from 0..6 and print each on a new line.",
      "initialCode": "nums = list(range(7))\n# Keep evens using filter + lambda and print each\n\n",
      "fullSolution": "nums = list(range(7))\nfor x in filter(lambda n: n % 2 == 0, nums):\n    print(x)\n",
      "expectedOutput": "0\n2\n4\n6",
      "tutorial": "<p class=\"mb-4 text-gray-300\">`filter()` creates an iterator from elements of an iterable for which a function returns true. It is often used with a `lambda` for the condition.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">nums = [1, 2, 3, 4]\nevens = list(filter(lambda x: x % 2 == 0, nums))\nprint(evens) # [2, 4]</pre></div>"
    },
    {
      "id": 64,
      "title": "64. zip() Pairs",
      "language": "python",
      "description": "Zip two lists and print pairs as N-letter on separate lines.",
      "initialCode": "a=[1,2,3]\nb=['a','b','c']\n# Print 1-a, 2-b, 3-c each on new lines\n\n",
      "fullSolution": "a=[1,2,3]\nb=['a','b','c']\nfor i,ch in zip(a,b):\n    print(f'{i}-{ch}')\n",
      "expectedOutput": "1-a\n2-b\n3-c",
      "tutorial": "<p class=\"mb-4 text-gray-300\">`zip()` aggregates elements from two or more iterables, creating an iterator that generates tuples of corresponding elements.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">nums = [1, 2]\nlets = [\"a\", \"b\"]\nprint(list(zip(nums, lets))) # [(1, \"a\"), (2, \"b\")]</pre></div>"
    },
    {
      "id": 65,
      "title": "65. Sort by Length",
      "language": "python",
      "description": "Sort words by length ascending and print each on a new line.",
      "initialCode": "words=['pear','fig','apple']\n# Sort by length (ascending) and print\n\n",
      "fullSolution": "words=['pear','fig','apple']\nfor w in sorted(words, key=len):\n    print(w)\n",
      "expectedOutput": "fig\npear\napple",
      "tutorial": "<p class=\"mb-4 text-gray-300\">The `sorted()` function can take a `key` argument. Provide `len` to sort an iterable of strings by their length.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">words = [\"pear\", \"fig\", \"apple\"]\nprint(sorted(words, key=len)) # ['fig', 'pear', 'apple']</pre></div>"
    },
    {
      "id": 66,
      "title": "66. Sort Dicts",
      "language": "python",
      "description": "Sort a list of dicts by age and print names in order.",
      "initialCode": "people=[{'name':'Bob','age':30},{'name':'Alice','age':25},{'name':'Eve','age':35}]\n# Sort by 'age' ascending and print names\n\n",
      "fullSolution": "people=[{'name':'Bob','age':30},{'name':'Alice','age':25},{'name':'Eve','age':35}]\nfor p in sorted(people, key=lambda x: x['age']):\n    print(p['name'])\n",
      "expectedOutput": "Alice\nBob\nEve",
      "tutorial": "<p class=\"mb-4 text-gray-300\">To sort a list of dictionaries, use a `lambda` function as the key to specify which dictionary value to sort by.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">people = [{'name': 'Bob', 'age': 30}, {'name': 'Alice', 'age': 25}]\nprint(sorted(people, key=lambda p: p['age']))</pre></div>"
    },
    {
      "id": 67,
      "title": "67. Extended Unpacking",
      "language": "python",
      "description": "Unpack first and last values, ignoring the middle.",
      "initialCode": "data=[1,2,3,4]\n# Unpack to a and b (first/last) then print a and b on new lines\n\n",
      "fullSolution": "data=[1,2,3,4]\na,*_,b = data\nprint(a)\nprint(b)\n",
      "expectedOutput": "1\n4",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Use an asterisk `*` to capture multiple items into a list during unpacking. This is often used to get the first/last items.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">nums = [1, 2, 3, 4]\nfirst, *middle, last = nums\nprint(first, last) # 1 4\nprint(middle) # [2, 3]</pre></div>"
    },
    {
      "id": 68,
      "title": "68. Closures",
      "language": "python",
      "description": "Return a function that adds a captured value and use it.",
      "initialCode": "def make_adder(n):\n    # return a function that adds n\n    pass\n\nadd5 = make_adder(5)\nprint(add5(10))\n",
      "fullSolution": "def make_adder(n):\n    def add(x):\n        return x + n\n    return add\n\nadd5 = make_adder(5)\nprint(add5(10))\n",
      "expectedOutput": "15",
      "tutorial": "<p class=\"mb-4 text-gray-300\">A closure is a function that remembers variables from the enclosing scope even after that scope has finished executing.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">def make_adder(n):\n    def adder(x):\n        return x + n\n    return adder\n\nadd_five = make_adder(5)\nprint(add_five(10)) # 15</pre></div>"
    },
    {
      "id": 69,
      "title": "69. Decorators",
      "language": "python",
      "description": "Write a decorator that uppercases a function's return value.",
      "initialCode": "# Implement @uppercase and decorate greet so it prints HELLO WORLD\n\n",
      "fullSolution": "def uppercase(fn):\n    def wrapper(*args, **kwargs):\n        return fn(*args, **kwargs).upper()\n    return wrapper\n\n@uppercase\ndef greet(name):\n    return f'hello {name}'\n\nprint(greet('world'))\n",
      "expectedOutput": "HELLO WORLD",
      "tutorial": "<p class=\"mb-4 text-gray-300\">A decorator is a function that takes another function as an argument, adds some functionality, and returns another function.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">def my_decorator(func):\n    def wrapper():\n        print(\"Something is happening before the function is called.\")\n        func()\n        print(\"Something is happening after the function is called.\")\n    return wrapper\n\n@my_decorator\ndef say_whee():\n    print(\"Whee!\")\n\nsay_whee()</pre></div>"
    },
    {
      "id": 70,
      "title": "70. Dataclasses",
      "language": "python",
      "description": "Define a simple dataclass and print its fields.",
      "initialCode": "from dataclasses import dataclass\n# Define Person(name:str, age:int) and print \"Ada:42\"\n\n",
      "fullSolution": "from dataclasses import dataclass\n\n@dataclass\nclass Person:\n    name: str\n    age: int\n\np = Person('Ada', 42)\nprint(f'{p.name}:{p.age}')\n",
      "expectedOutput": "Ada:42",
      "tutorial": "<p class=\"mb-4 text-gray-300\">A variable is a named reference to a value. Python infers types at runtime (dynamic typing).</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">my_number = 42\nname = \"Alice\"\npi = 3.14\nis_active = True\nprint(name, my_number)</pre></div>"
    },
    {
      "id": 71,
      "title": "71. @property",
      "language": "python",
      "description": "Create a computed property for rectangle area.",
      "initialCode": "class Rect:\n    def __init__(self, w, h):\n        self.w, self.h = w, h\n    # Define property area returning w*h\n\nr = Rect(4,5)\nprint(r.area)\n",
      "fullSolution": "class Rect:\n    def __init__(self, w, h):\n        self.w, self.h = w, h\n    @property\n    def area(self):\n        return self.w * self.h\n\nr = Rect(4,5)\nprint(r.area)\n",
      "expectedOutput": "20",
      "tutorial": "<p class=\"mb-4 text-gray-300\">@property turns a method into a computed attribute accessed without parentheses.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">class Person:\n    def __init__(self, first, last):\n        self.first, self.last = first, last\n    @property\n    def full_name(self):\n        return f'{self.first} {self.last}'\nprint(Person('Ada','Lovelace').full_name)</pre></div>"
    },
    {
      "id": 72,
      "title": "72. Type Hints",
      "language": "python",
      "description": "Add type hints to a simple function and call it.",
      "initialCode": "# Define add(a:int,b:int)->int and print add(3,4)\n\n",
      "fullSolution": "def add(a: int, b: int) -> int:\n    return a + b\n\nprint(add(3,4))\n",
      "expectedOutput": "7",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Type hints are a way to statically indicate the type of a value in your Python code. They are not enforced at runtime but can be checked by tools like mypy.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">def greet(name: str) -> str:\n    return \"Hello, \" + name\n\nprint(greet(\"World\"))</pre></div>"
    },
    {
      "id": 73,
      "title": "73. itertools.chain",
      "language": "python",
      "description": "Concatenate iterables lazily and print all values.",
      "initialCode": "import itertools\n# Chain [1,2] and [3,4] and print each\n\n",
      "fullSolution": "import itertools\nfor x in itertools.chain([1,2],[3,4]):\n    print(x)\n",
      "expectedOutput": "1\n2\n3\n4",
      "tutorial": "<p class=\"mb-4 text-gray-300\">`itertools.chain()` takes several iterables as arguments and returns a single iterator that produces the contents of all of them as if they came from a single sequence.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import itertools\n\nfor i in itertools.chain([1, 2], [\"a\", \"b\"]):\n    print(i)</pre></div>"
    },
    {
      "id": 74,
      "title": "74. groupby Counts",
      "language": "python",
      "description": "Group words by first letter and count.",
      "initialCode": "import itertools\nwords=['ant','ape','bat']\n# Print a:2 then b:1 (group by first letter)\n\n",
      "fullSolution": "import itertools\nwords=['ant','ape','bat']\nfor key, grp in itertools.groupby(sorted(words, key=lambda w: w[0]), key=lambda w: w[0]):\n    count = sum(1 for _ in grp)\n    print(f'{key}:{count}')\n",
      "expectedOutput": "a:2\nb:1",
      "tutorial": "<p class=\"mb-4 text-gray-300\">`itertools.groupby()` makes an iterator that returns consecutive keys and groups from the iterable. The input needs to be sorted on the same key function.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from itertools import groupby\n\nfor key, group in groupby(\"AAABBC\"): # Works on strings too\n    print(f'{key}: {list(group)}')</pre></div>"
    },
    {
      "id": 75,
      "title": "75. Counter",
      "language": "python",
      "description": "Use Counter to count letters in a word (preserve first-seen order).",
      "initialCode": "from collections import Counter\n# Count letters in 'banana' and print b:1, a:3, n:2 on new lines\n\n",
      "fullSolution": "from collections import Counter\nfor k,v in Counter('banana').items():\n    print(f'{k}:{v}')\n",
      "expectedOutput": "b:1\na:3\nn:2",
      "tutorial": "<p class=\"mb-4 text-gray-300\">`collections.Counter` is a dict subclass for counting hashable objects. It is an unordered collection where elements are stored as dictionary keys and their counts are stored as dictionary values.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from collections import Counter\n\nc = Counter(\"gallahad\")\nprint(c) # Counter({'a': 3, 'l': 2, 'g': 1, 'h': 1, 'd': 1})</pre></div>"
    },
    {
      "id": 76,
      "title": "76. defaultdict",
      "language": "python",
      "description": "Group values by key without pre-initializing lists.",
      "initialCode": "from collections import defaultdict\n# Append two reds and print the red count (2)\n\n",
      "fullSolution": "from collections import defaultdict\nd = defaultdict(list)\nd['red'].append('apple')\nd['blue'].append('sky')\nd['red'].append('cherry')\nprint(len(d['red']))\n",
      "expectedOutput": "2",
      "tutorial": "<p class=\"mb-4 text-gray-300\">`collections.defaultdict` is a subclass of `dict` that calls a factory function to supply missing values.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from collections import defaultdict\n\nd = defaultdict(int) # 0 is the default for int()\nprint(d[\"missing_key\"]) # prints 0</pre></div>"
    },
    {
      "id": 77,
      "title": "77. deque",
      "language": "python",
      "description": "Use deque for fast appends/pops on both ends.",
      "initialCode": "from collections import deque\n# Start with [1,2], appendleft(0), append(3), print list(d)\n\n",
      "fullSolution": "from collections import deque\nd = deque([1,2])\nd.appendleft(0)\nd.append(3)\nprint(list(d))\n",
      "expectedOutput": "[0, 1, 2, 3]",
      "tutorial": "<p class=\"mb-4 text-gray-300\">`collections.deque` is a list-like container with fast appends and pops on either end.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from collections import deque\n\nd = deque([\"task2\", \"task3\"])\nd.appendleft(\"task1\")\nd.append(\"task4\")\nprint(d.popleft()) # task1</pre></div>"
    },
    {
      "id": 78,
      "title": "78. namedtuple",
      "language": "python",
      "description": "Create a lightweight tuple-like object with named fields.",
      "initialCode": "from collections import namedtuple\n# Define Point(x,y) and print sum of (2,3)\n\n",
      "fullSolution": "from collections import namedtuple\nPoint = namedtuple('Point', 'x y')\np = Point(2,3)\nprint(p.x + p.y)\n",
      "expectedOutput": "5",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Unpack iterables on the left-hand side to bind multiple names at once.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">a,b,c = (1,2,3)\nprint(a)\nprint(c)</pre></div>"
    },
    {
      "id": 79,
      "title": "79. contextmanager",
      "language": "python",
      "description": "Implement a simple context manager using @contextmanager.",
      "initialCode": "from contextlib import contextmanager\n# Print enter, work, exit in order using a context manager\n\n",
      "fullSolution": "from contextlib import contextmanager\n@contextmanager\ndef myctx():\n    print('enter')\n    try:\n        yield\n    finally:\n        print('exit')\n\nwith myctx():\n    print('work')\n",
      "expectedOutput": "enter\nwork\nexit",
      "tutorial": "<p class=\"mb-4 text-gray-300\">The `@contextmanager` decorator lets you build a context manager from a simple generator function, automatically handling the `__enter__` and `__exit__` parts.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from contextlib import contextmanager\n\n@contextmanager\ndef managed_resource(*args, **kwds):\n    print(\"Acquiring resource\")\n    yield\n    print(\"Releasing resource\")\n\nwith managed_resource():\n    print(\"Doing work\")</pre></div>"
    },
    {
      "id": 80,
      "title": "80. suppress",
      "language": "python",
      "description": "Ignore specific exceptions and continue.",
      "initialCode": "from contextlib import suppress\n# Suppress ZeroDivisionError then print kept\n\n",
      "fullSolution": "from contextlib import suppress\nwith suppress(ZeroDivisionError):\n    1/0\nprint('kept')\n",
      "expectedOutput": "kept",
      "tutorial": "<p class=\"mb-4 text-gray-300\">`contextlib.suppress` is a context manager to selectively ignore specified exceptions.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from contextlib import suppress\n\nwith suppress(FileNotFoundError):\n    with open(\"non_existent_file.txt\") as f:\n        print(\"This will not print\")\n\nprint(\"Program continues without crashing\")</pre></div>"
    },
    {
      "id": 81,
      "title": "81. pathlib",
      "language": "python",
      "description": "Write then read a small text file using pathlib.",
      "initialCode": "from pathlib import Path\n# Write 'hi' to note.txt then read and print it\n\n",
      "fullSolution": "from pathlib import Path\np = Path('note.txt')\np.write_text('hi')\nprint(p.read_text())\n",
      "expectedOutput": "hi",
      "tutorial": "<p class=\"mb-4 text-gray-300\">The `pathlib` module offers classes representing filesystem paths with semantics appropriate for different operating systems.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from pathlib import Path\n\np = Path(\"my_file.txt\")\np.write_text(\"Hello from pathlib!\")\nprint(p.read_text())</pre></div>"
    },
    {
      "id": 82,
      "title": "82. JSON dumps",
      "language": "python",
      "description": "Serialize a dict to a compact JSON string.",
      "initialCode": "import json\n# Dump {'a':1,'b':2} without spaces and print\n\n",
      "fullSolution": "import json\ns = json.dumps({'a':1,'b':2}, separators=(',',':'))\nprint(s)\n",
      "expectedOutput": "{\"a\":1,\"b\":2}",
      "tutorial": "<p class=\"mb-4 text-gray-300\">`json.dumps()` serializes a Python object to a JSON formatted `str`.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import json\n\ndata = {\"name\": \"John\", \"age\": 30}\njson_string = json.dumps(data, indent=2)\nprint(json_string)</pre></div>"
    },
    {
      "id": 83,
      "title": "83. CSV write/read",
      "language": "python",
      "description": "Write a tiny CSV then read it back and print a value.",
      "initialCode": "import csv\n# Write rows ['x','y'] and ['1','2'] to data.csv, read and print 2\n\n",
      "fullSolution": "import csv\nwith open('data.csv','w', newline='') as f:\n    w = csv.writer(f)\n    w.writerow(['x','y'])\n    w.writerow(['1','2'])\nwith open('data.csv') as f:\n    r = csv.reader(f)\n    header = next(r)\n    row = next(r)\n    print(row[1])\n",
      "expectedOutput": "2",
      "tutorial": "<p class=\"mb-4 text-gray-300\">The `csv` module implements classes to read and write tabular data in CSV format.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import csv, io\n\noutput = io.StringIO()\nwriter = csv.writer(output)\nwriter.writerow([\"name\", \"age\"])\nwriter.writerow([\"Alice\", 25])\nprint(output.getvalue())</pre></div>"
    },
    {
      "id": 84,
      "title": "84. Regex Substitution",
      "language": "python",
      "description": "Replace all digits with # and print the result.",
      "initialCode": "import re\n# Replace digits in 'a1b2' with '#' and print\n\n",
      "fullSolution": "import re\nprint(re.sub(r'\\\\d', '#', 'a1b2'))\n",
      "expectedOutput": "a#b#",
      "tutorial": "<p class=\"mb-4 text-gray-300\">`re.sub()` returns the string obtained by replacing the leftmost non-overlapping occurrences of pattern in string by the replacement `repl`.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import re\n\nprint(re.sub(r\"\\d+\", \"#\", \"There are 12 apples and 34 oranges.\"))</pre></div>"
    },
    {
      "id": 85,
      "title": "85. datetime Format",
      "language": "python",
      "description": "Parse an ISO date and print a different format.",
      "initialCode": "from datetime import datetime\n# Parse '2023-01-02' and print '2023/01/02'\n\n",
      "fullSolution": "from datetime import datetime\nd = datetime.fromisoformat('2023-01-02')\nprint(d.strftime('%Y/%m/%d'))\n",
      "expectedOutput": "2023/01/02",
      "tutorial": "<p class=\"mb-4 text-gray-300\">The `datetime` module supplies classes for manipulating dates and times.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from datetime import datetime\n\nnow = datetime.now()\nprint(now.strftime(\"%Y-%m-%d %H:%M:%S\"))</pre></div>"
    },
    {
      "id": 86,
      "title": "86. Logging",
      "language": "python",
      "description": "Configure logging to print a simple INFO message.",
      "initialCode": "import logging\n# Configure to print 'INFO:Ready' and log it\n\n",
      "fullSolution": "import logging\nlogging.basicConfig(level=logging.INFO, format='%(levelname)s:%(message)s')\nlogging.info('Ready')\n",
      "expectedOutput": "INFO:Ready",
      "tutorial": "<p class=\"mb-4 text-gray-300\">The `logging` module defines functions and classes which implement a flexible event logging system for applications and libraries.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import logging\n\nlogging.basicConfig(level=logging.INFO)\nlogging.info(\"This is an info message.\")</pre></div>"
    },
    {
      "id": 87,
      "title": "87. *args",
      "language": "python",
      "description": "Use *args to accept a variable number of arguments.",
      "initialCode": "# Define f(*args) printing len(args); call f(1,2,3)\n\n",
      "fullSolution": "def f(*args):\n    print(len(args))\n\nf(1,2,3)\n",
      "expectedOutput": "3",
      "tutorial": "<p class=\"mb-4 text-gray-300\">The special syntax `*args` in function definitions is used to pass a variable number of non-keyword arguments to a function.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">def my_sum(*numbers):\n    return sum(numbers)\n\nprint(my_sum(1, 2, 3, 4)) # 10</pre></div>"
    },
    {
      "id": 88,
      "title": "88. functools.partial",
      "language": "python",
      "description": "Create a function with one argument pre-filled.",
      "initialCode": "from functools import partial\n# Make add5 so add5(7) == 12 and print it\n\n",
      "fullSolution": "from functools import partial\n\ndef add(a,b):\n    return a+b\n\nadd5 = partial(add, 5)\nprint(add5(7))\n",
      "expectedOutput": "12",
      "tutorial": "<p class=\"mb-4 text-gray-300\">`functools.partial` allows you to \"freeze\" some portion of a function's arguments and/or keywords, resulting in a new object with a simplified signature.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from functools import partial\n\nbasetwo = partial(int, base=2)\nprint(basetwo(\"10010\")) # 18</pre></div>"
    },
    {
      "id": 89,
      "title": "89. lru_cache",
      "language": "python",
      "description": "Memoize an expensive function and reuse results.",
      "initialCode": "from functools import lru_cache\n# Memoize fib and print fib(10)\n\n",
      "fullSolution": "from functools import lru_cache\n\n@lru_cache(maxsize=None)\ndef fib(n):\n    return n if n<2 else fib(n-1)+fib(n-2)\n\nprint(fib(10))\n",
      "expectedOutput": "55",
      "tutorial": "<p class=\"mb-4 text-gray-300\">`functools.lru_cache` is a decorator to wrap a function with a memoizing callable that saves up to the `maxsize` most recent calls.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from functools import lru_cache\n\n@lru_cache(maxsize=None)\ndef fib(n):\n    if n < 2: return n\n    return fib(n-1) + fib(n-2)\n\nprint(fib(10)) # 55</pre></div>"
    },
    {
      "id": 90,
      "title": "90. Custom Ordering (__lt__)",
      "language": "python",
      "description": "Implement __lt__ to make a class sortable.",
      "initialCode": "# Define Box with value and __lt__ then sort [3,1,2] boxes and print values\n\n",
      "fullSolution": "class Box:\n    def __init__(self, v):\n        self.v = v\n    def __lt__(self, other):\n        return self.v < other.v\n\nboxes = [Box(3), Box(1), Box(2)]\nfor b in sorted(boxes):\n    print(b.v)\n",
      "expectedOutput": "1\n2\n3",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Implementing the `__lt__` (less than) rich comparison method allows instances of your class to be sorted naturally.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">class Person:\n    def __init__(self, name, age):\n        self.name, self.age = name, age\n    def __lt__(self, other):\n        return self.age < other.age\n\np1 = Person(\"Alice\", 25)\np2 = Person(\"Bob\", 30)\nprint(p1 < p2) # True</pre></div>"
    },
    {
      "id": 91,
      "title": "91. __str__",
      "language": "python",
      "description": "Customize string representation for a class.",
      "initialCode": "# Make Person print as Person(Alice)\n\n",
      "fullSolution": "class Person:\n    def __init__(self, name):\n        self.name = name\n    def __str__(self):\n        return f'Person({self.name})'\n\nprint(Person('Alice'))\n",
      "expectedOutput": "Person(Alice)",
      "tutorial": "<p class=\"mb-4 text-gray-300\">The `__str__` method should return a \"user-friendly\" string representation of the object, which is what `print()` and `str()` will display.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">class Person:\n    def __init__(self, name):\n        self.name = name\n    def __str__(self):\n        return f\"Person: {self.name}\"\n\nprint(Person(\"Alice\"))</pre></div>"
    },
    {
      "id": 92,
      "title": "92. Ordered Dataclass",
      "language": "python",
      "description": "Make dataclass orderable and compare two instances.",
      "initialCode": "from dataclasses import dataclass\n# Make Item(order=True) and print Item(5) < Item(7)\n\n",
      "fullSolution": "from dataclasses import dataclass\n\n@dataclass(order=True)\nclass Item:\n    price: int\n\nprint(Item(5) < Item(7))\n",
      "expectedOutput": "True",
      "tutorial": "<p class=\"mb-4 text-gray-300\">A variable is a named reference to a value. Python infers types at runtime (dynamic typing).</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">my_number = 42\nname = \"Alice\"\npi = 3.14\nis_active = True\nprint(name, my_number)</pre></div>"
    },
    {
      "id": 93,
      "title": "93. itertools.product",
      "language": "python",
      "description": "Cartesian product of two lists.",
      "initialCode": "import itertools\n# Print 1a,1b,2a,2b each on new lines\n\n",
      "fullSolution": "import itertools\nfor a,b in itertools.product([1,2], ['a','b']):\n    print(f'{a}{b}')\n",
      "expectedOutput": "1a\n1b\n2a\n2b",
      "tutorial": "<p class=\"mb-4 text-gray-300\">`itertools.product()` provides the cartesian product of input iterables.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import itertools\n\nfor p in itertools.product(\"AB\", \"12\"):\n    print(\"\".join(p)) # A1, A2, B1, B2</pre></div>"
    },
    {
      "id": 94,
      "title": "94. permutations",
      "language": "python",
      "description": "Generate all length-2 permutations of 'abc'.",
      "initialCode": "import itertools\n# Print: ab, ac, ba, bc, ca, cb (each on new line)\n\n",
      "fullSolution": "import itertools\nfor a,b in itertools.permutations('abc', 2):\n    print(a+b)\n",
      "expectedOutput": "ab\nac\nba\nbc\nca\ncb",
      "tutorial": "<p class=\"mb-4 text-gray-300\">`itertools.permutations()` returns successive r-length permutations of elements in an iterable.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import itertools\n\nprint(list(itertools.permutations(\"ABC\", 2)))</pre></div>"
    },
    {
      "id": 95,
      "title": "95. accumulate",
      "language": "python",
      "description": "Produce running totals and print them.",
      "initialCode": "import itertools\n# Accumulate sums over [1,2,3] and print each\n\n",
      "fullSolution": "import itertools\nfor x in itertools.accumulate([1,2,3]):\n    print(x)\n",
      "expectedOutput": "1\n3\n6",
      "tutorial": "<p class=\"mb-4 text-gray-300\">`itertools.accumulate()` makes an iterator that returns accumulated sums, or accumulated results of other binary functions.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import itertools\n\nprint(list(itertools.accumulate([1, 2, 3, 4]))) # [1, 3, 6, 10]</pre></div>"
    },
    {
      "id": 96,
      "title": "96. Exception Chaining",
      "language": "python",
      "description": "Raise from another exception and show the cause type.",
      "initialCode": "# Print ValueError by raising RuntimeError from ValueError\n\n",
      "fullSolution": "try:\n    try:\n        raise ValueError('x')\n    except ValueError as e:\n        raise RuntimeError('wrap') from e\nexcept Exception as e:\n    print(type(e.__cause__).__name__)\n",
      "expectedOutput": "ValueError",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Wrap risky code in try/except. Catch specific exceptions first to handle them appropriately.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">try:\n    1/0\nexcept ZeroDivisionError:\n    print('Oops! Division by zero')</pre></div>"
    },
    {
      "id": 97,
      "title": "97. threading + Lock",
      "language": "python",
      "description": "Use two threads to append values safely, then sum.",
      "initialCode": "import threading\n# Start two threads appending 1 and 2 (with a lock) then print the sum 3\n\n",
      "fullSolution": "import threading\nlock = threading.Lock()\nvals = []\n\ndef add(v):\n    with lock:\n        vals.append(v)\n\nt1 = threading.Thread(target=add, args=(1,))\nt2 = threading.Thread(target=add, args=(2,))\nt1.start(); t2.start(); t1.join(); t2.join()\nprint(sum(vals))\n",
      "expectedOutput": "3",
      "tutorial": "<p class=\"mb-4 text-gray-300\">The `threading` module provides a way to create and manage threads. A `Lock` is a synchronization primitive that is not owned by a particular thread when locked.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import threading\n\nlock = threading.Lock()\n\ndef critical_section():\n    with lock:\n        print(\"Critical section accessed\")\n\ncritical_section()</pre></div>"
    },
    {
      "id": 98,
      "title": "98. ThreadPoolExecutor",
      "language": "python",
      "description": "Submit tasks and collect results in order.",
      "initialCode": "from concurrent.futures import ThreadPoolExecutor\n# Submit squares 1..3 and print results 1,4,9 on new lines\n\n",
      "fullSolution": "from concurrent.futures import ThreadPoolExecutor\nwith ThreadPoolExecutor(max_workers=3) as ex:\n    futs = [ex.submit(lambda x: x*x, i) for i in (1,2,3)]\n    for f in futs:\n        print(f.result())\n",
      "expectedOutput": "1\n4\n9",
      "tutorial": "<p class=\"mb-4 text-gray-300\">`concurrent.futures.ThreadPoolExecutor` provides a high-level interface for asynchronously executing callables in a pool of threads.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from concurrent.futures import ThreadPoolExecutor\n\nwith ThreadPoolExecutor(max_workers=1) as executor:\n    future = executor.submit(pow, 2, 5)\n    print(future.result()) # 32</pre></div>"
    },
    {
      "title": "99. Pick the Right Concurrency Tool",
      "language": "python",
      "description": "Complete pick_tool(kind) so 'many-waits' -> 'asyncio', 'io-bound' -> 'threading', and 'cpu-bound' -> 'multiprocessing'. Then print the tool for each workload.",
      "initialCode": "def pick_tool(kind):\n    # Return the best concurrency tool for the workload kind\n    pass\n\nworkloads = ['many-waits', 'io-bound', 'cpu-bound']\nfor work in workloads:\n    print(pick_tool(work))\n",
      "fullSolution": "def pick_tool(kind):\n    mapping = {\n        'many-waits': 'asyncio',\n        'io-bound': 'threading',\n        'cpu-bound': 'multiprocessing',\n    }\n    return mapping[kind]\n\nworkloads = ['many-waits', 'io-bound', 'cpu-bound']\nfor work in workloads:\n    print(pick_tool(work))\n",
      "expectedOutput": "asyncio\nthreading\nmultiprocessing",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Different workloads call for different concurrency models. Network-heavy or timer-heavy tasks fit <code>asyncio</code>, blocking I/O suits threads, and CPU-intensive crunching benefits from separate processes.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">def choose(work):\n    if work == \"io-bound\":\n        return \"threading\"\n    if work == \"cpu-bound\":\n        return \"multiprocessing\"\n    return \"asyncio\"\n\nprint(choose('io-bound'))  # threading</pre></div>",
      "id": 99
    },
    {
      "id": 100,
      "title": "100. asyncio.gather",
      "language": "python",
      "description": "Run async tasks concurrently and print results.",
      "initialCode": "import asyncio\n# Define async f(x)->2*x; gather for 1,2,3 and print results\n\n",
      "fullSolution": "import asyncio\nasync def f(x):\n    return 2*x\nasync def main():\n    res = await asyncio.gather(f(1), f(2), f(3))\n    for v in res:\n        print(v)\nasyncio.run(main())\n",
      "expectedOutput": "2\n4\n6",
      "tutorial": "<p class=\"mb-4 text-gray-300\">`asyncio` is a library to write concurrent code using the `async/await` syntax. `asyncio.gather` runs awaitable objects concurrently.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import asyncio\n\nasync def main():\n    print(await asyncio.gather(asyncio.sleep(1, result=\"Done\")))\n\nasyncio.run(main())</pre></div>"
    },
    {
      "id": 101,
      "title": "101. glob",
      "language": "python",
      "description": "Create files and match them with glob pattern.",
      "initialCode": "import glob\n# Create a.txt and b.txt then glob and print names sorted\n\n",
      "fullSolution": "import glob\nopen('a.txt','w').close()\nopen('b.txt','w').close()\nfor name in sorted(glob.glob('*.txt')):\n    print(name)\n",
      "expectedOutput": "a.txt\nb.txt",
      "tutorial": "<p class=\"mb-4 text-gray-300\">The `glob` module finds all the pathnames matching a specified pattern according to the rules used by the Unix shell.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import glob\n\n# This example won't run here, but shows the concept.\n# open(\"a.txt\", \"w\"); open(\"b.log\", \"w\")\n# print(glob.glob(\"*.txt\")) # ['a.txt']</pre></div>"
    },
    {
      "id": 102,
      "title": "102. decimal",
      "language": "python",
      "description": "Exact decimal arithmetic for financial values.",
      "initialCode": "from decimal import Decimal\n# Print Decimal('0.1')+Decimal('0.2')\n\n",
      "fullSolution": "from decimal import Decimal\nprint(Decimal('0.1') + Decimal('0.2'))\n",
      "expectedOutput": "0.3",
      "tutorial": "<p class=\"mb-4 text-gray-300\">The `decimal` module provides a `Decimal` datatype for decimal floating-point arithmetic, which is useful for financial applications.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from decimal import Decimal\n\nprint(Decimal(\"0.1\") + Decimal(\"0.2\")) # 0.3</pre></div>"
    },
    {
      "id": 103,
      "title": "103. fractions",
      "language": "python",
      "description": "Do rational arithmetic with exact fractions.",
      "initialCode": "from fractions import Fraction\n# Print Fraction(1,3)+Fraction(1,6)\n\n",
      "fullSolution": "from fractions import Fraction\nprint(Fraction(1,3) + Fraction(1,6))\n",
      "expectedOutput": "1/2",
      "tutorial": "<p class=\"mb-4 text-gray-300\">The `fractions` module provides support for rational number arithmetic.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from fractions import Fraction\n\nprint(Fraction(1, 3) + Fraction(1, 3)) # 2/3</pre></div>"
    },
    {
      "id": 104,
      "title": "104. bisect_left",
      "language": "python",
      "description": "Binary search for insertion position.",
      "initialCode": "import bisect\n# Find insertion index of 3 in [1,2,4,5] using bisect_left and print\n\n",
      "fullSolution": "import bisect\nprint(bisect.bisect_left([1,2,4,5], 3))\n",
      "expectedOutput": "2",
      "tutorial": "<p class=\"mb-4 text-gray-300\">The `bisect` module provides support for maintaining a list in sorted order without having to sort the list after each insertion.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import bisect\n\nitems = [1, 2, 4]\nbisect.insort(items, 3)\nprint(items) # [1, 2, 3, 4]</pre></div>"
    },
    {
      "id": 105,
      "title": "105. heapq",
      "language": "python",
      "description": "Use a min-heap to pop the smallest item.",
      "initialCode": "import heapq\n# Push 3,1,2; pop and print the smallest\n\n",
      "fullSolution": "import heapq\nh=[]\nheapq.heappush(h,3); heapq.heappush(h,1); heapq.heappush(h,2)\nprint(heapq.heappop(h))\n",
      "expectedOutput": "1",
      "tutorial": "<p class=\"mb-4 text-gray-300\">The `heapq` module provides an implementation of the min-heap queue algorithm.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import heapq\n\nh = [3, 1, 4, 1, 5, 9, 2]\nheapq.heapify(h)\nprint(heapq.heappop(h)) # 1</pre></div>"
    },
    {
      "id": 106,
      "title": "106. statistics.mean",
      "language": "python",
      "description": "Compute the mean of a small list.",
      "initialCode": "import statistics\n# Print mean of [1,2,3]\n\n",
      "fullSolution": "import statistics\nprint(statistics.mean([1,2,3]))\n",
      "expectedOutput": "2",
      "tutorial": "<p class=\"mb-4 text-gray-300\">The `statistics` module provides functions for calculating mathematical statistics of numeric data.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import statistics\n\nprint(statistics.mean([1, 2, 3, 4, 4])) # 2.8</pre></div>"
    },
    {
      "id": 107,
      "title": "107. Slice Assignment",
      "language": "python",
      "description": "Replace a slice of a list in-place.",
      "initialCode": "letters=['a','b','c']\n# Replace letters[1:3] with ['X'] then print letters\n\n",
      "fullSolution": "letters=['a','b','c']\nletters[1:3] = ['X']\nprint(letters)\n",
      "expectedOutput": "['a', 'X']",
      "tutorial": "<p class=\"mb-4 text-gray-300\">You can assign to a slice of a list to replace, remove, or insert elements.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">a = [1, 2, 3, 4]\na[1:3] = [8, 9, 10]\nprint(a) # [1, 8, 9, 10, 4]</pre></div>"
    },
    {
      "id": 108,
      "title": "108. OrderedDict",
      "language": "python",
      "description": "Preserve insertion order of keys explicitly.",
      "initialCode": "from collections import OrderedDict\n# Create OrderedDict and print keys in order b then a\n\n",
      "fullSolution": "from collections import OrderedDict\nd = OrderedDict([('b',2),('a',1)])\nfor k in d.keys():\n    print(k)\n",
      "expectedOutput": "b\na",
      "tutorial": "<p class=\"mb-4 text-gray-300\">`collections.OrderedDict` is a dict subclass that remembers the order that keys were first inserted. (Note: standard dicts in Python 3.7+ also preserve insertion order.)</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from collections import OrderedDict\n\nd = OrderedDict.fromkeys(\"abcde\")\nd.move_to_end(\"b\")\nprint(\"\".join(d.keys())) # acdeb</pre></div>"
    },
    {
      "id": 109,
      "title": "109. frozenset",
      "language": "python",
      "description": "Use an immutable set and test membership.",
      "initialCode": "# Create frozenset({1,2,3}) and print if 2 in it\n\n",
      "fullSolution": "s = frozenset({1,2,3})\nprint(2 in s)\n",
      "expectedOutput": "True",
      "tutorial": "<p class=\"mb-4 text-gray-300\">`frozenset` is an immutable version of `set`. Since it is hashable, it can be used as a dictionary key or as an element of another set.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">fs = frozenset([1, 2, 3])\n# fs.add(4) would raise an AttributeError</pre></div>"
    },
    {
      "id": 110,
      "title": "110. Sort by Last Char",
      "language": "python",
      "description": "Sort words by their last character in descending order.",
      "initialCode": "words=['ab','ba','aa']\n# Sort by last char descending and print each on new lines\n\n",
      "fullSolution": "words=['ab','ba','aa']\nfor w in sorted(words, key=lambda s: s[-1], reverse=True):\n    print(w)\n",
      "expectedOutput": "ab\nba\naa",
      "tutorial": "<p class=\"mb-4 text-gray-300\">You can provide a `lambda` to the `key` argument of `sorted` to implement custom sorting logic, such as sorting by the last character of a string.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">words = [\"apple\", \"fig\", \"banana\"]\nprint(sorted(words, key=lambda w: w[-1]))</pre></div>"
    },
    {
      "id": 111,
      "title": "111. Custom Iterator",
      "language": "python",
      "description": "Implement a simple iterator that yields 1..3.",
      "initialCode": "# Make a class that implements __iter__ and __next__ to yield 1,2,3 then StopIteration\n\n",
      "fullSolution": "class OneToThree:\n    def __init__(self):\n        self.cur = 1\n    def __iter__(self):\n        return self\n    def __next__(self):\n        if self.cur <= 3:\n            v = self.cur\n            self.cur += 1\n            return v\n        raise StopIteration\n\nfor x in OneToThree():\n    print(x)\n",
      "expectedOutput": "1\n2\n3",
      "tutorial": "<p class=\"mb-4 text-gray-300\">To create a custom iterator, a class needs to implement the `__iter__()` and `__next__()` methods.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">class UpToThree:\n    def __init__(self):\n        self.count = 1\n    def __iter__(self):\n        return self\n    def __next__(self):\n        if self.count > 3: raise StopIteration\n        val = self.count\n        self.count += 1\n        return val\n\nprint(list(UpToThree())) # [1, 2, 3]</pre></div>"
    },
    {
      "id": 112,
      "title": "112. Capstone: Top Student",
      "language": "python",
      "description": "Parse JSON of students and print the top-scoring student's name.",
      "initialCode": "import json\n# Given the JSON string s below, parse it and print the top student's name\n# by score.\n\ns = '[{\"name\":\"Alice\",\"score\":90},{\"name\":\"Bob\",\"score\":80},{\"name\":\"Charlie\",\"score\":100}]'\n# Your code here\n\n",
      "fullSolution": "import json\ns = '[{\"name\":\"Alice\",\"score\":90},{\"name\":\"Bob\",\"score\":80},{\"name\":\"Charlie\",\"score\":100}]'\nstudents = json.loads(s)\nprint(max(students, key=lambda d: d['score'])['name'])\n",
      "expectedOutput": "Charlie",
      "tutorial": "<p class=\"mb-4 text-gray-300\">This capstone combines several concepts: JSON parsing, finding the maximum item in a list of dictionaries using a lambda function as the key.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import json\ns = '[{\"name\":\"Alice\",\"score\":90},{\"name\":\"Charlie\",\"score\":100}]'\nstudents = json.loads(s)\nrichest = max(students, key=lambda s: s[\"score\"])\nprint(richest[\"name\"]) # Charlie</pre></div>"
    },
    {
      "id": 113,
      "title": "113. Dataclasses Basics",
      "language": "python",
      "description": "Define a dataclass and compute an average score.",
      "initialCode": "from dataclasses import dataclass\nfrom typing import List\n\n# Define a @dataclass Student with fields name: str and scores: List[int].\n# Create Student('Alice', [100, 80]) and print the average score as a float.\n\n",
      "fullSolution": "from dataclasses import dataclass\nfrom typing import List\n\n@dataclass\nclass Student:\n    name: str\n    scores: List[int]\n\ns = Student('Alice', [100, 80])\nprint(sum(s.scores) / len(s.scores))\n",
      "fullSolutionCommented": "from dataclasses import dataclass\nfrom typing import List\n\n# Define a simple data container. @dataclass generates __init__, __repr__, etc.\n@dataclass\nclass Student:\n    name: str\n    scores: List[int]\n\n# Create a Student and compute the mean score. Use float division (len > 0 here).\ns = Student('Alice', [100, 80])\navg = sum(s.scores) / len(s.scores)\nprint(avg)\n",
      "expectedOutput": "90.0",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Use <code>@dataclass</code> to auto-generate boilerplate like __init__ and __repr__. It works well for simple data containers.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from dataclasses import dataclass\n\n@dataclass\nclass Point:\n    x: int\n    y: int\n\nprint(Point(1, 2))</pre></div>"
    },
    {
      "id": 114,
      "title": "114. functools.lru_cache",
      "language": "python",
      "description": "Memoize a recursive Fibonacci function and print fib(10).",
      "initialCode": "from functools import lru_cache\n\n# Define fib(n) using @lru_cache(None) and print fib(10)\n\n",
      "fullSolution": "from functools import lru_cache\n\n@lru_cache(None)\ndef fib(n: int) -> int:\n    return n if n < 2 else fib(n-1) + fib(n-2)\n\nprint(fib(10))\n",
      "fullSolutionCommented": "from functools import lru_cache\n\n# Cache results for each n to avoid exponential recursion.\n@lru_cache(None)\ndef fib(n: int) -> int:\n    # Base cases: 0 -> 0, 1 -> 1\n    if n < 2:\n        return n\n    # Recurrence: F(n) = F(n-1) + F(n-2)\n    return fib(n-1) + fib(n-2)\n\nprint(fib(10))  # 55\n",
      "expectedOutput": "55",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Use <code>functools.lru_cache</code> to cache function results and avoid recomputation in recursive algorithms.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from functools import lru_cache\n\n@lru_cache(None)\ndef f(x):\n    return x*x\n\nprint(f(5))</pre></div>"
    },
    {
      "id": 115,
      "title": "115. itertools.groupby",
      "language": "python",
      "description": "Count consecutive character groups using groupby and print counts.",
      "initialCode": "from itertools import groupby\n\ns = 'aabbbc'\n# Use groupby to print: a:2, b:3, c:1 each on new lines\n\n",
      "fullSolution": "from itertools import groupby\n\ns = 'aabbbc'\nfor ch, grp in groupby(s):\n    print(f\"{ch}:{len(list(grp))}\")\n",
      "fullSolutionCommented": "from itertools import groupby\n\n# groupby groups consecutive equal items. Convert each group iterator to a list to count.\ns = 'aabbbc'\nfor ch, grp in groupby(s):\n    count = len(list(grp))\n    print(f\\\"{ch}:{count}\\\")\n",
      "expectedOutput": "a:2\nb:3\nc:1",
      "tutorial": "<p class=\"mb-4 text-gray-300\">`itertools.groupby` groups consecutive items with the same key. Convert the group iterator to a list to count items.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from itertools import groupby\nprint([(k, len(list(g))) for k,g in groupby('aaabb')]) # [('a', 3), ('b', 2)]</pre></div>"
    },
    {
      "id": 116,
      "title": "116. Generator Flatten",
      "language": "python",
      "description": "Use a generator with yield from to flatten nested lists.",
      "initialCode": "# Define flatten(nested) that yields each int from nested lists\n# Then print each number on its own line for [[1,2],[3],[4,5]]\n\n",
      "fullSolution": "def flatten(nested):\n    for sub in nested:\n        yield from sub\n\nfor x in flatten([[1,2],[3],[4,5]]):\n    print(x)\n",
      "fullSolutionCommented": "# Use 'yield from' to delegate to the sub-iterables.\ndef flatten(nested):\n    for sub in nested:\n        # sub is a list of ints; yield its items one-by-one\n        yield from sub\n\nfor x in flatten([[1,2],[3],[4,5]]):\n    print(x)\n",
      "expectedOutput": "1\n2\n3\n4\n5",
      "tutorial": "<p class=\"mb-4 text-gray-300\">`yield from` delegates to a sub-iterator, making generator composition simple and readable.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">def chain(*iters):\n    for it in iters:\n        yield from it\n\nprint(list(chain([1,2], [3]))) # [1, 2, 3]</pre></div>"
    },
    {
      "id": 117,
      "title": "117. asyncio.gather",
      "language": "python",
      "description": "Run coroutines concurrently and sum results.",
      "initialCode": "import asyncio\n\n# Define async def square(x): return x*x\n# Use asyncio.gather over [1,2,3] and print the sum of results\n\n",
      "fullSolution": "import asyncio\n\nasync def square(x):\n    return x*x\n\nasync def main():\n    results = await asyncio.gather(*(square(x) for x in [1,2,3]))\n    print(sum(results))\n\nasyncio.run(main())\n",
      "fullSolutionCommented": "import asyncio\n\n# Define an async function. It returns immediately with a coroutine when called.\nasync def square(x):\n    return x * x\n\nasync def main():\n    # Schedule the coroutines concurrently and wait for all to finish.\n    coros = [square(x) for x in [1, 2, 3]]\n    results = await asyncio.gather(*coros)\n    print(sum(results))  # 14\n\n# Drive the event loop.\nasyncio.run(main())\n",
      "expectedOutput": "14",
      "tutorial": "<p class=\"mb-4 text-gray-300\">`asyncio.gather` concurrently awaits multiple coroutines and returns their results as a list.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import asyncio\n\nasync def add(a,b):\n    return a+b\n\nprint(asyncio.run(add(2,3)))</pre></div>"
    },
    {
      "id": 118,
      "title": "118. Context Manager",
      "language": "python",
      "description": "Use contextlib.contextmanager to manage setup and teardown.",
      "initialCode": "import contextlib\n\n# Create a context manager that prints 'enter' on enter and 'exit' on exit\n# Within it, print 'inside'\n\n",
      "fullSolution": "import contextlib\n\n@contextlib.contextmanager\ndef tag():\n    print('enter')\n    try:\n        yield\n    finally:\n        print('exit')\n\nwith tag():\n    print('inside')\n",
      "fullSolutionCommented": "import contextlib\n\n# Build a context manager with setup/teardown around the 'with' block.\n@contextlib.contextmanager\ndef tag():\n    print('enter')  # setup\n    try:\n        yield       # body runs here\n    finally:\n        print('exit')  # teardown always runs\n\nwith tag():\n    print('inside')\n",
      "expectedOutput": "enter\ninside\nexit",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Context managers wrap a block with setup and teardown steps. Use them for resources like files, locks, or timing.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import contextlib\n\n@contextlib.contextmanager\ndef banner():\n    print('---')\n    try:\n        yield\n    finally:\n        print('---')\n\nwith banner():\n    print('Hello')</pre></div>"
    },
    {
      "id": 119,
      "title": "119. @property",
      "language": "python",
      "description": "Expose a computed attribute via @property.",
      "initialCode": "# Define Temperature(celsius) with a @property fahrenheit that converts C->F\n# Print the fahrenheit for 100C as an integer\n\n",
      "fullSolution": "class Temperature:\n    def __init__(self, c):\n        self._c = c\n    @property\n    def fahrenheit(self):\n        return self._c * 9/5 + 32\n\nprint(int(Temperature(100).fahrenheit))\n",
      "fullSolutionCommented": "# Expose a computed attribute via @property.\nclass Temperature:\n    def __init__(self, celsius):\n        self._c = celsius\n    @property\n    def fahrenheit(self):\n        # F = C * 9/5 + 32\n        return self._c * 9/5 + 32\n\nprint(int(Temperature(100).fahrenheit))  # 212\n",
      "expectedOutput": "212",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Use <code>@property</code> for computed attributes that look like fields but run logic on access.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">class Circle:\n    def __init__(self, r): self.r = r\n    @property\n    def area(self): return 3.14159 * self.r * self.r\n\nprint(int(Circle(10).area))</pre></div>"
    },
    {
      "id": 120,
      "title": "120. heapq.nlargest",
      "language": "python",
      "description": "Print the two largest numbers in descending order.",
      "initialCode": "import heapq\n\narr = [5,1,9,7,2]\n# Print the two largest values on separate lines (largest first)\n\n",
      "fullSolution": "import heapq\n\narr = [5,1,9,7,2]\nfor x in heapq.nlargest(2, arr):\n    print(x)\n",
      "fullSolutionCommented": "import heapq\n\n# nlargest finds the top-k efficiently without fully sorting.\narr = [5, 1, 9, 7, 2]\nfor x in heapq.nlargest(2, arr):\n    print(x)  # 9 then 7\n",
      "expectedOutput": "9\n7",
      "tutorial": "<p class=\"mb-4 text-gray-300\">`heapq.nlargest(k, iterable)` efficiently returns the k largest items without fully sorting the list.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import heapq\nprint(heapq.nlargest(3, [5,1,9,7,2])) # [9, 7, 5]</pre></div>"
    },
    {
      "id": 121,
      "title": "121. Regex Named Groups",
      "language": "python",
      "description": "Extract fields using named capture groups.",
      "initialCode": "import re\n\ns = 'User alice, id=42'\n# Print 'alice:42' using named groups 'name' and 'id'\n\n",
      "fullSolution": "import re\n\ns = 'User alice, id=42'\nm = re.search(r\"User (?P<name>\\w+), id=(?P<id>\\d+)\", s)\nprint(f\"{m.group('name')}:{m.group('id')}\")\n",
      "fullSolutionCommented": "import re\n\n# Use named groups (?P<name>...) for clarity; access via group('name').\ns = 'User alice, id=42'\npat = r\"User (?P<name>\\w+), id=(?P<id>\\d+)\"\nm = re.search(pat, s)\nprint(f\\\"{m.group('name')}:{m.group('id')}\\\")\n",
      "expectedOutput": "alice:42",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Named groups make regex matches easier to read and maintain. Access them by name via <code>match.group('name')</code>.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import re\nm = re.search(r\"(?P&lt;word&gt;\\w+)-(\\d+)\", 'abc-123')\nprint(m.group('word')) # abc</pre></div>"
    },
    {
      "id": 122,
      "title": "122. ThreadPoolExecutor",
      "language": "python",
      "description": "Use a thread pool to map a function and sum results.",
      "initialCode": "from concurrent.futures import ThreadPoolExecutor\n\n# Square the numbers [1,2,3,4] using a ThreadPoolExecutor and print the sum\n\n",
      "fullSolution": "from concurrent.futures import ThreadPoolExecutor\n\ndef sq(x):\n    return x*x\n\nwith ThreadPoolExecutor(max_workers=2) as ex:\n    print(sum(ex.map(sq, [1,2,3,4])))\n",
      "fullSolutionCommented": "from concurrent.futures import ThreadPoolExecutor\n\n# Map a function across inputs in a thread pool and aggregate results.\ndef sq(x):\n    return x * x\n\nwith ThreadPoolExecutor(max_workers=2) as ex:\n    # ex.map returns a generator of results in input order\n    total = sum(ex.map(sq, [1, 2, 3, 4]))\n    print(total)  # 30\n",
      "expectedOutput": "30",
      "tutorial": "<p class=\"mb-4 text-gray-300\">`ThreadPoolExecutor` runs callables on a pool of threads. Use <code>map</code> to apply a function to many inputs.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from concurrent.futures import ThreadPoolExecutor\nwith ThreadPoolExecutor() as ex:\n    print(list(ex.map(lambda x: x+1, [1,2,3]))) # [2,3,4]</pre></div>"
    },
    {
      "id": 123,
      "title": "123. Capstone: CSV ETL",
      "language": "python",
      "description": "Parse a CSV string and compute total revenue for rows with price >= 10.",
      "initialCode": "import csv\nimport io\n\ndata = '''id,price,qty\n1,10,2\n2,15,1\n3,8,5\n'''\n# Compute total revenue (price*qty) for rows with price >= 10 and print it\n\n",
      "fullSolution": "import csv\nimport io\n\ndata = '''id,price,qty\n1,10,2\n2,15,1\n3,8,5\n'''\nreader = csv.DictReader(io.StringIO(data))\nprint(sum(int(r['price'])*int(r['qty']) for r in reader if int(r['price']) >= 10))\n",
      "fullSolutionCommented": "import csv\nimport io\n\n# Parse CSV into dicts, filter rows, and aggregate revenue.\ndata = '''id,price,qty\n1,10,2\n2,15,1\n3,8,5\n'''\nreader = csv.DictReader(io.StringIO(data))\nrevenue = 0\nfor row in reader:\n    price = int(row['price'])\n    qty = int(row['qty'])\n    if price >= 10:\n        revenue += price * qty\nprint(revenue)  # 35\n",
      "expectedOutput": "35",
      "tutorial": "<p class=\"mb-4 text-gray-300\">CSV is a common interchange format. Use <code>csv.DictReader</code> to parse rows into dicts and combine filtering and aggregation.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import csv, io\ns = 'a,b\\n1,2\\n'\nprint(list(csv.DictReader(io.StringIO(s))))</pre></div>"
    },
    {
      "id": 124,
      "title": "124. ProcessPoolExecutor",
      "language": "python",
      "description": "Use a process pool to cube [1,2,3,4] and print the sum.",
      "initialCode": "from concurrent.futures import ProcessPoolExecutor\n\n# Define a top-level function cube(x) returning x*x*x (no lambdas)\n# On Windows, guard process pool code with if __name__ == '__main__'\n# Use ProcessPoolExecutor to compute cubes for [1,2,3,4] and print the sum\n\n",
      "fullSolution": "from concurrent.futures import ProcessPoolExecutor\n\ndef cube(x):\n    return x*x*x\n\nif __name__ == '__main__':\n    with ProcessPoolExecutor(max_workers=2) as ex:\n        print(sum(ex.map(cube, [1,2,3,4])))\n",
      "expectedOutput": "100",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Use <code>ProcessPoolExecutor</code> for CPU-bound work to sidestep the GIL. Map a pure function across inputs and aggregate.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from concurrent.futures import ProcessPoolExecutor\nwith ProcessPoolExecutor() as ex:\n    print(sum(ex.map(lambda x: x*x, [1,2,3]))) # 14</pre></div>"
    },
    {
      "id": 125,
      "title": "125. functools.singledispatch",
      "language": "python",
      "description": "Register type-specific implementations and dispatch at runtime.",
      "initialCode": "from functools import singledispatch\n\n# Create a singledispatch function describe(x)\n# - default returns 'unknown'\n# - int specialization returns 'int:<value>'\n# - list specialization returns 'list:<len>'\n# Print describe(5) then describe([1,2,3])\n\n",
      "fullSolution": "from functools import singledispatch\n\n@singledispatch\ndef describe(x):\n    return 'unknown'\n\n@describe.register(int)\ndef _(x):\n    return f'int:{x}'\n\n@describe.register(list)\ndef _(x):\n    return f'list:{len(x)}'\n\nprint(describe(5))\nprint(describe([1,2,3]))\n",
      "expectedOutput": "int:5\nlist:3",
      "tutorial": "<p class=\"mb-4 text-gray-300\"><code>singledispatch</code> lets you write generic functions with type-based specializations for better extensibility.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from functools import singledispatch\n@singledispatch\ndef stringify(x): return str(x)\n@stringify.register(list)\ndef _(x): return ','.join(map(str,x))\nprint(stringify([1,2])) # 1,2</pre></div>"
    },
    {
      "id": 126,
      "title": "126. typing.Protocol",
      "language": "python",
      "description": "Define a structural interface and accept any implementation.",
      "initialCode": "from typing import Protocol\n\n# Define a Greeter Protocol with greet(name:str)->str\n# Implement EN and ES classes and a welcome(g,name) that prints g.greet(name)\n# Call with 'Bob' using both implementations\n\n",
      "fullSolution": "from typing import Protocol\n\nclass Greeter(Protocol):\n    def greet(self, name: str) -> str: ...\n\nclass EN:\n    def greet(self, name: str) -> str:\n        return f'Hello, {name}'\n\nclass ES:\n    def greet(self, name: str) -> str:\n        return f'Hola, {name}'\n\ndef welcome(g: Greeter, name: str):\n    print(g.greet(name))\n\nwelcome(EN(), 'Bob')\nwelcome(ES(), 'Bob')\n",
      "expectedOutput": "Hello, Bob\nHola, Bob",
      "tutorial": "<p class=\"mb-4 text-gray-300\"><code>Protocol</code> enables structural typing: any object with the required methods is accepted, improving testability and decoupling.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from typing import Protocol\nclass HasLen(Protocol):\n    def __len__(self) -&gt; int: ...\n\ndef size(x: HasLen):\n    return len(x)\n\nprint(size('hi'))</pre></div>"
    },
    {
      "id": 127,
      "title": "127. sqlite3 In-Memory",
      "language": "python",
      "description": "Create a table, insert rows, and aggregate with SQL.",
      "initialCode": "import sqlite3\n\n# Create an in-memory DB, a table nums(v INT), insert 1,2,3\n# Query SELECT SUM(v) and print the result\n\n",
      "fullSolution": "import sqlite3\n\ncon = sqlite3.connect(':memory:')\ncur = con.cursor()\ncur.execute('CREATE TABLE nums(v INT)')\ncur.executemany('INSERT INTO nums(v) VALUES (?)', [(1,),(2,),(3,)])\ncur.execute('SELECT SUM(v) FROM nums')\nprint(cur.fetchone()[0])\ncon.close()\n",
      "expectedOutput": "6",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Use SQLite for quick relational queries in-memory\u00e2\u20ac\u201dgreat for ETL-style tasks and prototypes.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import sqlite3\ncon = sqlite3.connect(':memory:')\ncon.execute('CREATE TABLE t(x)')\ncon.execute('INSERT INTO t VALUES (42)')\nprint(con.execute('SELECT x FROM t').fetchone()[0])</pre></div>"
    },
    {
      "id": 128,
      "title": "128. decimal for Precision",
      "language": "python",
      "description": "Add 0.1 and 0.2 precisely using Decimal.",
      "initialCode": "from decimal import Decimal\n\n# Print the result of Decimal('0.1') + Decimal('0.2')\n\n",
      "fullSolution": "from decimal import Decimal\nprint(Decimal('0.1') + Decimal('0.2'))\n",
      "expectedOutput": "0.3",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Binary floats surprise: 0.1+0.2 != 0.3. Use <code>Decimal</code> for money and precise decimal arithmetic.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from decimal import Decimal\nprint(Decimal('1.005').quantize(Decimal('0.01'))) # 1.01</pre></div>"
    },
    {
      "id": 129,
      "title": "129. struct pack/unpack",
      "language": "python",
      "description": "Pack two numbers into bytes and unpack them again.",
      "initialCode": "import struct\n\n# Pack 258 (unsigned short) and 7 (unsigned byte) big-endian, then unpack and print each on its own line\n\n",
      "fullSolution": "import struct\n\ndata = struct.pack('>HB', 258, 7)\na, b = struct.unpack('>HB', data)\nprint(a)\nprint(b)\n",
      "expectedOutput": "258\n7",
      "tutorial": "<p class=\"mb-4 text-gray-300\">The <code>struct</code> module converts between Python values and C-struct binary data\u00e2\u20ac\u201duseful for protocols and file formats.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import struct\nprint(struct.unpack('&gt;I', b'\\x00\\x00\\x01\\x00')[0]) # 256</pre></div>"
    },
    {
      "id": 130,
      "title": "130. enum.Flag",
      "language": "python",
      "description": "Combine bit-flags and test membership.",
      "initialCode": "from enum import Flag, auto\n\n# Define Perm with READ, WRITE, EXEC using Flag\n# Make perm = READ|WRITE, then print whether it includes READ and includes EXEC (two lines)\n\n",
      "fullSolution": "from enum import Flag, auto\n\nclass Perm(Flag):\n    READ = auto()\n    WRITE = auto()\n    EXEC = auto()\n\nperm = Perm.READ | Perm.WRITE\nprint(bool(perm & Perm.READ))\nprint(bool(perm & Perm.EXEC))\n",
      "expectedOutput": "True\nFalse",
      "tutorial": "<p class=\"mb-4 text-gray-300\"><code>Flag</code> supports bitwise OR of options; test membership with bitwise AND.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from enum import Flag, auto\nclass F(Flag): A=auto(); B=auto()\nprint(F.A | F.B)</pre></div>"
    },
    {
      "id": 131,
      "title": "131. ExitStack",
      "language": "python",
      "description": "Manage multiple context cleanups dynamically.",
      "initialCode": "import contextlib\n\n# Use ExitStack to print 'inside' then ensure 'exit' prints at teardown\n\n",
      "fullSolution": "import contextlib\n\nwith contextlib.ExitStack() as stack:\n    stack.callback(lambda: print('exit'))\n    print('inside')\n",
      "expectedOutput": "inside\nexit",
      "tutorial": "<p class=\"mb-4 text-gray-300\"><code>ExitStack</code> lets you register callbacks and enter contexts conditionally, guaranteeing teardown even when combining resources.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import contextlib\nwith contextlib.ExitStack() as st:\n    st.callback(lambda: print('done'))\n    print('work')</pre></div>"
    },
    {
      "id": 132,
      "title": "132. cached_property",
      "language": "python",
      "description": "Cache an expensive computation after the first access.",
      "initialCode": "from functools import cached_property\n\n# Define a class with a cached_property that prints 'compute' once and returns 42\n# Access it twice and print the value both times\n\n",
      "fullSolution": "from functools import cached_property\n\nclass Expensive:\n    @cached_property\n    def value(self):\n        print('compute')\n        return 42\n\ne = Expensive()\nprint(e.value)\nprint(e.value)\n",
      "expectedOutput": "compute\n42\n42",
      "tutorial": "<p class=\"mb-4 text-gray-300\"><code>cached_property</code> computes once per instance and reuses the value\u00e2\u20ac\u201dhandy for memoizing I/O or heavy calculations.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from functools import cached_property\nclass C:\n  @cached_property\n  def cfg(self): return 123\nprint(C().cfg)</pre></div>"
    },
    {
      "id": 133,
      "title": "133. heapq.merge",
      "language": "python",
      "description": "Merge two sorted iterables and print all items.",
      "initialCode": "import heapq\n\n# Merge [1,3,5] and [2,4,6] and print each item on its own line\n\n",
      "fullSolution": "import heapq\nfor x in heapq.merge([1,3,5], [2,4,6]):\n    print(x)\n",
      "expectedOutput": "1\n2\n3\n4\n5\n6",
      "tutorial": "<p class=\"mb-4 text-gray-300\"><code>heapq.merge</code> lazily merges multiple sorted inputs\u00e2\u20ac\u201duseful for external sort or streaming merges.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import heapq\nprint(list(heapq.merge([1,4],[2,3])))</pre></div>"
    },
    {
      "id": 134,
      "title": "134. bisect.insort",
      "language": "python",
      "description": "Insert while keeping a list sorted.",
      "initialCode": "import bisect\n\n# Start with arr=[1,3,4], insert 2 in order using insort, then print arr\n\n",
      "fullSolution": "import bisect\narr = [1,3,4]\nbisect.insort(arr, 2)\nprint(arr)\n",
      "expectedOutput": "[1, 2, 3, 4]",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Use <code>bisect</code> for binary search and ordered insertion without re-sorting.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import bisect\na=[1,2,4]\nbisect.insort(a,3)\nprint(a)</pre></div>"
    },
    {
      "id": 135,
      "title": "135. argparse (programmatic)",
      "language": "python",
      "description": "Parse options from a list and act on them.",
      "initialCode": "import argparse\n\n# Build an ArgumentParser that accepts --times INT; parse ['--times','3']\n# Print 'x' repeated times times\n\n",
      "fullSolution": "import argparse\nparser = argparse.ArgumentParser(add_help=False)\nparser.add_argument('--times', type=int, required=True)\nargs = parser.parse_args(['--times','3'])\nprint('x'*args.times)\n",
      "expectedOutput": "xxx",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Use <code>argparse</code> to define CLI options. Parsing from a list makes it easy to test without real command-line args.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import argparse\np=argparse.ArgumentParser(add_help=False)\np.add_argument('--n', type=int)\nprint(p.parse_args(['--n','2']).n)</pre></div>"
    },
    {
      "id": 136,
      "title": "136. Capstone: Log Aggregator",
      "language": "python",
      "description": "Parse log lines and print total ERRORs and WARNs.",
      "initialCode": "import re\n\nlogs = '''[INFO] boot\n[ERROR] fail A\n[WARN] disk\n[ERROR] fail B\n'''\n# Count lines starting with [ERROR] and [WARN] and print 'E:<n> W:<m>'\n\n",
      "fullSolution": "import re\n\nlogs = '''[INFO] boot\n[ERROR] fail A\n[WARN] disk\n[ERROR] fail B\n'''\nE = len(re.findall(r'^\\[ERROR\\]', logs, flags=re.M))\nW = len(re.findall(r'^\\[WARN\\]', logs, flags=re.M))\nprint(f'E:{E} W:{W}')\n",
      "expectedOutput": "E:2 W:1",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Combine regex with multiline anchors to scan logs and aggregate counts.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import re\ns='''A\nB\nA\n'''\nprint(len(re.findall(r'^A', s, flags=re.M)))</pre></div>"
    },
    {
      "id": 137,
      "title": "137. Capstone: Process Pool Map-Reduce",
      "language": "python",
      "description": "Square 1..10 in a process pool and print the sum.",
      "initialCode": "from concurrent.futures import ProcessPoolExecutor\n\n# Define a top-level function sq(x) returning x*x (no lambdas)\n# On Windows, guard process pool code with if __name__ == '__main__'\n# Compute sum(x*x for x in 1..10) using ProcessPoolExecutor and print it\n\n",
      "fullSolution": "from concurrent.futures import ProcessPoolExecutor\n\ndef sq(x):\n    return x*x\n\nif __name__ == '__main__':\n    with ProcessPoolExecutor() as ex:\n        print(sum(ex.map(sq, range(1,11))))\n",
      "expectedOutput": "385",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Map-reduce pattern: map independent work across workers, then reduce with <code>sum</code>. Use a top-level function and guard <code>__name__</code> on Windows.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from concurrent.futures import ProcessPoolExecutor\n\ndef sq(x):\n    return x*x\n\nif __name__ == '__main__':\n    with ProcessPoolExecutor() as ex:\n        print(sum(ex.map(sq, range(1,6))))</pre></div>"
    },
    {
      "id": 138,
      "title": "138. Capstone: asyncio Timeout",
      "language": "python",
      "description": "Run two tasks; one sleeps, one fast; print only the fast result using timeout.",
      "initialCode": "import asyncio\n\n# Create two coroutines: slow sleeps 1.0s and returns 'slow', fast returns 'fast'\n# Use wait_for to get fast within 0.1s and print it\n\n",
      "fullSolution": "import asyncio\n\nasync def slow():\n    await asyncio.sleep(1.0)\n    return 'slow'\n\nasync def fast():\n    return 'fast'\n\nasync def main():\n    print(await asyncio.wait_for(fast(), timeout=0.1))\n\nasyncio.run(main())\n",
      "expectedOutput": "fast",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Use <code>asyncio.wait_for</code> to bound latency and pick the fast path.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import asyncio\n\nasync def slow():\n    await asyncio.sleep(1)\n    return 'slow'\n\nasync def main():\n    try:\n        print(await asyncio.wait_for(slow(), timeout=0.05))\n    except asyncio.TimeoutError:\n        print('timeout')\n\nasyncio.run(main())</pre></div>"
    },
    {
      "id": 139,
      "title": "139. Capstone: pathlib Scan",
      "language": "python",
      "description": "List .txt files from an in-memory working dir and print their sorted names.",
      "initialCode": "from pathlib import Path\n\n# Create temp files a.txt, b.txt, c.log in CWD; list only .txt and print names sorted joined by ','\n\n",
      "fullSolution": "from pathlib import Path\nPath('a.txt').write_text('a')\nPath('b.txt').write_text('b')\nPath('c.log').write_text('c')\nprint(','.join(sorted(p.name for p in Path('.').iterdir() if p.suffix=='.txt')))\n",
      "expectedOutput": "a.txt,b.txt",
      "tutorial": "<p class=\"mb-4 text-gray-300\"><code>pathlib</code> provides path operations and safe iteration over directories.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from pathlib import Path\nPath('a.txt').write_text('a')\nPath('b.log').write_text('b')\nprint(','.join(sorted(p.name for p in Path('.').iterdir() if p.suffix=='.txt')))</pre></div>"
    },
    {
      "id": 140,
      "title": "140. Capstone: OrderedDict LRU",
      "language": "python",
      "description": "Implement a tiny LRU with capacity 2 using OrderedDict.",
      "initialCode": "from collections import OrderedDict\n\n# Create an OrderedDict behaving like LRU capacity=2: put 'a':1, 'b':2, 'c':3 and print keys left joined by ','\n\n",
      "fullSolution": "from collections import OrderedDict\n\nclass LRU(OrderedDict):\n    def __init__(self, cap):\n        super().__init__()\n        self.cap = cap\n    def __setitem__(self, k, v):\n        if k in self: del self[k]\n        super().__setitem__(k, v)\n        if len(self) > self.cap:\n            self.popitem(last=False)\n\nlru = LRU(2)\nlru['a']=1; lru['b']=2; lru['c']=3\nprint(','.join(lru.keys()))\n",
      "expectedOutput": "b,c",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Reorder on set and evict the oldest when capacity is exceeded.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from collections import OrderedDict\ncap = 2\nlru = OrderedDict()\nfor k in ['a','b','a','c']:\n    if k in lru: del lru[k]\n    lru[k] = 1\n    if len(lru) > cap:\n        lru.popitem(last=False)\nprint(','.join(lru.keys()))  # b,c</pre></div>"
    },
    {
      "id": 141,
      "title": "141. asyncio.Semaphore",
      "language": "python",
      "description": "Limit concurrent tasks with a semaphore and sum results.",
      "initialCode": "import asyncio\n\n# Create a Semaphore(2) and run 3 workers that each return 1\n# Gather results and print their sum (should be 3)\n\n",
      "fullSolution": "import asyncio\n\nasync def worker(sem):\n    async with sem:\n        await asyncio.sleep(0.01)\n        return 1\n\nasync def main():\n    sem = asyncio.Semaphore(2)\n    results = await asyncio.gather(*(worker(sem) for _ in range(3)))\n    print(sum(results))\n\nasyncio.run(main())\n",
      "expectedOutput": "3",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Use <code>asyncio.Semaphore</code> to cap concurrent access (e.g., outbound requests). It protects a critical section by allowing only N tasks inside at a time.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import asyncio\n\nasync def worker(sem, x):\n    async with sem:\n        await asyncio.sleep(0.01)\n        return x\n\nasync def main():\n    sem = asyncio.Semaphore(2)\n    print(sum(await asyncio.gather(*(worker(sem, 1) for _ in range(3)))))\n\nasyncio.run(main())</pre></div>"
    },
    {
      "id": 142,
      "title": "142. queue + Threads",
      "language": "python",
      "description": "Fan out work to threads using queue.Queue and collect results.",
      "initialCode": "from queue import Queue\nfrom threading import Thread\n\n# Square [1,2,3,4] in two worker threads using a Queue and print the sum (30)\n\n",
      "fullSolution": "from queue import Queue\nfrom threading import Thread\n\nq = Queue()\nout = []\n\ndef worker():\n    while True:\n        x = q.get()\n        if x is None:\n            break\n        out.append(x*x)\n\n# start workers\nthreads = [Thread(target=worker) for _ in range(2)]\nfor t in threads: t.start()\n# enqueue work\nfor n in [1,2,3,4]: q.put(n)\n# stop workers\nfor _ in threads: q.put(None)\n# wait\nfor t in threads: t.join()\nprint(sum(out))\n",
      "expectedOutput": "30",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Use a <code>Queue</code> to hand off work to a fixed set of worker threads. The queue provides safe communication without manual locking.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from queue import Queue\nfrom threading import Thread\n\nq=Queue(); out=[]\n\ndef worker():\n    while True:\n        x=q.get()\n        if x is None: break\n        out.append(x*x)\n\nthreads=[Thread(target=worker) for _ in range(2)]\nfor t in threads: t.start()\nfor n in [1,2,3,4]: q.put(n)\nfor _ in threads: q.put(None)\nfor t in threads: t.join()\nprint(sum(out))</pre></div>"
    },
    {
      "id": 143,
      "title": "143. Logging to stdout",
      "language": "python",
      "description": "Configure logging to write to stdout and log a message.",
      "initialCode": "import logging, sys\n\n# Configure basicConfig to stream logs to stdout and log INFO level 'hi'\n# Print should be exactly \"INFO:hi\"\n\n",
      "fullSolution": "import logging, sys\nlogging.basicConfig(level=logging.INFO, stream=sys.stdout, format='%(levelname)s:%(message)s')\nlogging.info('hi')\n",
      "expectedOutput": "INFO:hi",
      "tutorial": "<p class=\"mb-4 text-gray-300\">By default <code>logging</code> writes to stderr. Redirect to stdout to capture logs as program output, and set a concise format.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import logging, sys\nlogging.basicConfig(level=logging.INFO, stream=sys.stdout, format='%(levelname)s:%(message)s')\nlogging.info('hello')</pre></div>"
    },
    {
      "id": 144,
      "title": "144. dataclass default_factory",
      "language": "python",
      "description": "Use field(default_factory=list) to avoid shared mutable defaults.",
      "initialCode": "from dataclasses import dataclass, field\n\n# Define Bag with items: list[int] = field(default_factory=list)\n# Append two integers and print len(items)\n\n",
      "fullSolution": "from dataclasses import dataclass, field\n\n@dataclass\nclass Bag:\n    items: list[int] = field(default_factory=list)\n\nb = Bag()\nb.items.append(1)\nb.items.append(2)\nprint(len(b.items))\n",
      "expectedOutput": "2",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Never use a mutable object as a default value. <code>field(default_factory=...)</code> creates a fresh value per instance.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from dataclasses import dataclass, field\n\n@dataclass\nclass Bag:\n    items: list[int] = field(default_factory=list)\n\nprint(Bag().items is Bag().items)  # False</pre></div>"
    },
    {
      "id": 145,
      "title": "145. typing.TypedDict",
      "language": "python",
      "description": "Define a TypedDict and use it like a dict at runtime.",
      "initialCode": "from typing import TypedDict\n\n# Create Item with fields name:str and price:int, then construct and print 'Widget:10'\n\n",
      "fullSolution": "from typing import TypedDict\n\nclass Item(TypedDict):\n    name: str\n    price: int\n\ni: Item = { 'name': 'Widget', 'price': 10 }\nprint(f\"{i['name']}:{i['price']}\")\n",
      "expectedOutput": "Widget:10",
      "tutorial": "<p class=\"mb-4 text-gray-300\"><code>TypedDict</code> describes dictionary-shaped objects for static type-checkers while staying a plain dict at runtime.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from typing import TypedDict\n\nclass User(TypedDict):\n    id: int\n    name: str\n\nu: User = {'id': 1, 'name': 'Ada'}\nprint(u['name'])</pre></div>"
    },
    {
      "id": 146,
      "title": "146. operator.itemgetter",
      "language": "python",
      "description": "Sort records by a key using itemgetter.",
      "initialCode": "from operator import itemgetter\n\n# Sort [{'name':'a','age':3},{'name':'c','age':1},{'name':'b','age':2}] by age and print names each on its own line\n\n",
      "fullSolution": "from operator import itemgetter\n\ndata = [{'name':'a','age':3},{'name':'c','age':1},{'name':'b','age':2}]\nfor d in sorted(data, key=itemgetter('age')):\n    print(d['name'])\n",
      "expectedOutput": "c\nb\na",
      "tutorial": "<p class=\"mb-4 text-gray-300\"><code>itemgetter</code> builds a fast key function for <code>sorted</code>, <code>min</code>, <code>max</code>, etc.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from operator import itemgetter\nrows=[{'k':2},{'k':1}]\nprint([r['k'] for r in sorted(rows, key=itemgetter('k'))])</pre></div>"
    },
    {
      "id": 147,
      "title": "147. as_completed (futures)",
      "language": "python",
      "description": "Accumulate results from futures as they complete.",
      "initialCode": "from concurrent.futures import ThreadPoolExecutor, as_completed\n\n# Submit squares for 1..4 and sum results using as_completed, then print the sum (30)\n\n",
      "fullSolution": "from concurrent.futures import ThreadPoolExecutor, as_completed\n\ndef sq(x):\n    return x*x\n\nwith ThreadPoolExecutor(max_workers=3) as ex:\n    futs = [ex.submit(sq, x) for x in [1,2,3,4]]\n    total = 0\n    for f in as_completed(futs):\n        total += f.result()\n    print(total)\n",
      "expectedOutput": "30",
      "tutorial": "<p class=\"mb-4 text-gray-300\"><code>as_completed</code> lets you act on results as soon as each future finishes, which is great for scatter/gather workloads.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from concurrent.futures import ThreadPoolExecutor, as_completed\nwith ThreadPoolExecutor(max_workers=2) as ex:\n    futs = [ex.submit(len, s) for s in ['aa','bbb','c']]\n    print(sum(f.result() for f in as_completed(futs)))</pre></div>"
    },
    {
      "id": 148,
      "title": "148. contextvars",
      "language": "python",
      "description": "Per-task context state that doesn't need to be passed explicitly.",
      "initialCode": "import contextvars, asyncio\n\n# Create a ContextVar, set different values in two tasks, gather and print them joined by ',' (A,B)\n\n",
      "fullSolution": "import contextvars, asyncio\n\nvar = contextvars.ContextVar('var', default='unset')\n\nasync def worker(v):\n    var.set(v)\n    await asyncio.sleep(0)\n    return var.get()\n\nasync def main():\n    a,b = await asyncio.gather(worker('A'), worker('B'))\n    print(f'{a},{b}')\n\nasyncio.run(main())\n",
      "expectedOutput": "A,B",
      "tutorial": "<p class=\"mb-4 text-gray-300\"><code>ContextVar</code> values are task-local and flow with execution, making them safer than globals for request-scoped state.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import contextvars\nuser = contextvars.ContextVar('user', default='anon')\nuser.set('ada')\nprint(user.get())</pre></div>"
    },
    {
      "id": 149,
      "title": "149. re.sub with function",
      "language": "python",
      "description": "Transform matches via a replacement function.",
      "initialCode": "import re\n\n# Replace all digits in 'a1b2' with '#' using a function replacer and print the result\n\n",
      "fullSolution": "import re\n\ns = 'a1b2'\nprint(re.sub(r'(\\d)', lambda m: '#', s))\n",
      "expectedOutput": "a#b#",
      "tutorial": "<p class=\"mb-4 text-gray-300\"><code>re.sub</code> can take a function to compute replacements dynamically from each match object.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import re\nprint(re.sub(r'[aeiou]', lambda m: m.group(0).upper(), 'banana'))</pre></div>"
    },
    {
      "id": 150,
      "title": "150. pathlib read/write",
      "language": "python",
      "description": "Write then read a small text file using pathlib.",
      "initialCode": "from pathlib import Path\n\n# Write 'ok' to note.txt then read it back and print\n\n",
      "fullSolution": "from pathlib import Path\nPath('note.txt').write_text('ok')\nprint(Path('note.txt').read_text())\n",
      "expectedOutput": "ok",
      "tutorial": "<p class=\"mb-4 text-gray-300\"><code>Path.write_text</code> and <code>Path.read_text</code> are convenient wrappers around opening files with the correct encoding.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from pathlib import Path\nPath('file.txt').write_text('hello')\nprint(Path('file.txt').read_text())</pre></div>"
    },
    {
      "id": 151,
      "title": "151. dataclass frozen",
      "language": "python",
      "description": "Make an immutable dataclass and show assignment fails.",
      "initialCode": "from dataclasses import dataclass, FrozenInstanceError\n\n# Define frozen Person(name:str), instantiate, try to set name, catch and print exception class name\n\n",
      "fullSolution": "from dataclasses import dataclass, FrozenInstanceError\n\n@dataclass(frozen=True)\nclass Person:\n    name: str\n\np = Person('Ada')\ntry:\n    p.name = 'Grace'\nexcept FrozenInstanceError as e:\n    print(type(e).__name__)\n",
      "expectedOutput": "FrozenInstanceError",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Use <code>frozen=True</code> to make dataclasses immutable. Attempting to assign to a field raises <code>FrozenInstanceError</code>.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from dataclasses import dataclass, FrozenInstanceError\n\n@dataclass(frozen=True)\nclass Point: x:int; y:int\ntry:\n    Point(1,2).x = 3\nexcept FrozenInstanceError as e:\n    print(type(e).__name__)</pre></div>"
    },
    {
      "id": 152,
      "title": "152. __slots__",
      "language": "python",
      "description": "Restrict attributes with __slots__ and catch invalid assignment.",
      "initialCode": "# Define class P with __slots__=('x','y'), set x and y to 1, then try to set z and print 'AttributeError' when caught\n\n",
      "fullSolution": "class P:\n    __slots__ = ('x','y')\n\np = P()\np.x = 1; p.y = 1\ntry:\n    p.z = 3\nexcept AttributeError:\n    print('AttributeError')\n",
      "expectedOutput": "AttributeError",
      "tutorial": "<p class=\"mb-4 text-gray-300\"><code>__slots__</code> prevents creation of <code>__dict__</code> and disallows undeclared attributes, reducing memory and catching mistakes.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">class P: __slots__ = ('x',)\np = P(); p.x = 1\ntry:\n    p.y = 2\nexcept AttributeError:\n    print('no y')</pre></div>"
    },
    {
      "id": 153,
      "title": "153. functools.reduce",
      "language": "python",
      "description": "Use reduce to compute a product (factorial style).",
      "initialCode": "from functools import reduce\nimport operator as op\n\n# Compute product of 1..5 with reduce and print it\n\n",
      "fullSolution": "from functools import reduce\nimport operator as op\nprint(reduce(op.mul, [1,2,3,4,5]))\n",
      "expectedOutput": "120",
      "tutorial": "<p class=\"mb-4 text-gray-300\"><code>reduce</code> applies a binary function cumulatively to a sequence, reducing it to a single value.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from functools import reduce\nprint(reduce(lambda a,b: a+b, [1,2,3]))</pre></div>"
    },
    {
      "id": 154,
      "title": "154. json loads",
      "language": "python",
      "description": "Parse JSON and compute a small aggregation.",
      "initialCode": "import json\n\n# Parse a JSON string like {a:1,b:2} (with proper quotes), sum values and print\n\n",
      "fullSolution": "import json\nd = json.loads('{\"a\":1,\"b\":2}')\nprint(d['a']+d['b'])\n",
      "expectedOutput": "3",
      "tutorial": "<p class=\"mb-4 text-gray-300\"><code>json.loads</code> parses a JSON string into Python objects; <code>json.dumps</code> serializes them back.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import json\nprint(json.dumps({'x': 1}))</pre></div>"
    },
    {
      "id": 155,
      "title": "155. fractions.Fraction",
      "language": "python",
      "description": "Exact rational arithmetic with Fraction.",
      "initialCode": "from fractions import Fraction\n\n# Create Fraction(1,3) + Fraction(1,3) and print the result\n\n",
      "fullSolution": "from fractions import Fraction\nprint(Fraction(1,3) + Fraction(1,3))\n",
      "expectedOutput": "2/3",
      "tutorial": "<p class=\"mb-4 text-gray-300\"><code>Fraction</code> keeps exact rational values without floating-point error.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from fractions import Fraction\nprint(Fraction(1,10) * 3)</pre></div>"
    },
    {
      "id": 156,
      "title": "156. itertools.product",
      "language": "python",
      "description": "Compute Cartesian product size using itertools.product.",
      "initialCode": "from itertools import product\n\n# Compute the number of pairs in product([1,2], [3,4]) and print it\n\n",
      "fullSolution": "from itertools import product\nprint(len(list(product([1,2], [3,4]))))\n",
      "expectedOutput": "4",
      "tutorial": "<p class=\"mb-4 text-gray-300\"><code>product</code> forms all combinations from input iterables. Wrapping with <code>list</code> materializes the pairs for counting.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from itertools import product\nfor a,b in product('ab', 'xy'):\n    print(a+b)</pre></div>"
    },
    {
      "id": 157,
      "title": "157. collections.Counter",
      "language": "python",
      "description": "Count occurrences with Counter and index by key.",
      "initialCode": "from collections import Counter\n\n# Count letters in 'aab' and print the count for 'a'\n\n",
      "fullSolution": "from collections import Counter\nprint(Counter('aab')['a'])\n",
      "expectedOutput": "2",
      "tutorial": "<p class=\"mb-4 text-gray-300\"><code>Counter</code> is a dict subclass for counting hashable items. Access counts by key like a normal dict.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from collections import Counter\nc = Counter([1,2,1,3])\nprint(c[1])  # 2</pre></div>"
    },
    {
      "id": 158,
      "title": "158. f-string formatting",
      "language": "python",
      "description": "Format floats to two decimals using f-strings.",
      "initialCode": "# Print 3.14159 rounded to two decimals using an f-string\n\n",
      "fullSolution": "print(f\"{3.14159:.2f}\")\n",
      "expectedOutput": "3.14",
      "tutorial": "<p class=\"mb-4 text-gray-300\">An f-string can include format specifiers after a colon. <code>.2f</code> formats as fixed-point with two decimals.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">value = 2/3\nprint(f\"{value:.3f}\")  # 0.667</pre></div>"
    },
    {
      "id": 159,
      "title": "159. abc.ABC + abstractmethod",
      "language": "python",
      "description": "Create an abstract Shape with area(), implement Rect, and print Rect(3,4).area().",
      "initialCode": "from abc import ABC, abstractmethod\n\n# Define abstract class Shape with abstract method area(self)\n# Implement Rect(width,height) that returns width*height in area()\n# Print the area for a 3x4 rectangle (12)\n\n",
      "fullSolution": "from abc import ABC, abstractmethod\n\nclass Shape(ABC):\n    @abstractmethod\n    def area(self):\n        pass\n\nclass Rect(Shape):\n    def __init__(self, w, h):\n        self.w, self.h = w, h\n    def area(self):\n        return self.w * self.h\n\nprint(Rect(3,4).area())\n",
      "expectedOutput": "12",
      "tutorial": "<p class=\"mb-4 text-gray-300\">abc.ABC defines abstract base classes; use <code>@abstractmethod</code> to force subclasses to implement required methods.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from abc import ABC, abstractmethod\nclass Base(ABC):\n    @abstractmethod\n    def f(self): ...\nclass Impl(Base):\n    def f(self): return 42\nprint(Impl().f())</pre></div>"
    },
    {
      "id": 160,
      "title": "160. functools.singledispatch",
      "language": "python",
      "description": "Use singledispatch to sum a list and print the result.",
      "initialCode": "from functools import singledispatch\n\n# Create total(x) with @singledispatch defaulting to 0\n# Register a list handler that returns sum(xs)\n# Print total([1,2,3]) (6)\n\n",
      "fullSolution": "from functools import singledispatch\n\n@singledispatch\ndef total(x):\n    return 0\n\n@total.register(list)\ndef _(xs):\n    return sum(xs)\n\nprint(total([1,2,3]))\n",
      "expectedOutput": "6",
      "tutorial": "<p class=\"mb-4 text-gray-300\"><code>@singledispatch</code> enables function overloading by argument type at runtime.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from functools import singledispatch\n@singledispatch\ndef show(x): return \"?\"\n@show.register(int)\ndef _(x): return x+1\nprint(show(3))</pre></div>"
    },
    {
      "id": 161,
      "title": "161. decimal.Decimal",
      "language": "python",
      "description": "Add precise decimals 0.1 + 0.2 and print the exact result.",
      "initialCode": "from decimal import Decimal\n\n# Print Decimal('0.1') + Decimal('0.2')\n\n",
      "fullSolution": "from decimal import Decimal\nprint(Decimal('0.1') + Decimal('0.2'))\n",
      "expectedOutput": "0.3",
      "tutorial": "<p class=\"mb-4 text-gray-300\"><code>Decimal</code> avoids binary floating-point rounding issues; construct from strings for exact values.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from decimal import Decimal\nprint(Decimal('1.00')/Decimal('3'))</pre></div>"
    },
    {
      "id": 162,
      "title": "162. heapq.nsmallest",
      "language": "python",
      "description": "Print the two smallest numbers using heapq.nsmallest.",
      "initialCode": "import heapq\n\n# Given xs = [5,1,4,2,3], print the two smallest (each on its own line)\n\n",
      "fullSolution": "import heapq\nxs = [5,1,4,2,3]\nfor n in heapq.nsmallest(2, xs):\n    print(n)\n",
      "expectedOutput": "1\n2",
      "tutorial": "<p class=\"mb-4 text-gray-300\"><code>heapq.nsmallest</code> efficiently returns the k smallest items without fully sorting the input.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import heapq\nprint(heapq.nsmallest(3, [9,1,5,2,8]))</pre></div>"
    },
    {
      "id": 163,
      "title": "163. bisect_left",
      "language": "python",
      "description": "Find the insertion index for 3 in [1,2,4,5] using bisect_left.",
      "initialCode": "import bisect\n\n# Print bisect_left([1,2,4,5], 3)\n\n",
      "fullSolution": "import bisect\nprint(bisect.bisect_left([1,2,4,5], 3))\n",
      "expectedOutput": "2",
      "tutorial": "<p class=\"mb-4 text-gray-300\">The <code>bisect</code> module finds insertion points in sorted lists for binary search style operations.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import bisect\nxs=[1,2,4,5]\nprint(bisect.bisect_right(xs,2))</pre></div>"
    },
    {
      "id": 164,
      "title": "164. Class-based context manager",
      "language": "python",
      "description": "Implement __enter__/__exit__ to print enter/work/exit in order.",
      "initialCode": "# Define MyCtx with __enter__ printing 'enter' and __exit__ printing 'exit'\n# Use with MyCtx(): print('work') in the body\n\n",
      "fullSolution": "class MyCtx:\n    def __enter__(self):\n        print('enter')\n        return self\n    def __exit__(self, exc_type, exc, tb):\n        print('exit')\n\nwith MyCtx():\n    print('work')\n",
      "expectedOutput": "enter\nwork\nexit",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Context managers can be classes implementing <code>__enter__</code> and <code>__exit__</code>; they manage setup/teardown deterministically.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">class R:\n  def __enter__(self): print('open'); return self\n  def __exit__(self, *exc): print('close')\nwith R(): print('work')</pre></div>"
    },
    {
      "id": 165,
      "title": "165. enum.IntFlag",
      "language": "python",
      "description": "Use IntFlag for bitwise permissions and check membership.",
      "initialCode": "from enum import IntFlag, auto\n\n# Define Perm with READ, WRITE, EXEC using auto()\n# Create a flag with READ|WRITE and print whether READ is set\n\n",
      "fullSolution": "from enum import IntFlag, auto\n\nclass Perm(IntFlag):\n    READ = auto()\n    WRITE = auto()\n    EXEC = auto()\n\np = Perm.READ | Perm.WRITE\nprint(bool(p & Perm.READ))\n",
      "expectedOutput": "True",
      "tutorial": "<p class=\"mb-4 text-gray-300\"><code>IntFlag</code> supports bitwise operations while remaining an enum; combine flags with <code>|</code> and test with <code>&</code>.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from enum import IntFlag, auto\nclass F(IntFlag): A=auto(); B=auto()\nprint(F.A|F.B)</pre></div>"
    },
    {
      "id": 166,
      "title": "166. dataclasses.asdict",
      "language": "python",
      "description": "Convert a dataclass to dict and access a value.",
      "initialCode": "from dataclasses import dataclass, asdict\n\n# Define User(name:str, id:int); create User('Ada',1) and print asdict(user)['name']\n\n",
      "fullSolution": "from dataclasses import dataclass, asdict\n\n@dataclass\nclass User:\n    name: str\n    id: int\n\nprint(asdict(User('Ada', 1))['name'])\n",
      "expectedOutput": "Ada",
      "tutorial": "<p class=\"mb-4 text-gray-300\"><code>asdict</code> recursively converts a dataclass instance into a plain dict, suitable for serialization.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from dataclasses import dataclass, asdict\n@dataclass\nclass P: x:int; y:int\nprint(asdict(P(1,2)))</pre></div>"
    },
    {
      "id": 167,
      "title": "167. inspect.signature",
      "language": "python",
      "description": "Inspect a function's parameters via inspect.signature and print the count.",
      "initialCode": "import inspect\n\n# Define f(a,b,c=0); get its signature and print number of parameters (3)\n\n",
      "fullSolution": "import inspect\n\ndef f(a,b,c=0):\n    pass\n\nsig = inspect.signature(f)\nprint(len(sig.parameters))\n",
      "expectedOutput": "3",
      "tutorial": "<p class=\"mb-4 text-gray-300\">The <code>inspect</code> module offers runtime introspection, including function signatures and parameter kinds.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import inspect\nprint(inspect.signature(lambda x, y=0: None))</pre></div>"
    },
    {
      "id": 168,
      "title": "168. functools.total_ordering",
      "language": "python",
      "description": "Use total_ordering to implement comparisons and sort custom objects.",
      "initialCode": "from functools import total_ordering\n\n# Define @total_ordering class Box(v) with __eq__ and __lt__\n# Sort [Box(3),Box(1),Box(2)] and print their v each on its own line\n\n",
      "fullSolution": "from functools import total_ordering\n\n@total_ordering\nclass Box:\n    def __init__(self, v):\n        self.v = v\n    def __eq__(self, other):\n        return self.v == other.v\n    def __lt__(self, other):\n        return self.v < other.v\n\nfor b in sorted([Box(3), Box(1), Box(2)]):\n    print(b.v)\n",
      "expectedOutput": "1\n2\n3",
      "tutorial": "<p class=\"mb-4 text-gray-300\"><code>@total_ordering</code> fills in the rest of the rich comparison methods when you define <code>__eq__</code> and one ordering method.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from functools import total_ordering\n@total_ordering\nclass V:\n  def __init__(self,x): self.x=x\n  def __eq__(self,o): return self.x==o.x\n  def __lt__(self,o): return self.x<o.x\nprint([v.x for v in sorted([V(2),V(1)])])</pre></div>"
    },
    {
      "id": 169,
      "title": "169. dataclasses.default_factory",
      "language": "python",
      "description": "Use field(default_factory=list) to avoid shared mutable defaults.",
      "initialCode": "from dataclasses import dataclass, field\n\n# Define Bag with items: list[str] = field(default_factory=list)\n# Append 'x' to items and print its length (1)\n\n",
      "fullSolution": "from dataclasses import dataclass, field\n\n@dataclass\nclass Bag:\n    items: list[str] = field(default_factory=list)\n\nb = Bag()\nb.items.append('x')\nprint(len(b.items))\n",
      "expectedOutput": "1",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Use <code>default_factory</code> to create a new default object per-instance and avoid shared mutable defaults.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from dataclasses import dataclass, field\n@dataclass\nclass C: xs: list[int] = field(default_factory=list)\nprint(C().xs)</pre></div>"
    },
    {
      "id": 170,
      "title": "170. dataclasses.replace",
      "language": "python",
      "description": "Use dataclasses.replace to copy with a modified field.",
      "initialCode": "from dataclasses import dataclass, replace\n\n# Define frozen Point(x:int, y:int), create p=Point(1,2)\n# Create q = replace(p, y=5) and print q.y\n\n",
      "fullSolution": "from dataclasses import dataclass, replace\n\n@dataclass(frozen=True)\nclass Point:\n    x: int\n    y: int\n\nq = replace(Point(1,2), y=5)\nprint(q.y)\n",
      "expectedOutput": "5",
      "tutorial": "<p class=\"mb-4 text-gray-300\"><code>replace</code> makes an updated copy of a dataclass instance; handy with immutable (<code>frozen=True</code>) types.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from dataclasses import dataclass, replace\n@dataclass(frozen=True)\nclass User: name:str; age:int\nprint(replace(User('a',1), age=2))</pre></div>"
    },
    {
      "id": 171,
      "title": "171. Capstone: CSV + File IO + Sum",
      "language": "python",
      "description": "Write a CSV file, read it with csv.DictReader, sum a column, and print the total.",
      "initialCode": "import csv\n\n# Create a.csv with rows: name,score then Ada,10 then Bob,20 then Cia,15\n# Read it back using csv.DictReader, sum the 'score' as ints, and print the total (45)\n\n",
      "fullSolution": "import csv\n\nwith open('a.csv', 'w', newline='') as f:\n    w = csv.writer(f)\n    w.writerow(['name','score'])\n    w.writerow(['Ada','10'])\n    w.writerow(['Bob','20'])\n    w.writerow(['Cia','15'])\n\nwith open('a.csv') as f:\n    r = csv.DictReader(f)\n    total = sum(int(row['score']) for row in r)\nprint(total)\n",
      "expectedOutput": "45",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Capstone combining file I/O and the <code>csv</code> module: write a small CSV, read it via <code>DictReader</code>, transform fields, and aggregate.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import csv\nwith open('t.csv','w',newline='') as f:\n  csv.writer(f).writerow(['x','1'])\nwith open('t.csv') as f:\n  print(next(csv.DictReader(f))['x'])</pre></div>"
    },
    {
      "id": 172,
      "title": "172. ThreadPoolExecutor (sum squares)",
      "language": "python",
      "description": "Use a thread pool to square 1..3 and print the sum (14).",
      "initialCode": "from concurrent.futures import ThreadPoolExecutor\n\n# Submit tasks that square 1..3 and print the sum (14)\n\n",
      "fullSolution": "from concurrent.futures import ThreadPoolExecutor\n\nwith ThreadPoolExecutor(max_workers=3) as ex:\n    futs = [ex.submit(lambda x: x*x, i) for i in (1,2,3)]\n    print(sum(f.result() for f in futs))\n",
      "expectedOutput": "14",
      "tutorial": "<p class=\"mb-4 text-gray-300\">For I/O-bound or lightweight CPU work, <code>ThreadPoolExecutor</code> offers a simple concurrency primitive.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from concurrent.futures import ThreadPoolExecutor\n\nwith ThreadPoolExecutor(max_workers=3) as ex:\n    futs = [ex.submit(lambda x: x*x, i) for i in (1,2,3)]\n    print(sum(f.result() for f in futs))</pre></div>"
    },
    {
      "id": 173,
      "title": "173. pathlib write + size",
      "language": "python",
      "description": "Create a directory and a file, write 'hi', then print file size (2).",
      "initialCode": "from pathlib import Path\n\n# Create d/ and d/t.txt with 'hi' then print t.txt size (2)\n\n",
      "fullSolution": "from pathlib import Path\n\nd = Path('d'); d.mkdir(exist_ok=True)\n(p := d/'t.txt').write_text('hi')\nprint(p.stat().st_size)\n",
      "expectedOutput": "2",
      "tutorial": "<p class=\"mb-4 text-gray-300\"><code>pathlib</code> provides an object-oriented filesystem API; <code>Path.write_text</code> is a handy convenience.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from pathlib import Path\n\nd = Path('d'); d.mkdir(exist_ok=True)\n(p := d/'t.txt').write_text('hi')\nprint(p.stat().st_size)</pre></div>"
    },
    {
      "id": 174,
      "title": "174. itertools.groupby (top counts)",
      "language": "python",
      "description": "Group words and print the top 2 as 'b:3' then 'a:2'.",
      "initialCode": "from itertools import groupby\n\n# Using s='a b a c b b', group words to count occurrences and print top 2: b:3 then a:2\n\n",
      "fullSolution": "from itertools import groupby\n\ns = 'a b a c b b'\nwords = sorted(s.split())\ncounts = [(k, sum(1 for _ in g)) for k, g in groupby(words)]\nfor k, c in sorted(counts, key=lambda kv: -kv[1])[:2]:\n    print(f'{k}:{c}')\n",
      "expectedOutput": "b:3\na:2",
      "tutorial": "<p class=\"mb-4 text-gray-300\"><code>groupby</code> requires a sorted input to group identical keys; aggregate group sizes to compute frequencies.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from itertools import groupby\n\ns = 'a b a c b b'\nwords = sorted(s.split())\ncounts = [(k, sum(1 for _ in g)) for k, g in groupby(words)]\nfor k, c in sorted(counts, key=lambda kv: -kv[1])[:2]:\n    print(f'{k}:{c}')</pre></div>"
    },
    {
      "id": 175,
      "title": "175. asyncio.gather (sum results)",
      "language": "python",
      "description": "Run 3 async tasks concurrently and print the sum of their results (6).",
      "initialCode": "import asyncio\n\n# Create 3 coroutines returning 1,2,3 after small sleeps; gather and print sum (6)\n\n",
      "fullSolution": "import asyncio\n\nasync def f(v, delay):\n    await asyncio.sleep(delay)\n    return v\n\nasync def main():\n    xs = await asyncio.gather(f(1,0.05), f(2,0.05), f(3,0.05))\n    print(sum(xs))\n\nasyncio.run(main())\n",
      "expectedOutput": "6",
      "tutorial": "<p class=\"mb-4 text-gray-300\"><code>asyncio.gather</code> runs coroutines concurrently and returns their results as a list.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import asyncio\n\nasync def f(v, delay):\n    await asyncio.sleep(delay)\n    return v\n\nasync def main():\n    xs = await asyncio.gather(f(1,0.05), f(2,0.05), f(3,0.05))\n    print(sum(xs))\n\nasyncio.run(main())</pre></div>"
    },
    {
      "id": 176,
      "title": "176. re.findall digits",
      "language": "python",
      "description": "Extract digits from 'a1b22c' and print '122'.",
      "initialCode": "import re\n\n# Using re.findall, extract digits from 'a1b22c' and print 122\n\n",
      "fullSolution": "import re\nprint(''.join(re.findall(r'\\d', 'a1b22c')))\n",
      "expectedOutput": "122",
      "tutorial": "<p class=\"mb-4 text-gray-300\"><code>re.findall</code> returns all non-overlapping matches; join them into a string.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import re\nprint(''.join(re.findall(r'\\d', 'a1b22c')))</pre></div>"
    },
    {
      "id": 177,
      "title": "177. datetime: days between",
      "language": "python",
      "description": "Compute days between 2024-01-10 and 2024-01-15 (5).",
      "initialCode": "from datetime import date\n\n# Print (date(2024,1,15) - date(2024,1,10)).days (5)\n\n",
      "fullSolution": "from datetime import date\nprint((date(2024,1,15) - date(2024,1,10)).days)\n",
      "expectedOutput": "5",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Subtract two <code>date</code> objects to get a <code>timedelta</code>; use <code>.days</code>.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from datetime import date\nprint((date(2024,1,15) - date(2024,1,10)).days)</pre></div>"
    },
    {
      "id": 178,
      "title": "178. pathlib.glob (count .txt)",
      "language": "python",
      "description": "Create a.txt, b.md, c.txt in d/ and print how many .txt files exist (2).",
      "initialCode": "from pathlib import Path\n\n# Create d/a.txt, d/b.md, d/c.txt, then print count of *.txt under d (2)\n\n",
      "fullSolution": "from pathlib import Path\n\nd = Path('d'); d.mkdir(exist_ok=True)\n(d/'a.txt').write_text('x')\n(d/'b.md').write_text('y')\n(d/'c.txt').write_text('z')\nprint(len(list(d.glob('*.txt'))))\n",
      "expectedOutput": "2",
      "tutorial": "<p class=\"mb-4 text-gray-300\"><code>Path.glob</code> matches patterns within a directory; convert to a list to count.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from pathlib import Path\n\nd = Path('d'); d.mkdir(exist_ok=True)\n(d/'a.txt').write_text('x')\n(d/'b.md').write_text('y')\n(d/'c.txt').write_text('z')\nprint(len(list(d.glob('*.txt'))))</pre></div>"
    },
    {
      "id": 179,
      "title": "179. collections.Counter (top 2)",
      "language": "python",
      "description": "Use Counter to print top 2 words for s='a b a c b b' as b:3 then a:2.",
      "initialCode": "from collections import Counter\n\n# With s='a b a c b b', use Counter to print b:3 then a:2\n\n",
      "fullSolution": "from collections import Counter\n\ns = 'a b a c b b'\nfor k, c in Counter(s.split()).most_common(2):\n    print(f'{k}:{c}')\n",
      "expectedOutput": "b:3\na:2",
      "tutorial": "<p class=\"mb-4 text-gray-300\"><code>Counter.most_common</code> returns items sorted by frequency.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from collections import Counter\n\ns = 'a b a c b b'\nfor k, c in Counter(s.split()).most_common(2):\n    print(f'{k}:{c}')</pre></div>"
    },
    {
      "id": 180,
      "title": "180. itertools.product",
      "language": "python",
      "description": "Compute Cartesian product of ['a','b'] and [1,2] and print a1,a2,b1,b2 each on its own line.",
      "initialCode": "from itertools import product\n\n# Print a1, a2, b1, b2 (each on new line) from product(['a','b'], [1,2])\n\n",
      "fullSolution": "from itertools import product\nfor a,b in product(['a','b'], [1,2]):\n    print(f'{a}{b}')\n",
      "expectedOutput": "a1\na2\nb1\nb2",
      "tutorial": "<p class=\"mb-4 text-gray-300\"><code>product</code> nests loops in order: first sequence outer, second inner.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from itertools import product\nfor a,b in product(['a','b'], [1,2]):\n    print(f'{a}{b}')</pre></div>"
    },
    {
      "id": 181,
      "title": "181. functools.lru_cache (fib)",
      "language": "python",
      "description": "Cache Fibonacci to compute fib(10) and print 55.",
      "initialCode": "from functools import lru_cache\n\n# Define @lru_cache fib(n) and print fib(10) (55)\n\n",
      "fullSolution": "from functools import lru_cache\n\n@lru_cache(maxsize=None)\ndef fib(n):\n    return n if n < 2 else fib(n-1)+fib(n-2)\n\nprint(fib(10))\n",
      "expectedOutput": "55",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Memoization speeds up recursive computations significantly.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from functools import lru_cache\n\n@lru_cache(maxsize=None)\ndef fib(n):\n    return n if n &lt; 2 else fib(n-1)+fib(n-2)\n\nprint(fib(10))</pre></div>"
    },
    {
      "id": 182,
      "title": "182. threading.Lock (increment)",
      "language": "python",
      "description": "Safely increment a shared counter with 5 threads x 100 increments and print 500.",
      "initialCode": "from threading import Thread, Lock\n\n# Use a Lock to safely increment a shared counter to 500\n\n",
      "fullSolution": "from threading import Thread, Lock\n\nn = 0\nlock = Lock()\n\ndef inc():\n    global n\n    for _ in range(100):\n        with lock:\n            n += 1\n\nths = [Thread(target=inc) for _ in range(5)]\nfor t in ths: t.start()\nfor t in ths: t.join()\nprint(n)\n",
      "expectedOutput": "500",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Use a <code>Lock</code> around critical sections to avoid race conditions.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from threading import Thread, Lock\n\nn = 0\nlock = Lock()\n\ndef inc():\n    global n\n    for _ in range(100):\n        with lock:\n            n += 1\n\nths = [Thread(target=inc) for _ in range(5)]</pre></div>"
    },
    {
      "id": 183,
      "title": "183. read lines count",
      "language": "python",
      "description": "Write three lines to d/t.txt then read and print the line count (3).",
      "initialCode": "# Write a\\n b\\n c to d/t.txt then print line count (3)\n\n",
      "fullSolution": "from pathlib import Path\n\nd = Path('d'); d.mkdir(exist_ok=True)\n(p := d/'t.txt').write_text('a\\n b\\n c\\n')\nprint(len(p.read_text().splitlines()))\n",
      "expectedOutput": "3",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Use <code>Path.read_text</code> then <code>.splitlines()</code> to count lines.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from pathlib import Path\n\nd = Path('d'); d.mkdir(exist_ok=True)\n(p := d/'t.txt').write_text('a\\n b\\n c\\n')\nprint(len(p.read_text().splitlines()))</pre></div>"
    },
    {
      "id": 184,
      "title": "184. json.dumps sorted keys",
      "language": "python",
      "description": "Dump {'b':1,'a':2} with sorted keys and print {\"a\": 2, \"b\": 1}.",
      "initialCode": "import json\n\n# Print json.dumps({'b':1,'a':2}, sort_keys=True)\n\n",
      "fullSolution": "import json\nprint(json.dumps({'b':1,'a':2}, sort_keys=True))\n",
      "expectedOutput": "{\"a\": 2, \"b\": 1}",
      "tutorial": "<p class=\"mb-4 text-gray-300\"><code>json.dumps</code> with <code>sort_keys=True</code> produces deterministic key order.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import json\nprint(json.dumps({'b':1,'a':2}, sort_keys=True))</pre></div>"
    },
    {
      "id": 185,
      "title": "185. enum.auto name",
      "language": "python",
      "description": "Define an Enum with auto() and print the member name 'RED'.",
      "initialCode": "from enum import Enum, auto\n\n# Define Color(RED, GREEN) using auto and print Color.RED.name\n\n",
      "fullSolution": "from enum import Enum, auto\n\nclass Color(Enum):\n    RED = auto()\n    GREEN = auto()\n\nprint(Color.RED.name)\n",
      "expectedOutput": "RED",
      "tutorial": "<p class=\"mb-4 text-gray-300\"><code>auto()</code> assigns incrementing values automatically; use <code>.name</code> for the identifier.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from enum import Enum, auto\n\nclass Color(Enum):\n    RED = auto()\n    GREEN = auto()\n\nprint(Color.RED.name)</pre></div>"
    },
    {
      "id": 186,
      "title": "186. decimal quantize (HALF_UP)",
      "language": "python",
      "description": "Round Decimal('1.005') to two decimals (HALF_UP) and print 1.01.",
      "initialCode": "from decimal import Decimal, ROUND_HALF_UP\n\n# Print Decimal('1.005').quantize(Decimal('0.01'), rounding=ROUND_HALF_UP)\n\n",
      "fullSolution": "from decimal import Decimal, ROUND_HALF_UP\nprint(Decimal('1.005').quantize(Decimal('0.01'), rounding=ROUND_HALF_UP))\n",
      "expectedOutput": "1.01",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Use <code>Decimal</code> for precise rounding semantics.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from decimal import Decimal, ROUND_HALF_UP\nprint(Decimal('1.005').quantize(Decimal('0.01'), rounding=ROUND_HALF_UP))</pre></div>"
    },
    {
      "id": 187,
      "title": "187. heapq.merge",
      "language": "python",
      "description": "Merge [1,4] and [2,3] and print items in order each on its own line.",
      "initialCode": "import heapq\n\n# Print 1,2,3,4 (each on new line) from heapq.merge([1,4],[2,3])\n\n",
      "fullSolution": "import heapq\nfor x in heapq.merge([1,4],[2,3]):\n    print(x)\n",
      "expectedOutput": "1\n2\n3\n4",
      "tutorial": "<p class=\"mb-4 text-gray-300\"><code>heapq.merge</code> lazily merges sorted iterables.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import heapq\nfor x in heapq.merge([1,4],[2,3]):\n    print(x)</pre></div>"
    },
    {
      "id": 188,
      "title": "188. itertools.groupby (adjacent)",
      "language": "python",
      "description": "For 'aaabbc', print adjacent run lengths: a:3 then b:2 then c:1.",
      "initialCode": "from itertools import groupby\n\n# Using s='aaabbc', print a:3 then b:2 then c:1 (each on new line)\n\n",
      "fullSolution": "from itertools import groupby\n\ns = 'aaabbc'\nfor k, g in groupby(s):\n    print(f'{k}:{sum(1 for _ in g)}')\n",
      "expectedOutput": "a:3\nb:2\nc:1",
      "tutorial": "<p class=\"mb-4 text-gray-300\">On unsorted strings, <code>groupby</code> groups adjacent equal items.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from itertools import groupby\n\ns = 'aaabbc'\nfor k, g in groupby(s):\n    print(f'{k}:{sum(1 for _ in g)}')</pre></div>"
    },
    {
      "id": 189,
      "title": "189. array.array sum",
      "language": "python",
      "description": "Create array('i',[1,2,3]) and print the sum (6).",
      "initialCode": "from array import array\n\n# Print sum(array('i',[1,2,3])) -> 6\n\n",
      "fullSolution": "from array import array\nprint(sum(array('i',[1,2,3])))\n",
      "expectedOutput": "6",
      "tutorial": "<p class=\"mb-4 text-gray-300\"><code>array</code> stores homogenous values efficiently; many built-ins like <code>sum</code> work directly.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from array import array\nprint(sum(array('i',[1,2,3])))</pre></div>"
    },
    {
      "id": 190,
      "title": "190. dataclasses.field metadata",
      "language": "python",
      "description": "Define a dataclass with metadata and print a field's metadata value.",
      "initialCode": "from dataclasses import dataclass, field\n\n# Define User(name: str = field(metadata={'role':'admin'})); print the role metadata\n\n",
      "fullSolution": "from dataclasses import dataclass, field\n\n@dataclass\nclass User:\n    name: str = field(metadata={'role':'admin'})\n\nprint(User.__dataclass_fields__['name'].metadata['role'])\n",
      "expectedOutput": "admin",
      "tutorial": "<p class=\"mb-4 text-gray-300\"><code>field(metadata=...)</code> is a hook for frameworks and annotations.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from dataclasses import dataclass, field\n\n@dataclass\nclass User:\n    name: str = field(metadata={'role':'admin'})\n\nprint(User.__dataclass_fields__['name'].metadata['role'])</pre></div>"
    },
    {
      "id": 191,
      "title": "191. typing.NamedTuple",
      "language": "python",
      "description": "Define Person(name,id) as NamedTuple, create ('Ada',1), and print the name.",
      "initialCode": "from typing import NamedTuple\n\n# Define Person(name:str,id:int); print Person('Ada',1).name\n\n",
      "fullSolution": "from typing import NamedTuple\n\nclass Person(NamedTuple):\n    name: str\n    id: int\n\nprint(Person('Ada',1).name)\n",
      "expectedOutput": "Ada",
      "tutorial": "<p class=\"mb-4 text-gray-300\"><code>NamedTuple</code> provides lightweight, typed, immutable records.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from typing import NamedTuple\n\nclass Person(NamedTuple):\n    name: str\n    id: int\n\nprint(Person('Ada',1).name)</pre></div>"
    },
    {
      "id": 192,
      "title": "192. Path.read_text().upper()",
      "language": "python",
      "description": "Write 'ok' to d/t.txt and print its uppercase content 'OK'.",
      "initialCode": "from pathlib import Path\n\n# Write 'ok' to d/t.txt, then print Path('d/t.txt').read_text().upper()\n\n",
      "fullSolution": "from pathlib import Path\n\nd = Path('d'); d.mkdir(exist_ok=True)\n(d/'t.txt').write_text('ok')\nprint((d/'t.txt').read_text().upper())\n",
      "expectedOutput": "OK",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Combine <code>Path.write_text</code> and <code>Path.read_text</code> for simple text IO.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from pathlib import Path\n\nd = Path('d'); d.mkdir(exist_ok=True)\n(d/'t.txt').write_text('ok')\nprint((d/'t.txt').read_text().upper())</pre></div>"
    },
    {
      "id": 193,
      "title": "193. asyncio.wait_for timeout",
      "language": "python",
      "description": "Timeout a slow coroutine and print 'timeout'.",
      "initialCode": "import asyncio\n\n# Use asyncio.wait_for on a 0.2s sleep with 0.05s timeout; print 'timeout'\n\n",
      "fullSolution": "import asyncio\n\nasync def slow():\n    await asyncio.sleep(0.2)\n\ntry:\n    asyncio.run(asyncio.wait_for(slow(), 0.05))\n    print('ok')\nexcept asyncio.TimeoutError:\n    print('timeout')\n",
      "expectedOutput": "timeout",
      "tutorial": "<p class=\"mb-4 text-gray-300\"><code>wait_for</code> cancels if the operation exceeds the timeout.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import asyncio\n\nasync def slow():\n    await asyncio.sleep(0.2)\n\ntry:\n    asyncio.run(asyncio.wait_for(slow(), 0.05))\n    print('ok')\nexcept asyncio.TimeoutError:\n    print('timeout')</pre></div>"
    },
    {
      "id": 194,
      "title": "194. itertools.accumulate (product)",
      "language": "python",
      "description": "Multiply 1..4 via accumulate and print final result (24).",
      "initialCode": "from itertools import accumulate\nimport operator\n\n# Compute product of 1..4 using accumulate and print 24\n\n",
      "fullSolution": "from itertools import accumulate\nimport operator\n\nxs = list(accumulate([1,2,3,4], operator.mul))\nprint(xs[-1])\n",
      "expectedOutput": "24",
      "tutorial": "<p class=\"mb-4 text-gray-300\"><code>accumulate</code> can fold a sequence with a custom operator.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from itertools import accumulate\nimport operator\n\nxs = list(accumulate([1,2,3,4], operator.mul))\nprint(xs[-1])</pre></div>"
    },
    {
      "id": 195,
      "title": "195. re.sub replace digits",
      "language": "python",
      "description": "Replace digits in 'a1b22' with '#' and print 'a#b##'.",
      "initialCode": "import re\n\n# Print re.sub(r'\\d', '#', 'a1b22') -> a#b##\n\n",
      "fullSolution": "import re\nprint(re.sub(r'\\d', '#', 'a1b22'))\n",
      "expectedOutput": "a#b##",
      "tutorial": "<p class=\"mb-4 text-gray-300\"><code>re.sub</code> replaces all matches; escape <code>\\\\d</code> properly.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import re\nprint(re.sub(r'\\d', '#', 'a1b22'))</pre></div>"
    },
    {
      "title": "196. Assertions for Lightweight Tests",
      "language": "python",
      "description": "Implement add(a, b) and verify with assert; print OK when all tests pass.",
      "initialCode": "def add(a, b):\n    # TODO: return the sum\n    pass\n\n# Add a couple of asserts and print \"OK\" if they pass\n",
      "fullSolution": "def add(a, b):\n    return a + b\n\nassert add(2, 3) == 5\nassert add(-1, 1) == 0\nprint(\"OK\")\n",
      "expectedOutput": "OK",
      "tutorial": "<p class=\"mb-4 text-gray-300\">assert is a simple built-in way to check expectations while coding. If the condition is False, Python raises AssertionError and stops; if all asserts pass, execution continues.</p>\n<h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4>\n<div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">def square(x):\n    return x * x\n\nassert square(3) == 9\nprint(\"OK\")</pre></div>",
      "id": 196
    },
    {
      "title": "197. Regex Basics: Extract Email",
      "language": "python",
      "description": "Use re.search to find and print the email in the given text.",
      "initialCode": "import re\ntext = \"Contact us at support@example.com for help.\"\n# Print the email address from text\n",
      "fullSolution": "import re\ntext = \"Contact us at support@example.com for help.\"\nm = re.search(r\"[\\w\\.-]+@[\\w\\.-]+\", text)\nif m:\n    print(m.group(0))\n",
      "expectedOutput": "support@example.com",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Regular expressions match patterns in text. Use re.search to find the first match, and groups to extract portions.</p>\n<h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4>\n<div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import re\nm = re.search(r\"\\d+\", \"Order A-1023\")\nprint(m.group(0))  # 1023</pre></div>",
      "id": 197
    },
    {
      "title": "198. JSON Encode/Decode",
      "language": "python",
      "description": "Serialize a dict to JSON and parse it back; print the name value.",
      "initialCode": "import json\ndata = {\"name\": \"Alice\", \"age\": 30}\n# Dump to JSON, load it back, then print the name\n",
      "fullSolution": "import json\ndata = {\"name\": \"Alice\", \"age\": 30}\ns = json.dumps(data)\nobj = json.loads(s)\nprint(obj[\"name\"])\n",
      "expectedOutput": "Alice",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Use the json module to convert between Python objects and JSON strings: dumps() to serialize, loads() to parse.</p>\n<h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4>\n<div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import json\npayload = {\"ok\": True}\ns = json.dumps(payload)\nprint(s)  # {\"ok\": true}</pre></div>",
      "id": 198
    },
    {
      "title": "199. asyncio.Semaphore (limit concurrency)",
      "language": "python",
      "description": "Run 4 async tasks with a concurrency limit of 2 using Semaphore; print the total tasks run (4).",
      "initialCode": "import asyncio\n\n# Use an asyncio.Semaphore to limit concurrency to 2 while running 4 tasks.\n# Each task should return 1; after gathering, print the sum (4).\n\n",
      "fullSolution": "import asyncio\n\nasync def worker(sema):\n    async with sema:\n        await asyncio.sleep(0.05)\n        return 1\n\nasync def main():\n    sema = asyncio.Semaphore(2)\n    tasks = [asyncio.create_task(worker(sema)) for _ in range(4)]\n    results = await asyncio.gather(*tasks)\n    print(sum(results))\n\nasyncio.run(main())\n",
      "expectedOutput": "4",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Use <code>asyncio.Semaphore</code> to bound simultaneous operations (e.g., API calls, file I/O). It prevents too many tasks from running at once.</p>\n<h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4>\n<div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import asyncio\nsema = asyncio.Semaphore(2)\nasync def work():\n    async with sema:\n        await asyncio.sleep(0.01)\n        return 1\n</pre></div>",
      "id": 199
    },
    {
      "title": "200. ProcessPoolExecutor (sum of cubes)",
      "language": "python",
      "description": "Use ProcessPoolExecutor to compute the sum of cubes from 1..50 and print it.",
      "initialCode": "from concurrent.futures import ProcessPoolExecutor\n\n# Define a top-level cube(x) and safely run a ProcessPoolExecutor\n# to sum x*x*x for x in 1..50, then print the total.\n\n",
      "fullSolution": "from concurrent.futures import ProcessPoolExecutor\n\ndef cube(x):\n    return x*x*x\n\nif __name__ == '__main__':\n    with ProcessPoolExecutor() as ex:\n        total = sum(ex.map(cube, range(1, 51)))\n        print(total)\n",
      "expectedOutput": "1625625",
      "tutorial": "<p class=\"mb-4 text-gray-300\">CPU-bound work scales with processes, not threads. Use <code>ProcessPoolExecutor</code> to fan out heavy computation across cores and then reduce results.</p>\n<h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4>\n<div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from concurrent.futures import ProcessPoolExecutor\ndef f(x):\n    return x*x\nif __name__ == '__main__':\n    with ProcessPoolExecutor() as ex:\n        print(sum(ex.map(f, range(5))))  # 0+1+4+9+16 = 30</pre></div>",
      "id": 200
    },
    {
      "title": "201. asyncio.Queue producer/consumer",
      "language": "python",
      "description": "Use an asyncio.Queue with a producer that enqueues 5 items and a consumer that counts them; print 5.",
      "initialCode": "import asyncio\n\n# Create an asyncio.Queue. Producer should put 5 items then a sentinel (None).\n# Consumer should count items until sentinel, then print the count (5).\n\n",
      "fullSolution": "import asyncio\n\nasync def producer(q):\n    for i in range(5):\n        await q.put(i)\n    await q.put(None)  # sentinel\n\nasync def consumer(q):\n    count = 0\n    while True:\n        item = await q.get()\n        if item is None:\n            print(count)\n            return\n        count += 1\n\nasync def main():\n    q = asyncio.Queue()\n    await asyncio.gather(producer(q), consumer(q))\n\nasyncio.run(main())\n",
      "expectedOutput": "5",
      "tutorial": "<p class=\"mb-4 text-gray-300\"><code>asyncio.Queue</code> coordinates producers and consumers without busy-waiting. Use a sentinel to signal completion.</p>\n<h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4>\n<div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">q = asyncio.Queue()\n# producer: await q.put(x)\n# consumer: x = await q.get()\n</pre></div>",
      "id": 201
    },
    {
      "title": "202. contextlib.ExitStack (multiple resources)",
      "language": "python",
      "description": "Use ExitStack to manage two file handles, write 'A' and 'B', then read both and print AB.",
      "initialCode": "from contextlib import ExitStack\n\n# Open a.txt and b.txt with ExitStack, write 'A' and 'B' respectively.\n# Reopen and read both, then print their concatenation (AB).\n\n",
      "fullSolution": "from contextlib import ExitStack\n\nwith ExitStack() as stack:\n    fa = stack.enter_context(open('a.txt', 'w'))\n    fb = stack.enter_context(open('b.txt', 'w'))\n    fa.write('A')\n    fb.write('B')\n\nwith ExitStack() as stack:\n    fa = stack.enter_context(open('a.txt'))\n    fb = stack.enter_context(open('b.txt'))\n    print(fa.read() + fb.read())\n",
      "expectedOutput": "AB",
      "tutorial": "<p class=\"mb-4 text-gray-300\"><code>ExitStack</code> lets you dynamically compose multiple context managers (files, locks, etc.) and guarantees cleanup in reverse order.</p>\n<h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4>\n<div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from contextlib import ExitStack\nwith ExitStack() as stack:\n    f1 = stack.enter_context(open('x.txt', 'w'))\n    f2 = stack.enter_context(open('y.txt', 'w'))\n    f1.write('X'); f2.write('Y')\n</pre></div>",
      "id": 202
    },
    {
      "id": 203,
      "title": "203. sqlite3 in-memory (row count)",
      "language": "python",
      "description": "Create an in-memory SQLite DB, insert two rows, and print the count (2).",
      "initialCode": "import sqlite3\n\n# Create :memory: DB, table users(id INT, name TEXT), insert two rows, then SELECT COUNT(*) and print it\n\n",
      "fullSolution": "import sqlite3\n\nconn = sqlite3.connect(':memory:')\nc = conn.cursor()\nc.execute('CREATE TABLE users(id INT, name TEXT)')\nc.executemany('INSERT INTO users VALUES(?,?)', [(1,'Alice'), (2,'Bob')])\nconn.commit()\ncount = c.execute('SELECT COUNT(*) FROM users').fetchone()[0]\nprint(count)\n",
      "expectedOutput": "2",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Use the built-in <code>sqlite3</code> module for lightweight relational storage. <code>':memory:'</code> keeps data ephemeral.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">conn = sqlite3.connect(':memory:')\nc = conn.cursor()\nc.execute('CREATE TABLE t(x)')\nc.execute('INSERT INTO t VALUES(1)')\nprint(c.execute('SELECT COUNT(*) FROM t').fetchone()[0])</pre></div>"
    },
    {
      "id": 204,
      "title": "204. dataclasses ordering",
      "language": "python",
      "description": "Define an ordered dataclass User(age, name), sort, and print the youngest name (Anna).",
      "initialCode": "from dataclasses import dataclass\n\n# Define @dataclass(order=True) User with fields: age:int, name:str\n# Sort [User(30,'Zoe'), User(20,'Anna')] and print the first name\n\n",
      "fullSolution": "from dataclasses import dataclass\n\n@dataclass(order=True)\nclass User:\n    age: int\n    name: str\n\nusers = [User(30,'Zoe'), User(20,'Anna')]\nusers.sort()\nprint(users[0].name)\n",
      "expectedOutput": "Anna",
      "tutorial": "<p class=\"mb-4 text-gray-300\">With <code>@dataclass(order=True)</code>, Python generates comparison methods using field order, enabling natural sorting.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">@dataclass(order=True)\nclass Point: x: int; y: int\nprint(sorted([Point(1,2), Point(0,9)]))</pre></div>"
    },
    {
      "id": 205,
      "title": "205. functools.singledispatch",
      "language": "python",
      "description": "Dispatch a function on argument type; print 'int:1' then 'str:a'.",
      "initialCode": "from functools import singledispatch\n\n# Define show(x) using @singledispatch with int and str specializations\n# Call show(1) then show('a') and print per-type results\n\n",
      "fullSolution": "from functools import singledispatch\n\n@singledispatch\ndef show(x):\n    return f'obj:{x}'\n\n@show.register(int)\ndef _(x: int):\n    return f'int:{x}'\n\n@show.register(str)\ndef _(x: str):\n    return f'str:{x}'\n\nprint(show(1))\nprint(show('a'))\n",
      "expectedOutput": "int:1\nstr:a",
      "tutorial": "<p class=\"mb-4 text-gray-300\"><code>@singledispatch</code> enables type-based function overloading for the first argument, keeping APIs clean.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">@singledispatch\ndef f(x): ...\n@f.register(list)\ndef _(x): ...</pre></div>"
    },
    {
      "id": 206,
      "title": "206. itertools.accumulate (running sum)",
      "language": "python",
      "description": "Use accumulate to print running sums for [1,2,3]: 1, 3, 6 (each on new line).",
      "initialCode": "from itertools import accumulate\n\n# For [1,2,3], print running sums using accumulate (each on its own line)\n\n",
      "fullSolution": "from itertools import accumulate\nfor s in accumulate([1,2,3]):\n    print(s)\n",
      "expectedOutput": "1\n3\n6",
      "tutorial": "<p class=\"mb-4 text-gray-300\"><code>accumulate</code> computes prefix results (default: sums). Supply a function for other reductions (e.g., <code>max</code>).</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from itertools import accumulate\nprint(list(accumulate([1,2,3])))  # [1, 3, 6]</pre></div>"
    },
    {
      "id": 207,
      "title": "207. bisect_right (insertion index)",
      "language": "python",
      "description": "Find the right-side insertion index of 3 in [1,2,3,4] and print 3.",
      "initialCode": "import bisect\n\n# Print bisect.bisect_right([1,2,3,4], 3)\n\n",
      "fullSolution": "import bisect\nprint(bisect.bisect_right([1,2,3,4], 3))\n",
      "expectedOutput": "3",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Use <code>bisect_right</code> for stable insertion after existing equals; <code>bisect_left</code> inserts before.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import bisect\nxs = [1,2,3,4]\nprint(bisect.bisect_right(xs, 3))  # 3</pre></div>"
    },
    {
      "id": 208,
      "title": "208. pathlib.glob (*.txt count)",
      "language": "python",
      "description": "Create a.txt, b.py, c.txt then print how many *.txt files exist (2).",
      "initialCode": "from pathlib import Path\n\n# Create files a.txt, b.py, c.txt in CWD\n# Use Path('.').glob('*.txt') to count and print 2\n\n",
      "fullSolution": "from pathlib import Path\nPath('a.txt').write_text('A')\nPath('b.py').write_text('print(1)')\nPath('c.txt').write_text('C')\nprint(sum(1 for _ in Path('.').glob('*.txt')))\n",
      "expectedOutput": "2",
      "tutorial": "<p class=\"mb-4 text-gray-300\"><code>pathlib</code> provides object-oriented paths. <code>glob</code> returns matching entries lazily.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from pathlib import Path\n# Count *.py files in current dir\nprint(sum(1 for _ in Path('.').glob('*.py')))</pre></div>"
    },
    {
      "id": 209,
      "title": "209. subprocess.run (call Python)",
      "language": "python",
      "description": "Spawn a child Python process that prints OK and relay the output.",
      "initialCode": "import subprocess, sys\n\n# Use subprocess.run to invoke the current Python to print 'OK'\n# Hint: [sys.executable, '-c', \"print('OK')\"]\n\n",
      "fullSolution": "import subprocess, sys\nres = subprocess.run([sys.executable, '-c', \"print('OK')\"], capture_output=True, text=True)\nprint(res.stdout.strip())\n",
      "expectedOutput": "OK",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Use <code>subprocess.run</code> for child processes. Prefer explicit <code>args</code> and capture outputs deterministically.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import subprocess, sys\nsubprocess.run([sys.executable, '-c', \"print('hi')\"])</pre></div>"
    },
    {
      "id": 210,
      "title": "210. hashlib.sha256",
      "language": "python",
      "description": "Compute the SHA-256 hex digest of 'abc' and print it.",
      "initialCode": "import hashlib\n\n# Print hashlib.sha256(b'abc').hexdigest()\n\n",
      "fullSolution": "import hashlib\nprint(hashlib.sha256(b'abc').hexdigest())\n",
      "expectedOutput": "ba7816bf8f01cfea414140de5dae2223b00361a396177a9cb410ff61f20015ad",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Use <code>hashlib</code> for cryptographic hashes (integrity checks, fingerprints).</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import hashlib\nprint(hashlib.sha256(b'abc').hexdigest())</pre></div>"
    },
    {
      "id": 211,
      "title": "211. zipfile write/read (count)",
      "language": "python",
      "description": "Create a zip with two files then open and print the number of entries (2).",
      "initialCode": "import zipfile, pathlib\n\n# Create files a.txt and b.txt, zip them to x.zip, then reopen and print len(namelist())\n\n",
      "fullSolution": "import zipfile, pathlib\npathlib.Path('a.txt').write_text('A')\npathlib.Path('b.txt').write_text('B')\nwith zipfile.ZipFile('x.zip','w') as z:\n    z.write('a.txt')\n    z.write('b.txt')\nwith zipfile.ZipFile('x.zip') as z:\n    print(len(z.namelist()))\n",
      "expectedOutput": "2",
      "tutorial": "<p class=\"mb-4 text-gray-300\"><code>zipfile</code> packs multiple files; <code>namelist()</code> lists contained paths.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import zipfile\nwith zipfile.ZipFile('x.zip','w') as z:\n    z.writestr('t.txt', 'data')\nprint(len(zipfile.ZipFile('x.zip').namelist()))</pre></div>"
    },
    {
      "id": 212,
      "title": "212. datetime with UTC tz",
      "language": "python",
      "description": "Create 2020-01-02 03:04:05 UTC and print ISO 8601 string.",
      "initialCode": "from datetime import datetime, timezone\n\n# Build aware datetime(2020,1,2,3,4,5, tzinfo=timezone.utc) and print .isoformat()\n\n",
      "fullSolution": "from datetime import datetime, timezone\nprint(datetime(2020,1,2,3,4,5, tzinfo=timezone.utc).isoformat())\n",
      "expectedOutput": "2020-01-02T03:04:05+00:00",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Always prefer timezone-aware datetimes for correctness across zones; UTC is a reliable default.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from datetime import datetime, timezone\nprint(datetime.now(timezone.utc).isoformat())</pre></div>"
    },
    {
      "id": 213,
      "title": "213. lru_cache Fibonacci",
      "language": "python",
      "description": "Use functools.lru_cache to compute fib(30) and print the result (832040).",
      "initialCode": "from functools import lru_cache\n\n# Implement memoized fib(n) with @lru_cache and print fib(30)\n\n",
      "fullSolution": "from functools import lru_cache\n\n@lru_cache(maxsize=None)\ndef fib(n: int) -> int:\n    return n if n < 2 else fib(n-1) + fib(n-2)\n\nprint(fib(30))\n",
      "expectedOutput": "832040",
      "tutorial": "<p class=\"mb-4 text-gray-300\"><code>lru_cache</code> provides transparent memoization for pure functions, dramatically improving performance.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from functools import lru_cache\n@lru_cache(maxsize=None)\ndef f(n): return 1 if n<2 else f(n-1)+f(n-2)\nprint(f(10))  # 89</pre></div>"
    },
    {
      "id": 214,
      "title": "214. collections.Counter.most_common",
      "language": "python",
      "description": "Count letters in 'aabbbc' and print the most common entry b:3.",
      "initialCode": "from collections import Counter\n\n# Print the most common letter and count from 'aabbbc' in format k:v (b:3)\n\n",
      "fullSolution": "from collections import Counter\n(k,v), = Counter('aabbbc').most_common(1)\nprint(f'{k}:{v}')\n",
      "expectedOutput": "b:3",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Counters tally occurrences quickly; use <code>most_common(1)</code> for the top item.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from collections import Counter\nprint(Counter('abca').most_common(1))</pre></div>"
    },
    {
      "id": 215,
      "title": "215. struct pack/unpack (big-endian)",
      "language": "python",
      "description": "Pack 1024 as a big-endian unsigned int and unpack; print 1024.",
      "initialCode": "import struct\n\n# Pack 1024 with '>I' then unpack and print the value\n\n",
      "fullSolution": "import struct\nblob = struct.pack('>I', 1024)\nprint(struct.unpack('>I', blob)[0])\n",
      "expectedOutput": "1024",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Use <code>struct</code> for binary protocols; format strings control width and endianness.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import struct\nprint(struct.unpack('>H', b'\\x00\\x2a')[0])  # 42</pre></div>"
    },
    {
      "id": 216,
      "title": "216. contextlib.suppress",
      "language": "python",
      "description": "Delete a non-existent file without raising and print OK.",
      "initialCode": "from contextlib import suppress\nfrom pathlib import Path\n\n# Safely suppress FileNotFoundError when removing missing file, then print 'OK'\n\n",
      "fullSolution": "from contextlib import suppress\nfrom pathlib import Path\nwith suppress(FileNotFoundError):\n    Path('nope.txt').unlink()\nprint('OK')\n",
      "expectedOutput": "OK",
      "tutorial": "<p class=\"mb-4 text-gray-300\"><code>suppress</code> keeps code concise by ignoring specific, expected exceptions.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">from contextlib import suppress\nwith suppress(ZeroDivisionError):\n    1/0</pre></div>"
    },
    {
      "id": 217,
      "title": "217. threading.Event (signal)",
      "language": "python",
      "description": "Use a worker thread to set an Event; main waits then prints 'done'.",
      "initialCode": "import threading, time\n\n# Start a thread that sleeps briefly then sets an Event. Main waits and prints 'done'.\n\n",
      "fullSolution": "import threading, time\n\nflag = threading.Event()\n\ndef worker():\n    time.sleep(0.02)\n    flag.set()\n\nthreading.Thread(target=worker).start()\nflag.wait()\nprint('done')\n",
      "expectedOutput": "done",
      "tutorial": "<p class=\"mb-4 text-gray-300\">Use <code>Event</code> for one-shot signaling between threads without busy-waiting.</p><h4 class=\"font-semibold text-gray-200 mb-2\">Example:</h4><div class=\"code-block-wrapper\"><pre class=\"tutorial-code-block\">import threading, time\nflag = threading.Event()\nthreading.Thread(target=lambda: (time.sleep(0.01), flag.set())).start()\nflag.wait()</pre></div>"
    }
  ]
}
